// Compiled shader for all platforms

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Legacy Shaders/Diffuse" {
Properties {
 _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
 _MainTex ("Base (RGB)", 2D) = "white" { }
}
SubShader { 
 LOD 200
 Tags { "RenderType"="Opaque" }


 // Stats for Vertex shader:
 //         d3d9: 53 avg math (34..72)
 //        d3d11: 40 avg math (26..54)
 //         gles: 19 avg math (8..30), 1 avg texture (1..2)
 //     d3d11_9x: 43 avg math (33..54)
 // Stats for Fragment shader:
 //         d3d9: 20 avg math (7..33), 1 avg texture (1..2)
 //        d3d11: 38 avg math (19..57), 4 avg texture (2..6), 3 avg branch (2..4)
 //     d3d11_9x: 6 math, 1 texture
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="FORWARDBASE" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
//Keywords set in this variant: DIRECTIONAL 
-- Vertex shader for "d3d9":
// Stats: 43 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 18
Vector4 unity_SHAb at 13
Vector4 unity_SHAg at 12
Vector4 unity_SHAr at 11
Vector4 unity_SHBb at 16
Vector4 unity_SHBg at 15
Vector4 unity_SHBr at 14
Vector4 unity_SHC at 17

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   float4 unity_SHAb;
//   float4 unity_SHAg;
//   float4 unity_SHAr;
//   float4 unity_SHBb;
//   float4 unity_SHBg;
//   float4 unity_SHBr;
//   float4 unity_SHC;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   unity_SHAr          c11      1
//   unity_SHAg          c12      1
//   unity_SHAb          c13      1
//   unity_SHBr          c14      1
//   unity_SHBg          c15      1
//   unity_SHBb          c16      1
//   unity_SHC           c17      1
//   _MainTex_ST         c18      1
//

    vs_3_0
    def c19, 1.05499995, -0.0549999997, 0, 0
    def c20, 1, 0, 0.416666657, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4.xyz
    dcl_texcoord4 o5.xy
    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r4.x, c4, r1
    dp4 r4.y, c5, r1
    dp4 r4.z, c6, r1
    dp4 r4.w, c7, r1
    mad o1.xy, v2, c18, c18.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    nrm r1.xyz, r0
    mul r0.x, r1.y, r1.y
    mad r0.x, r1.x, r1.x, -r0.x
    mul r2, r1.yzzx, r1.xyzz
    dp4 r3.x, c14, r2
    dp4 r3.y, c15, r2
    dp4 r3.z, c16, r2
    mad r0.xyz, c17, r0.x, r3
    mov r1.w, c20.x
    dp4 r2.x, c11, r1
    dp4 r2.y, c12, r1
    dp4 r2.z, c13, r1
    mov o2.xyz, r1
    add r0.xyz, r0, r2
    max r0.xyz, r0, c20.y
    log r1.x, r0.x
    log r1.y, r0.y
    log r1.z, r0.z
    mul r0.xyz, r1, c20.z
    exp r1.x, r0.x
    exp r1.y, r0.y
    exp r1.z, r0.z
    mad r0.xyz, r1, c19.x, c19.y
    max o4.xyz, r0, c20.y
    mov o5.xy, c20.y
    mad o0.xy, r4.w, c255, r4
    mov o0.zw, r4

// approximately 45 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 7 math, 1 textures
Vector4 _Color at 2
Vector4 _LightColor0 at 1
Vector4 _WorldSpaceLightPos0 at 0

Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _LightColor0;
//   sampler2D _MainTex;
//   float4 _WorldSpaceLightPos0;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   _WorldSpaceLightPos0 c0       1
//   _LightColor0         c1       1
//   _Color               c2       1
//   _MainTex             s0       1
//

    ps_3_0
    def c3, 0, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_texcoord3_pp v2.xyz
    dcl_2d s0
    dp3_pp r0.x, v1, c0
    max_pp r1.x, r0.x, c3.x
    texld r0, v0, s0
    mul_pp r0.xyz, r0, c2
    mul_pp r1.yzw, r0.xxyz, c1.xxyz
    mul_pp r0.xyz, r0, v2
    mad_pp oC0.xyz, r1.yzww, r1.x, r0
    mov_pp oC0.w, c3.y

// approximately 8 instruction slots used (1 texture, 7 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 33 math, 4 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 4     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_temps 4
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb2[3].xyzw
   4: mad o3.xyz, cb2[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb3[18].xyzw
   6: mad r0.xyzw, cb3[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb3[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb3[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r0.x, v2.xyzx, cb2[4].xyzx
  12: dp3 r0.y, v2.xyzx, cb2[5].xyzx
  13: dp3 r0.z, v2.xyzx, cb2[6].xyzx
  14: dp3 r0.w, r0.xyzx, r0.xyzx
  15: rsq r0.w, r0.w
  16: mul r0.xyz, r0.wwww, r0.xyzx
  17: mov o2.xyz, r0.xyzx
  18: mul r1.x, r0.y, r0.y
  19: mad r1.x, r0.x, r0.x, -r1.x
  20: mul r2.xyzw, r0.yzzx, r0.xyzz
  21: dp4 r3.x, cb1[41].xyzw, r2.xyzw
  22: dp4 r3.y, cb1[42].xyzw, r2.xyzw
  23: dp4 r3.z, cb1[43].xyzw, r2.xyzw
  24: mad r1.xyz, cb1[44].xyzx, r1.xxxx, r3.xyzx
  25: mov r0.w, l(1.000000)
  26: dp4 r2.x, cb1[38].xyzw, r0.xyzw
  27: dp4 r2.y, cb1[39].xyzw, r0.xyzw
  28: dp4 r2.z, cb1[40].xyzw, r0.xyzw
  29: add r0.xyz, r1.xyzx, r2.xyzx
  30: max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  31: log r0.xyz, r0.xyzx
  32: mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  33: exp r0.xyz, r0.xyzx
  34: mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  35: max o4.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  36: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 19 math, 2 temp registers, 2 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _LightColor0 at 32
  Vector4 _Color at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 720
}
Constant Buffer "UnityProbeVolume" (112 bytes) on slot 2 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 16
  Vector4 unity_ProbeVolumeParams at 0
  Vector3 unity_ProbeVolumeSizeInv at 80
  Vector3 unity_ProbeVolumeMin at 96
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 4     zw        1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[46], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture3d (float,float,float,float) t1
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_input_ps linear v4.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s1
   1: mul r0.xyz, r0.xyzx, cb0[4].xyzx
   2: eq r0.w, cb2[0].x, l(1.000000)
   3: if_nz r0.w
   4:   eq r0.w, cb2[0].y, l(1.000000)
   5:   mul r1.xyz, v3.yyyy, cb2[2].xyzx
   6:   mad r1.xyz, cb2[1].xyzx, v3.xxxx, r1.xyzx
   7:   mad r1.xyz, cb2[3].xyzx, v3.zzzz, r1.xyzx
   8:   add r1.xyz, r1.xyzx, cb2[4].xyzx
   9:   movc r1.xyz, r0.wwww, r1.xyzx, v3.xyzx
  10:   add r1.xyz, r1.xyzx, -cb2[6].xyzx
  11:   mul r1.yzw, r1.xxyz, cb2[5].xxyz
  12:   mad r0.w, r1.y, l(0.250000), l(0.750000)
  13:   mad r1.y, cb2[0].z, l(0.500000), l(0.750000)
  14:   max r1.x, r0.w, r1.y
  15:   sample r1.xyzw, r1.xzwx, t1.xyzw, s0
  16: else 
  17:   mov r1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  18: endif 
  19: dp4_sat r0.w, r1.xyzw, cb1[45].xyzw
  20: mul r1.xyz, r0.wwww, cb0[2].xyzx
  21: dp3 r0.w, v2.xyzx, cb1[0].xyzx
  22: max r0.w, r0.w, l(0.000000)
  23: mul r1.xyz, r0.xyzx, r1.xyzx
  24: mul r0.xyz, r0.xyzx, v4.xyzx
  25: mad o0.xyz, r1.xyzx, r0.wwww, r0.xyzx
  26: mov o0.w, l(1.000000)
  27: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 8 math, 1 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  mediump vec3 normal_7;
  normal_7 = worldNormal_1;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
  xlv_TEXCOORD4 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_8;
  lowp vec4 c_9;
  lowp float diff_10;
  mediump float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_10 = tmpvar_11;
  c_9.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_10);
  c_9.w = tmpvar_7.w;
  c_8.w = c_9.w;
  c_8.xyz = (c_9.xyz + (tmpvar_7.xyz * xlv_TEXCOORD3));
  c_3.xyz = c_8.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 33 math, 4 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 4     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             5         1  ( FLT, FLT, FLT, FLT)
// c2         cb1            38         7  ( FLT, FLT, FLT, FLT)
// c9         cb2             0         7  ( FLT, FLT, FLT, FLT)
// c16        cb3            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          def c20, 1, 0, 0.416666657, 0
          def c21, 1.05499995, -0.0549999997, 0, 0
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c10
   2:     mad r0, c9, v0.x, r0
   3:     mad r0, c11, v0.z, r0
   4:     mad oT2.xyz, c12, v0.w, r0
   5:     add r0, r0, c12
   6:     dp3 r1.x, v2, c13
   7:     dp3 r1.y, v2, c14
   8:     dp3 r1.z, v2, c15
   9:     nrm r2.xyz, r1
  12:     mul r1.x, r2.y, r2.y
  13:     mad r1.x, r2.x, r2.x, -r1.x
  14:     mul r3, r2.yzzx, r2.xyzz
  15:     dp4 r4.x, c5, r3
  16:     dp4 r4.y, c6, r3
  17:     dp4 r4.z, c7, r3
  18:     mad r1.xyz, c8, r1.x, r4
  19:     mov r2.w, c20.x
  20:     dp4 r3.x, c2, r2
  21:     dp4 r3.y, c3, r2
  22:     dp4 r3.z, c4, r2
  23:     mov oT1.xyz, r2
  24:     add r1.xyz, r1, r3
  25:     max r1.xyz, r1, c20.y
  26:     mov r1.w, c20.z
  27:     lit r2, r1.xxww
  28:     mov r2.x, r2.z
  29:     lit r3, r1.yyww
  30:     lit r1, r1.zzww
  31:     mov r2.z, r1.z
  32:     mov r2.y, r3.z
  33:     mad r1.xyz, r2, c21.x, c21.y
  34:     max oT3.xyz, r1, c20.y
  35:     mul r1, r0.y, c17
  36:     mad r1, c16, r0.x, r1
  37:     mad r1, c18, r0.z, r1
  38:     mad r0, c19, r0.w, r1
  39:     mad oPos.xy, r0.w, c0, r0
  40:     mov oPos.zw, r0
  41:     mov oT0.zw, c20.y

// approximately 42 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_temps 4
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb2[3].xyzw
   4: mad o3.xyz, cb2[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb3[18].xyzw
   6: mad r0.xyzw, cb3[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb3[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb3[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r0.x, v2.xyzx, cb2[4].xyzx
  12: dp3 r0.y, v2.xyzx, cb2[5].xyzx
  13: dp3 r0.z, v2.xyzx, cb2[6].xyzx
  14: dp3 r0.w, r0.xyzx, r0.xyzx
  15: rsq r0.w, r0.w
  16: mul r0.xyz, r0.wwww, r0.xyzx
  17: mov o2.xyz, r0.xyzx
  18: mul r1.x, r0.y, r0.y
  19: mad r1.x, r0.x, r0.x, -r1.x
  20: mul r2.xyzw, r0.yzzx, r0.xyzz
  21: dp4 r3.x, cb1[41].xyzw, r2.xyzw
  22: dp4 r3.y, cb1[42].xyzw, r2.xyzw
  23: dp4 r3.z, cb1[43].xyzw, r2.xyzw
  24: mad r1.xyz, cb1[44].xyzx, r1.xxxx, r3.xyzx
  25: mov r0.w, l(1.000000)
  26: dp4 r2.x, cb1[38].xyzw, r0.xyzw
  27: dp4 r2.y, cb1[39].xyzw, r0.xyzw
  28: dp4 r2.z, cb1[40].xyzw, r0.xyzw
  29: add r0.xyz, r1.xyzx, r2.xyzx
  30: max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  31: log r0.xyz, r0.xyzx
  32: mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  33: exp r0.xyz, r0.xyzx
  34: mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  35: max o4.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  36: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 6 math, 2 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _LightColor0 at 32
  Vector4 _Color at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 4     zw        1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float       
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c1         cb0             4         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c3, 0, 1, 0, 0
          dcl t0
          dcl_pp t1.xyz
          dcl_pp t3.xyz
          dcl_2d s0
   0:     dp3_pp r0.w, t1, c2
   1:     max_pp r1.w, r0.w, c3.x
   2:     texld r0, t0, s0
   2:     mul_pp r0.xyz, r0, c1
   3:     mul_pp r1.xyz, r0, c0
   4:     mul_pp r0.xyz, r0, t3
   5:     mad_pp r0.xyz, r1, r1.w, r0
   6:     mov_pp r0.w, c3.y
   7:     mov_pp oC0, r0

// approximately 9 instruction slots used (1 texture, 8 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v4.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: dp3 r0.x, v2.xyzx, cb1[0].xyzx
   1: max r0.x, r0.x, l(0.000000)
   2: sample r1.xyzw, v1.xyxx, t0.xyzw, s0
   3: mul r0.yzw, r1.xxyz, cb0[4].xxyz
   4: mul r1.xyz, r0.yzwy, cb0[2].xyzx
   5: mul r0.yzw, r0.yyzw, v4.xxyz
   6: mad o0.xyz, r1.xyzx, r0.xxxx, r0.yzwy
   7: mov o0.w, l(1.000000)
   8: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (320 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 112
  Matrix4x4 unity_WorldToObject at 176
  Matrix4x4 unity_MatrixVP at 240
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_SHBr at 48
  Vector4 unity_SHBg at 64
  Vector4 unity_SHBb at 80
  Vector4 unity_SHC at 96
  Vector4 _MainTex_ST at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    output.TEXCOORD4.xy = float2(0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = fma(u_xlat0.x, u_xlat0.x, (-u_xlat1.x));
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(Globals.unity_SHBb, u_xlat2);
    u_xlat1.xyz = fma(Globals.unity_SHC.xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(Globals.unity_SHAr, u_xlat0);
    u_xlat2.y = dot(Globals.unity_SHAg, u_xlat0);
    u_xlat2.z = dot(Globals.unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD3.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "Globals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 _LightColor0 at 144
  Vector4 _Color at 160
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float4 u_xlat1;
    float u_xlat3;
    float u_xlat6;
    bool u_xlatb6;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * Globals._Color.xyz;
    u_xlatb6 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb6){
        u_xlatb6 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat1.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat1.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : input.TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat1.yzw = u_xlat1.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat6 = fma(u_xlat1.y, 0.25, 0.75);
        u_xlat3 = fma(Globals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat1.x = max(u_xlat6, u_xlat3);
        u_xlat1 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    }
    u_xlat6 = dot(u_xlat1, Globals.unity_OcclusionMaskSelector);
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat1.xyz = float3(u_xlat6) * Globals._LightColor0.xyz;
    u_xlat6 = dot(input.TEXCOORD1.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * input.TEXCOORD3.xyz;
    output.SV_Target0.xyz = fma(u_xlat1.xyz, float3(u_xlat6), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlatb6 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb6){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
        u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6 = u_xlat1.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat6, u_xlat3);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat6 = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
u_xlatb12", used in: Fragment 

Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 1, used in: Fragment 

Constant Buffer "PGlobals1307197105" (176 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Vector4 _Color at 160
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals1307197105" (320 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 240
  Matrix4x4 unity_ObjectToWorld at 112
  Matrix4x4 unity_WorldToObject at 176
  Vector4 _MainTex_ST at 304
  Vector4 unity_SHAb at 32
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAr at 0
  Vector4 unity_SHBb at 80
  Vector4 unity_SHBg at 64
  Vector4 unity_SHBr at 48
  Vector4 unity_SHC at 96
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 272

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 53 87 99 100 112 116 154 263
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 RelaxedPrecision
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 RelaxedPrecision
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 RelaxedPrecision
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 RelaxedPrecision
                              MemberDecorate 19 3 Offset 48
                              MemberDecorate 19 4 RelaxedPrecision
                              MemberDecorate 19 4 Offset 64
                              MemberDecorate 19 5 RelaxedPrecision
                              MemberDecorate 19 5 Offset 80
                              MemberDecorate 19 6 RelaxedPrecision
                              MemberDecorate 19 6 Offset 96
                              MemberDecorate 19 7 Offset 112
                              MemberDecorate 19 8 Offset 176
                              MemberDecorate 19 9 Offset 240
                              MemberDecorate 19 10 Offset 304
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 53 Location 2
                              MemberDecorate 85 0 BuiltIn Position
                              MemberDecorate 85 1 BuiltIn PointSize
                              MemberDecorate 85 2 BuiltIn ClipDistance
                              Decorate 85 Block
                              Decorate 99 Location 0
                              Decorate 100 Location 2
                              Decorate 112 Location 4
                              Decorate 116 Location 1
                              Decorate 154 RelaxedPrecision
                              Decorate 154 Location 1
                              Decorate 158 RelaxedPrecision
                              Decorate 171 RelaxedPrecision
                              Decorate 172 RelaxedPrecision
                              Decorate 175 RelaxedPrecision
                              Decorate 181 RelaxedPrecision
                              Decorate 183 RelaxedPrecision
                              Decorate 184 RelaxedPrecision
                              Decorate 185 RelaxedPrecision
                              Decorate 189 RelaxedPrecision
                              Decorate 190 RelaxedPrecision
                              Decorate 191 RelaxedPrecision
                              Decorate 195 RelaxedPrecision
                              Decorate 196 RelaxedPrecision
                              Decorate 197 RelaxedPrecision
                              Decorate 201 RelaxedPrecision
                              Decorate 202 RelaxedPrecision
                              Decorate 203 RelaxedPrecision
                              Decorate 204 RelaxedPrecision
                              Decorate 205 RelaxedPrecision
                              Decorate 206 RelaxedPrecision
                              Decorate 207 RelaxedPrecision
                              Decorate 212 RelaxedPrecision
                              Decorate 217 RelaxedPrecision
                              Decorate 222 RelaxedPrecision
                              Decorate 226 RelaxedPrecision
                              Decorate 227 RelaxedPrecision
                              Decorate 228 RelaxedPrecision
                              Decorate 229 RelaxedPrecision
                              Decorate 231 RelaxedPrecision
                              Decorate 232 RelaxedPrecision
                              Decorate 233 RelaxedPrecision
                              Decorate 263 RelaxedPrecision
                              Decorate 263 Location 3
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 7
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              29:     22(int) Constant 0
              37:     22(int) Constant 2
              45:      8(ptr) Variable Private
              47:     22(int) Constant 3
              51:             TypeVector 6(float) 3
              52:             TypePointer Output 51(fvec3)
              53:     52(ptr) Variable Output
              65:     22(int) Constant 9
              83:     14(int) Constant 1
              84:             TypeArray 6(float) 83
              85:             TypeStruct 7(fvec4) 6(float) 84
              86:             TypePointer Output 85(struct)
              87:     86(ptr) Variable Output
              95:             TypePointer Output 7(fvec4)
              97:             TypeVector 6(float) 2
              98:             TypePointer Output 97(fvec2)
              99:     98(ptr) Variable Output
             100:     10(ptr) Variable Input
             103:     22(int) Constant 10
             112:     98(ptr) Variable Output
             113:    6(float) Constant 0
             114:   97(fvec2) ConstantComposite 113 113
             115:             TypePointer Input 51(fvec3)
             116:    115(ptr) Variable Input
             118:     22(int) Constant 8
             123:     14(int) Constant 0
             124:             TypePointer Private 6(float)
             137:     14(int) Constant 2
             139:    124(ptr) Variable Private
             154:     52(ptr) Variable Output
             157:             TypePointer Private 51(fvec3)
             158:    157(ptr) Variable Private
             175:      8(ptr) Variable Private
             181:    157(ptr) Variable Private
             187:     22(int) Constant 4
             193:     22(int) Constant 5
             199:     22(int) Constant 6
             208:    6(float) Constant 1065353216
             209:     14(int) Constant 3
             230:   51(fvec3) ConstantComposite 113 113 113
             238:    6(float) Constant 1054168405
             239:   51(fvec3) ConstantComposite 238 238 238
             250:    6(float) Constant 1065814589
             251:   51(fvec3) ConstantComposite 250 250 250
             253:    6(float) Constant 3177269166
             254:   51(fvec3) ConstantComposite 253 253 253
             263:     52(ptr) Variable Output
             266:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              30:     25(ptr) AccessChain 21 23 29
              31:    7(fvec4) Load 30
              32:    7(fvec4) Load 11
              33:    7(fvec4) VectorShuffle 32 32 0 0 0 0
              34:    7(fvec4) FMul 31 33
              35:    7(fvec4) Load 9
              36:    7(fvec4) FAdd 34 35
                              Store 9 36
              38:     25(ptr) AccessChain 21 23 37
              39:    7(fvec4) Load 38
              40:    7(fvec4) Load 11
              41:    7(fvec4) VectorShuffle 40 40 2 2 2 2
              42:    7(fvec4) FMul 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) FAdd 42 43
                              Store 9 44
              46:    7(fvec4) Load 9
              48:     25(ptr) AccessChain 21 23 47
              49:    7(fvec4) Load 48
              50:    7(fvec4) FAdd 46 49
                              Store 45 50
              54:     25(ptr) AccessChain 21 23 47
              55:    7(fvec4) Load 54
              56:   51(fvec3) VectorShuffle 55 55 0 1 2
              57:    7(fvec4) Load 11
              58:   51(fvec3) VectorShuffle 57 57 3 3 3
              59:   51(fvec3) FMul 56 58
              60:    7(fvec4) Load 9
              61:   51(fvec3) VectorShuffle 60 60 0 1 2
              62:   51(fvec3) FAdd 59 61
                              Store 53 62
              63:    7(fvec4) Load 45
              64:    7(fvec4) VectorShuffle 63 63 1 1 1 1
              66:     25(ptr) AccessChain 21 65 24
              67:    7(fvec4) Load 66
              68:    7(fvec4) FMul 64 67
                              Store 9 68
              69:     25(ptr) AccessChain 21 65 29
              70:    7(fvec4) Load 69
              71:    7(fvec4) Load 45
              72:    7(fvec4) VectorShuffle 71 71 0 0 0 0
              73:    7(fvec4) FMul 70 72
              74:    7(fvec4) Load 9
              75:    7(fvec4) FAdd 73 74
                              Store 9 75
              76:     25(ptr) AccessChain 21 65 37
              77:    7(fvec4) Load 76
              78:    7(fvec4) Load 45
              79:    7(fvec4) VectorShuffle 78 78 2 2 2 2
              80:    7(fvec4) FMul 77 79
              81:    7(fvec4) Load 9
              82:    7(fvec4) FAdd 80 81
                              Store 9 82
              88:     25(ptr) AccessChain 21 65 47
              89:    7(fvec4) Load 88
              90:    7(fvec4) Load 45
              91:    7(fvec4) VectorShuffle 90 90 3 3 3 3
              92:    7(fvec4) FMul 89 91
              93:    7(fvec4) Load 9
              94:    7(fvec4) FAdd 92 93
              96:     95(ptr) AccessChain 87 29
                              Store 96 94
             101:    7(fvec4) Load 100
             102:   97(fvec2) VectorShuffle 101 101 0 1
             104:     25(ptr) AccessChain 21 103
             105:    7(fvec4) Load 104
             106:   97(fvec2) VectorShuffle 105 105 0 1
             107:   97(fvec2) FMul 102 106
             108:     25(ptr) AccessChain 21 103
             109:    7(fvec4) Load 108
             110:   97(fvec2) VectorShuffle 109 109 2 3
             111:   97(fvec2) FAdd 107 110
                              Store 99 111
                              Store 112 114
             117:   51(fvec3) Load 116
             119:     25(ptr) AccessChain 21 118 29
             120:    7(fvec4) Load 119
             121:   51(fvec3) VectorShuffle 120 120 0 1 2
             122:    6(float) Dot 117 121
             125:    124(ptr) AccessChain 9 123
                              Store 125 122
             126:   51(fvec3) Load 116
             127:     25(ptr) AccessChain 21 118 24
             128:    7(fvec4) Load 127
             129:   51(fvec3) VectorShuffle 128 128 0 1 2
             130:    6(float) Dot 126 129
             131:    124(ptr) AccessChain 9 83
                              Store 131 130
             132:   51(fvec3) Load 116
             133:     25(ptr) AccessChain 21 118 37
             134:    7(fvec4) Load 133
             135:   51(fvec3) VectorShuffle 134 134 0 1 2
             136:    6(float) Dot 132 135
             138:    124(ptr) AccessChain 9 137
                              Store 138 136
             140:    7(fvec4) Load 9
             141:   51(fvec3) VectorShuffle 140 140 0 1 2
             142:    7(fvec4) Load 9
             143:   51(fvec3) VectorShuffle 142 142 0 1 2
             144:    6(float) Dot 141 143
                              Store 139 144
             145:    6(float) Load 139
             146:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 145
                              Store 139 146
             147:    6(float) Load 139
             148:   51(fvec3) CompositeConstruct 147 147 147
             149:    7(fvec4) Load 9
             150:   51(fvec3) VectorShuffle 149 149 0 1 2
             151:   51(fvec3) FMul 148 150
             152:    7(fvec4) Load 9
             153:    7(fvec4) VectorShuffle 152 151 4 5 6 3
                              Store 9 153
             155:    7(fvec4) Load 9
             156:   51(fvec3) VectorShuffle 155 155 0 1 2
                              Store 154 156
             159:    124(ptr) AccessChain 9 83
             160:    6(float) Load 159
             161:    124(ptr) AccessChain 9 83
             162:    6(float) Load 161
             163:    6(float) FMul 160 162
             164:    124(ptr) AccessChain 158 123
                              Store 164 163
             165:    124(ptr) AccessChain 9 123
             166:    6(float) Load 165
             167:    124(ptr) AccessChain 9 123
             168:    6(float) Load 167
             169:    6(float) FMul 166 168
             170:    124(ptr) AccessChain 158 123
             171:    6(float) Load 170
             172:    6(float) FNegate 171
             173:    6(float) FAdd 169 172
             174:    124(ptr) AccessChain 158 123
                              Store 174 173
             176:    7(fvec4) Load 9
             177:    7(fvec4) VectorShuffle 176 176 1 2 2 0
             178:    7(fvec4) Load 9
             179:    7(fvec4) VectorShuffle 178 178 0 1 2 2
             180:    7(fvec4) FMul 177 179
                              Store 175 180
             182:     25(ptr) AccessChain 21 47
             183:    7(fvec4) Load 182
             184:    7(fvec4) Load 175
             185:    6(float) Dot 183 184
             186:    124(ptr) AccessChain 181 123
                              Store 186 185
             188:     25(ptr) AccessChain 21 187
             189:    7(fvec4) Load 188
             190:    7(fvec4) Load 175
             191:    6(float) Dot 189 190
             192:    124(ptr) AccessChain 181 83
                              Store 192 191
             194:     25(ptr) AccessChain 21 193
             195:    7(fvec4) Load 194
             196:    7(fvec4) Load 175
             197:    6(float) Dot 195 196
             198:    124(ptr) AccessChain 181 137
                              Store 198 197
             200:     25(ptr) AccessChain 21 199
             201:    7(fvec4) Load 200
             202:   51(fvec3) VectorShuffle 201 201 0 1 2
             203:   51(fvec3) Load 158
             204:   51(fvec3) VectorShuffle 203 203 0 0 0
             205:   51(fvec3) FMul 202 204
             206:   51(fvec3) Load 181
             207:   51(fvec3) FAdd 205 206
                              Store 158 207
             210:    124(ptr) AccessChain 9 209
                              Store 210 208
             211:     25(ptr) AccessChain 21 29
             212:    7(fvec4) Load 211
             213:    7(fvec4) Load 9
             214:    6(float) Dot 212 213
             215:    124(ptr) AccessChain 181 123
                              Store 215 214
             216:     25(ptr) AccessChain 21 24
             217:    7(fvec4) Load 216
             218:    7(fvec4) Load 9
             219:    6(float) Dot 217 218
             220:    124(ptr) AccessChain 181 83
                              Store 220 219
             221:     25(ptr) AccessChain 21 37
             222:    7(fvec4) Load 221
             223:    7(fvec4) Load 9
             224:    6(float) Dot 222 223
             225:    124(ptr) AccessChain 181 137
                              Store 225 224
             226:   51(fvec3) Load 158
             227:   51(fvec3) Load 181
             228:   51(fvec3) FAdd 226 227
                              Store 158 228
             229:   51(fvec3) Load 158
             231:   51(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 229 230
                              Store 158 231
             232:   51(fvec3) Load 158
             233:   51(fvec3) ExtInst 1(GLSL.std.450) 30(Log2) 232
             234:    7(fvec4) Load 9
             235:    7(fvec4) VectorShuffle 234 233 4 5 6 3
                              Store 9 235
             236:    7(fvec4) Load 9
             237:   51(fvec3) VectorShuffle 236 236 0 1 2
             240:   51(fvec3) FMul 237 239
             241:    7(fvec4) Load 9
             242:    7(fvec4) VectorShuffle 241 240 4 5 6 3
                              Store 9 242
             243:    7(fvec4) Load 9
             244:   51(fvec3) VectorShuffle 243 243 0 1 2
             245:   51(fvec3) ExtInst 1(GLSL.std.450) 29(Exp2) 244
             246:    7(fvec4) Load 9
             247:    7(fvec4) VectorShuffle 246 245 4 5 6 3
                              Store 9 247
             248:    7(fvec4) Load 9
             249:   51(fvec3) VectorShuffle 248 248 0 1 2
             252:   51(fvec3) FMul 249 251
             255:   51(fvec3) FAdd 252 254
             256:    7(fvec4) Load 9
             257:    7(fvec4) VectorShuffle 256 255 4 5 6 3
                              Store 9 257
             258:    7(fvec4) Load 9
             259:   51(fvec3) VectorShuffle 258 258 0 1 2
             260:   51(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 259 230
             261:    7(fvec4) Load 9
             262:    7(fvec4) VectorShuffle 261 260 4 5 6 3
                              Store 9 262
             264:    7(fvec4) Load 9
             265:   51(fvec3) VectorShuffle 264 264 0 1 2
                              Store 263 265
             267:    266(ptr) AccessChain 87 29 83
             268:    6(float) Load 267
             269:    6(float) FNegate 268
             270:    266(ptr) AccessChain 87 29 83
                              Store 270 269
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 218

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 63 189 202 206
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 0
                              Decorate 21 RelaxedPrecision
                              Decorate 22 RelaxedPrecision
                              Decorate 23 RelaxedPrecision
                              Decorate 26 ArrayStride 16
                              MemberDecorate 27 0 RelaxedPrecision
                              MemberDecorate 27 0 Offset 0
                              MemberDecorate 27 1 RelaxedPrecision
                              MemberDecorate 27 1 Offset 16
                              MemberDecorate 27 2 Offset 32
                              MemberDecorate 27 3 Offset 48
                              MemberDecorate 27 4 Offset 112
                              MemberDecorate 27 5 Offset 128
                              MemberDecorate 27 6 RelaxedPrecision
                              MemberDecorate 27 6 Offset 144
                              MemberDecorate 27 7 RelaxedPrecision
                              MemberDecorate 27 7 Offset 160
                              Decorate 27 Block
                              Decorate 29 DescriptorSet 1
                              Decorate 29 Binding 0
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 36 RelaxedPrecision
                              Decorate 53 SpecId 0
                              Decorate 63 Location 2
                              Decorate 157 DescriptorSet 0
                              Decorate 157 Binding 1
                              Decorate 162 RelaxedPrecision
                              Decorate 170 RelaxedPrecision
                              Decorate 171 RelaxedPrecision
                              Decorate 173 RelaxedPrecision
                              Decorate 174 RelaxedPrecision
                              Decorate 177 RelaxedPrecision
                              Decorate 179 RelaxedPrecision
                              Decorate 181 RelaxedPrecision
                              Decorate 182 RelaxedPrecision
                              Decorate 185 RelaxedPrecision
                              Decorate 186 RelaxedPrecision
                              Decorate 187 RelaxedPrecision
                              Decorate 188 RelaxedPrecision
                              Decorate 189 RelaxedPrecision
                              Decorate 189 Location 1
                              Decorate 190 RelaxedPrecision
                              Decorate 192 RelaxedPrecision
                              Decorate 193 RelaxedPrecision
                              Decorate 194 RelaxedPrecision
                              Decorate 195 RelaxedPrecision
                              Decorate 196 RelaxedPrecision
                              Decorate 197 RelaxedPrecision
                              Decorate 198 RelaxedPrecision
                              Decorate 199 RelaxedPrecision
                              Decorate 200 RelaxedPrecision
                              Decorate 201 RelaxedPrecision
                              Decorate 202 RelaxedPrecision
                              Decorate 202 Location 3
                              Decorate 203 RelaxedPrecision
                              Decorate 204 RelaxedPrecision
                              Decorate 206 RelaxedPrecision
                              Decorate 206 Location 0
                              Decorate 207 RelaxedPrecision
                              Decorate 208 RelaxedPrecision
                              Decorate 209 RelaxedPrecision
                              Decorate 210 RelaxedPrecision
                              Decorate 211 RelaxedPrecision
                              Decorate 212 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              19:             TypeVector 6(float) 4
              22:      8(ptr) Variable Private
              24:             TypeInt 32 0
              25:     24(int) Constant 4
              26:             TypeArray 19(fvec4) 25
              27:             TypeStruct 19(fvec4) 19(fvec4) 19(fvec4) 26 7(fvec3) 7(fvec3) 19(fvec4) 19(fvec4)
              28:             TypePointer Uniform 27(struct)
              29:     28(ptr) Variable Uniform
              30:             TypeInt 32 1
              31:     30(int) Constant 7
              32:             TypePointer Uniform 19(fvec4)
              37:             TypeBool
              38:             TypePointer Private 37(bool)
              39:     38(ptr) Variable Private
              40:     30(int) Constant 2
              41:     24(int) Constant 0
              42:             TypePointer Uniform 6(float)
              45:    6(float) Constant 1065353216
              47:    37(bool) ConstantFalse
              53:    37(bool) SpecConstantFalse
              56:     24(int) Constant 1
              60:             TypePointer Private 19(fvec4)
              61:     60(ptr) Variable Private
              62:             TypePointer Input 7(fvec3)
              63:     62(ptr) Variable Input
              66:     30(int) Constant 3
              67:     30(int) Constant 1
              74:     30(int) Constant 0
             105:             TypePointer Function 7(fvec3)
             119:     30(int) Constant 5
             120:             TypePointer Uniform 7(fvec3)
             129:     30(int) Constant 4
             135:             TypePointer Private 6(float)
             136:    135(ptr) Variable Private
             139:    6(float) Constant 1048576000
             141:    6(float) Constant 1061158912
             143:    135(ptr) Variable Private
             144:     24(int) Constant 2
             147:    6(float) Constant 1056964608
             154:             TypeImage 6(float) 3D sampled format:Unknown
             155:             TypeSampledImage 154
             156:             TypePointer UniformConstant 155
             157:    156(ptr) Variable UniformConstant
             162:     60(ptr) Variable Private
             168:     24(int) Constant 3
             170:      8(ptr) Variable Private
             178:    6(float) Constant 0
             183:     30(int) Constant 6
             188:    135(ptr) Variable Private
             189:     62(ptr) Variable Input
             200:      8(ptr) Variable Private
             202:     62(ptr) Variable Input
             205:             TypePointer Output 19(fvec4)
             206:    205(ptr) Variable Output
             215:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             106:    105(ptr) Variable Function
              14:          11 Load 13
              18:   15(fvec2) Load 17
              20:   19(fvec4) ImageSampleImplicitLod 14 18
              21:    7(fvec3) VectorShuffle 20 20 0 1 2
                              Store 9 21
              23:    7(fvec3) Load 9
              33:     32(ptr) AccessChain 29 31
              34:   19(fvec4) Load 33
              35:    7(fvec3) VectorShuffle 34 34 0 1 2
              36:    7(fvec3) FMul 23 35
                              Store 22 36
              43:     42(ptr) AccessChain 29 40 41
              44:    6(float) Load 43
              46:    37(bool) FOrdEqual 44 45
                              Store 39 46
                              SelectionMerge 49 None
                              BranchConditional 47 48 49
              48:               Label
              50:    37(bool)   Load 39
                                SelectionMerge 52 None
                                BranchConditional 50 51 52
              51:                 Label
                                  Branch 52
              52:               Label
                                Branch 49
              49:             Label
                              SelectionMerge 55 None
                              BranchConditional 53 54 164
              54:               Label
              57:     42(ptr)   AccessChain 29 40 56
              58:    6(float)   Load 57
              59:    37(bool)   FOrdEqual 58 45
                                Store 39 59
              64:    7(fvec3)   Load 63
              65:    7(fvec3)   VectorShuffle 64 64 1 1 1
              68:     32(ptr)   AccessChain 29 66 67
              69:   19(fvec4)   Load 68
              70:    7(fvec3)   VectorShuffle 69 69 0 1 2
              71:    7(fvec3)   FMul 65 70
              72:   19(fvec4)   Load 61
              73:   19(fvec4)   VectorShuffle 72 71 4 5 6 3
                                Store 61 73
              75:     32(ptr)   AccessChain 29 66 74
              76:   19(fvec4)   Load 75
              77:    7(fvec3)   VectorShuffle 76 76 0 1 2
              78:    7(fvec3)   Load 63
              79:    7(fvec3)   VectorShuffle 78 78 0 0 0
              80:    7(fvec3)   FMul 77 79
              81:   19(fvec4)   Load 61
              82:    7(fvec3)   VectorShuffle 81 81 0 1 2
              83:    7(fvec3)   FAdd 80 82
              84:   19(fvec4)   Load 61
              85:   19(fvec4)   VectorShuffle 84 83 4 5 6 3
                                Store 61 85
              86:     32(ptr)   AccessChain 29 66 40
              87:   19(fvec4)   Load 86
              88:    7(fvec3)   VectorShuffle 87 87 0 1 2
              89:    7(fvec3)   Load 63
              90:    7(fvec3)   VectorShuffle 89 89 2 2 2
              91:    7(fvec3)   FMul 88 90
              92:   19(fvec4)   Load 61
              93:    7(fvec3)   VectorShuffle 92 92 0 1 2
              94:    7(fvec3)   FAdd 91 93
              95:   19(fvec4)   Load 61
              96:   19(fvec4)   VectorShuffle 95 94 4 5 6 3
                                Store 61 96
              97:   19(fvec4)   Load 61
              98:    7(fvec3)   VectorShuffle 97 97 0 1 2
              99:     32(ptr)   AccessChain 29 66 66
             100:   19(fvec4)   Load 99
             101:    7(fvec3)   VectorShuffle 100 100 0 1 2
             102:    7(fvec3)   FAdd 98 101
             103:   19(fvec4)   Load 61
             104:   19(fvec4)   VectorShuffle 103 102 4 5 6 3
                                Store 61 104
             107:    37(bool)   Load 39
                                SelectionMerge 109 None
                                BranchConditional 107 108 112
             108:                 Label
             110:   19(fvec4)     Load 61
             111:    7(fvec3)     VectorShuffle 110 110 0 1 2
                                  Store 106 111
                                  Branch 109
             112:                 Label
             113:    7(fvec3)     Load 63
                                  Store 106 113
                                  Branch 109
             109:               Label
             114:    7(fvec3)   Load 106
             115:   19(fvec4)   Load 61
             116:   19(fvec4)   VectorShuffle 115 114 4 5 6 3
                                Store 61 116
             117:   19(fvec4)   Load 61
             118:    7(fvec3)   VectorShuffle 117 117 0 1 2
             121:    120(ptr)   AccessChain 29 119
             122:    7(fvec3)   Load 121
             123:    7(fvec3)   FNegate 122
             124:    7(fvec3)   FAdd 118 123
             125:   19(fvec4)   Load 61
             126:   19(fvec4)   VectorShuffle 125 124 4 5 6 3
                                Store 61 126
             127:   19(fvec4)   Load 61
             128:    7(fvec3)   VectorShuffle 127 127 0 1 2
             130:    120(ptr)   AccessChain 29 129
             131:    7(fvec3)   Load 130
             132:    7(fvec3)   FMul 128 131
             133:   19(fvec4)   Load 61
             134:   19(fvec4)   VectorShuffle 133 132 0 4 5 6
                                Store 61 134
             137:    135(ptr)   AccessChain 61 56
             138:    6(float)   Load 137
             140:    6(float)   FMul 138 139
             142:    6(float)   FAdd 140 141
                                Store 136 142
             145:     42(ptr)   AccessChain 29 40 144
             146:    6(float)   Load 145
             148:    6(float)   FMul 146 147
             149:    6(float)   FAdd 148 141
                                Store 143 149
             150:    6(float)   Load 136
             151:    6(float)   Load 143
             152:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 150 151
             153:    135(ptr)   AccessChain 61 41
                                Store 153 152
             158:         155   Load 157
             159:   19(fvec4)   Load 61
             160:    7(fvec3)   VectorShuffle 159 159 0 2 3
             161:   19(fvec4)   ImageSampleImplicitLod 158 160
                                Store 61 161
             163:   19(fvec4)   Load 61
                                Store 162 163
                                Branch 55
             164:               Label
             165:    135(ptr)   AccessChain 162 41
                                Store 165 45
             166:    135(ptr)   AccessChain 162 56
                                Store 166 45
             167:    135(ptr)   AccessChain 162 144
                                Store 167 45
             169:    135(ptr)   AccessChain 162 168
                                Store 169 45
                                Branch 55
              55:             Label
             171:   19(fvec4) Load 162
             172:     32(ptr) AccessChain 29 67
             173:   19(fvec4) Load 172
             174:    6(float) Dot 171 173
             175:    135(ptr) AccessChain 170 41
                              Store 175 174
             176:    135(ptr) AccessChain 170 41
             177:    6(float) Load 176
             179:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 177 178 45
             180:    135(ptr) AccessChain 170 41
                              Store 180 179
             181:    7(fvec3) Load 170
             182:    7(fvec3) VectorShuffle 181 181 0 0 0
             184:     32(ptr) AccessChain 29 183
             185:   19(fvec4) Load 184
             186:    7(fvec3) VectorShuffle 185 185 0 1 2
             187:    7(fvec3) FMul 182 186
                              Store 170 187
             190:    7(fvec3) Load 189
             191:     32(ptr) AccessChain 29 74
             192:   19(fvec4) Load 191
             193:    7(fvec3) VectorShuffle 192 192 0 1 2
             194:    6(float) Dot 190 193
                              Store 188 194
             195:    6(float) Load 188
             196:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 195 178
                              Store 188 196
             197:    7(fvec3) Load 22
             198:    7(fvec3) Load 170
             199:    7(fvec3) FMul 197 198
                              Store 170 199
             201:    7(fvec3) Load 22
             203:    7(fvec3) Load 202
             204:    7(fvec3) FMul 201 203
                              Store 200 204
             207:    7(fvec3) Load 170
             208:    6(float) Load 188
             209:    7(fvec3) CompositeConstruct 208 208 208
             210:    7(fvec3) FMul 207 209
             211:    7(fvec3) Load 200
             212:    7(fvec3) FAdd 210 211
             213:   19(fvec4) Load 206
             214:   19(fvec4) VectorShuffle 213 212 4 5 6 3
                              Store 206 214
             216:    215(ptr) AccessChain 206 168
                              Store 216 45
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN 
-- Vertex shader for "d3d9":
// Stats: 34 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 16
Vector4 _ProjectionParams at 11
Vector4 unity_SHBb at 14
Vector4 unity_SHBg at 13
Vector4 unity_SHBr at 12
Vector4 unity_SHC at 15

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   float4 _ProjectionParams;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   float4 unity_SHBb;
//   float4 unity_SHBg;
//   float4 unity_SHBr;
//   float4 unity_SHC;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   _ProjectionParams   c11      1
//   unity_SHBr          c12      1
//   unity_SHBg          c13      1
//   unity_SHBb          c14      1
//   unity_SHC           c15      1
//   _MainTex_ST         c16      1
//

    vs_3_0
    def c17, 1, 0, 0.5, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4.xyz
    dcl_texcoord4 o5
    dcl_texcoord6 o6
    mad o1.xy, v2, c16, c16.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    nrm r1.xyz, r0
    mul r0.x, r1.y, r1.y
    mad r0.x, r1.x, r1.x, -r0.x
    mul r2, r1.yzzx, r1.xyzz
    mov o2.xyz, r1
    dp4 r1.x, c12, r2
    dp4 r1.y, c13, r2
    dp4 r1.z, c14, r2
    mad o4.xyz, c15, r0.x, r1
    mad r0, v0.xyzx, c17.xxxy, c17.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r0.x, c4, r1
    dp4 r0.w, c7, r1
    mul r2.xz, r0.xyww, c17.z
    dp4 r0.y, c5, r1
    dp4 r0.z, c6, r1
    mul r1.x, r0.y, c11.x
    mov r3, r0
    mov o5.zw, r0
    mul r2.w, r1.x, c17.z
    add o5.xy, r2.z, r2.xwzw
    mov o6, c17.y
    mad o0.xy, r3.w, c255, r3
    mov o0.zw, r3

// approximately 36 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 33 math, 2 textures
Matrix4x3 unity_MatrixV at 0
Vector4 _Color at 11
Vector4 _LightColor0 at 10
Vector4 _LightShadowData at 8
Vector4 _WorldSpaceCameraPos at 3
Vector4 _WorldSpaceLightPos0 at 4
Vector4 unity_SHAb at 7
Vector4 unity_SHAg at 6
Vector4 unity_SHAr at 5
Vector4 unity_ShadowFadeCenterAndType at 9

Set 2D Texture "_ShadowMapTexture" to slot 0
Set 2D Texture "_MainTex" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _LightColor0;
//   float4 _LightShadowData;
//   sampler2D _MainTex;
//   sampler2D _ShadowMapTexture;
//   float3 _WorldSpaceCameraPos;
//   float4 _WorldSpaceLightPos0;
//   row_major float4x4 unity_MatrixV;
//   float4 unity_SHAb;
//   float4 unity_SHAg;
//   float4 unity_SHAr;
//   float4 unity_ShadowFadeCenterAndType;
//
//
// Registers:
//
//   Name                          Reg   Size
//   ----------------------------- ----- ----
//   unity_MatrixV                 c0       3
//   _WorldSpaceCameraPos          c3       1
//   _WorldSpaceLightPos0          c4       1
//   unity_SHAr                    c5       1
//   unity_SHAg                    c6       1
//   unity_SHAb                    c7       1
//   _LightShadowData              c8       1
//   unity_ShadowFadeCenterAndType c9       1
//   _LightColor0                  c10      1
//   _Color                        c11      1
//   _ShadowMapTexture             s0       1
//   _MainTex                      s1       1
//

    ps_3_0
    def c12, 1, 0, 0.416666657, 0
    def c13, 1.05499995, -0.0549999997, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_texcoord2 v2.xyz
    dcl_texcoord3_pp v3.xyz
    dcl_texcoord4 v4
    dcl_2d s0
    dcl_2d s1
    mad_pp r0, v1.xyzx, c12.xxxy, c12.yyyx
    dp4_pp r1.x, c5, r0
    dp4_pp r1.y, c6, r0
    dp4_pp r1.z, c7, r0
    add_pp r0.xyz, r1, v3
    max_pp r1.xyz, r0, c12.y
    log_pp r0.x, r1.x
    log_pp r0.y, r1.y
    log_pp r0.z, r1.z
    mul_pp r0.xyz, r0, c12.z
    exp_pp r1.x, r0.x
    exp_pp r1.y, r0.y
    exp_pp r1.z, r0.z
    mad_pp r0.xyz, r1, c13.x, c13.y
    max_pp r1.xyz, r0, c12.y
    texld r0, v0, s1
    mul_pp r0.xyz, r0, c11
    mul_pp r1.xyz, r1, r0
    add r2.xyz, -c9, v2
    dp3 r0.w, r2, r2
    rsq r0.w, r0.w
    rcp r0.w, r0.w
    add r2.xyz, c3, -v2
    dp3 r1.w, r2, c2
    lrp r2.x, c9.w, r0.w, r1.w
    mad_sat_pp r0.w, r2.x, c8.z, c8.w
    texldp_pp r2, v4, s0
    add_sat_pp r0.w, r0.w, r2.x
    mul_pp r2.xyz, r0.w, c10
    mul_pp r0.xyz, r0, r2
    dp3_pp r0.w, v1, c4
    max_pp r1.w, r0.w, c12.y
    mad_pp oC0.xyz, r0, r1.w, r1
    mov_pp oC0.w, c12.x

// approximately 34 instruction slots used (2 texture, 32 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 26 math, 3 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 2 {
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 3 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 4 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[45], immediateIndexed
      dcl_constantbuffer CB3[7], immediateIndexed
      dcl_constantbuffer CB4[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_output o5.xyzw
      dcl_output o6.xyzw
      dcl_temps 3
   0: mul r0.xyzw, v0.yyyy, cb3[1].xyzw
   1: mad r0.xyzw, cb3[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb3[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb3[3].xyzw
   4: mad o3.xyz, cb3[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb4[18].xyzw
   6: mad r0.xyzw, cb4[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb4[19].xyzw, r1.zzzz, r0.xyzw
   8: mad r0.xyzw, cb4[20].xyzw, r1.wwww, r0.xyzw
   9: mov o0.xyzw, r0.xyzw
  10: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  11: dp3 r1.x, v2.xyzx, cb3[4].xyzx
  12: dp3 r1.y, v2.xyzx, cb3[5].xyzx
  13: dp3 r1.z, v2.xyzx, cb3[6].xyzx
  14: dp3 r1.w, r1.xyzx, r1.xyzx
  15: rsq r1.w, r1.w
  16: mul r1.xyz, r1.wwww, r1.xyzx
  17: mov o2.xyz, r1.xyzx
  18: mul r1.w, r1.y, r1.y
  19: mad r1.w, r1.x, r1.x, -r1.w
  20: mul r2.xyzw, r1.yzzx, r1.xyzz
  21: dp4 r1.x, cb2[41].xyzw, r2.xyzw
  22: dp4 r1.y, cb2[42].xyzw, r2.xyzw
  23: dp4 r1.z, cb2[43].xyzw, r2.xyzw
  24: mad o4.xyz, cb2[44].xyzx, r1.wwww, r1.xyzx
  25: mul r0.y, r0.y, cb1[5].x
  26: mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
  27: mov o5.zw, r0.zzzw
  28: add o5.xy, r1.zzzz, r1.xwxx
  29: mov o6.xyzw, l(0,0,0,0)
  30: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 57 math, 6 temp registers, 6 textures, 4 branches
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_ShadowMapTexture" to slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _LightColor0 at 32
  Vector4 _Color at 64
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector3 _WorldSpaceCameraPos at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 2 {
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_OcclusionMaskSelector at 720
}
Constant Buffer "UnityShadows" (416 bytes) on slot 3 {
  Vector4 _LightShadowData at 384
  Vector4 unity_ShadowFadeCenterAndType at 400
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 4 {
  Matrix4x4 unity_MatrixV at 144
}
Constant Buffer "UnityProbeVolume" (112 bytes) on slot 5 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 16
  Vector4 unity_ProbeVolumeParams at 0
  Vector3 unity_ProbeVolumeSizeInv at 80
  Vector3 unity_ProbeVolumeMin at 96
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xy w
// TEXCOORD                 6   xyzw        6     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[5], immediateIndexed
      dcl_constantbuffer CB2[46], immediateIndexed
      dcl_constantbuffer CB3[26], immediateIndexed
      dcl_constantbuffer CB4[12], immediateIndexed
      dcl_constantbuffer CB5[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture3d (float,float,float,float) t2
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_input_ps linear v4.xyz
      dcl_input_ps linear v5.xyw
      dcl_output o0.xyzw
      dcl_temps 6
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s2
   1: mul r0.xyz, r0.xyzx, cb0[4].xyzx
   2: add r1.xyz, -v3.xyzx, cb1[4].xyzx
   3: mov r2.x, cb4[9].z
   4: mov r2.y, cb4[10].z
   5: mov r2.z, cb4[11].z
   6: dp3 r0.w, r1.xyzx, r2.xyzx
   7: add r1.xyz, v3.xyzx, -cb3[25].xyzx
   8: dp3 r1.x, r1.xyzx, r1.xyzx
   9: sqrt r1.x, r1.x
  10: add r1.x, -r0.w, r1.x
  11: mad r0.w, cb3[25].w, r1.x, r0.w
  12: mad_sat r0.w, r0.w, cb3[24].z, cb3[24].w
  13: eq r1.x, cb5[0].x, l(1.000000)
  14: if_nz r1.x
  15:   eq r1.y, cb5[0].y, l(1.000000)
  16:   mul r2.xyz, v3.yyyy, cb5[2].xyzx
  17:   mad r2.xyz, cb5[1].xyzx, v3.xxxx, r2.xyzx
  18:   mad r2.xyz, cb5[3].xyzx, v3.zzzz, r2.xyzx
  19:   add r2.xyz, r2.xyzx, cb5[4].xyzx
  20:   movc r1.yzw, r1.yyyy, r2.xxyz, v3.xxyz
  21:   add r1.yzw, r1.yyzw, -cb5[6].xxyz
  22:   mul r2.yzw, r1.yyzw, cb5[5].xxyz
  23:   mad r1.y, r2.y, l(0.250000), l(0.750000)
  24:   mad r1.z, cb5[0].z, l(0.500000), l(0.750000)
  25:   max r2.x, r1.z, r1.y
  26:   sample r2.xyzw, r2.xzwx, t2.xyzw, s0
  27: else 
  28:   mov r2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  29: endif 
  30: dp4_sat r1.y, r2.xyzw, cb2[45].xyzw
  31: div r1.zw, v5.xxxy, v5.wwww
  32: sample r2.xyzw, r1.zwzz, t1.xyzw, s1
  33: add_sat r0.w, r0.w, r2.x
  34: min r1.y, r0.w, r1.y
  35: movc r0.w, r1.x, r1.y, r0.w
  36: mul r1.yzw, r0.wwww, cb0[2].xxyz
  37: if_nz r1.x
  38:   eq r0.w, cb5[0].y, l(1.000000)
  39:   mul r2.xyz, v3.yyyy, cb5[2].xyzx
  40:   mad r2.xyz, cb5[1].xyzx, v3.xxxx, r2.xyzx
  41:   mad r2.xyz, cb5[3].xyzx, v3.zzzz, r2.xyzx
  42:   add r2.xyz, r2.xyzx, cb5[4].xyzx
  43:   movc r2.xyz, r0.wwww, r2.xyzx, v3.xyzx
  44:   add r2.xyz, r2.xyzx, -cb5[6].xyzx
  45:   mul r2.yzw, r2.xxyz, cb5[5].xxyz
  46:   mul r0.w, r2.y, l(0.250000)
  47:   mul r1.x, cb5[0].z, l(0.500000)
  48:   mad r2.y, -cb5[0].z, l(0.500000), l(0.250000)
  49:   max r0.w, r0.w, r1.x
  50:   min r2.x, r2.y, r0.w
  51:   sample r3.xyzw, r2.xzwx, t2.xyzw, s0
  52:   add r4.xyz, r2.xzwx, l(0.250000, 0.000000, 0.000000, 0.000000)
  53:   sample r4.xyzw, r4.xyzx, t2.xyzw, s0
  54:   add r2.xyz, r2.xzwx, l(0.500000, 0.000000, 0.000000, 0.000000)
  55:   sample r2.xyzw, r2.xyzx, t2.xyzw, s0
  56:   mov r5.xyz, v2.xyzx
  57:   mov r5.w, l(1.000000)
  58:   dp4 r3.x, r3.xyzw, r5.xyzw
  59:   dp4 r3.y, r4.xyzw, r5.xyzw
  60:   dp4 r3.z, r2.xyzw, r5.xyzw
  61: else 
  62:   mov r2.xyz, v2.xyzx
  63:   mov r2.w, l(1.000000)
  64:   dp4 r3.x, cb2[38].xyzw, r2.xyzw
  65:   dp4 r3.y, cb2[39].xyzw, r2.xyzw
  66:   dp4 r3.z, cb2[40].xyzw, r2.xyzw
  67: endif 
  68: add r2.xyz, r3.xyzx, v4.xyzx
  69: max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  70: log r2.xyz, r2.xyzx
  71: mul r2.xyz, r2.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  72: exp r2.xyz, r2.xyzx
  73: mad r2.xyz, r2.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  74: max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  75: dp3 r0.w, v2.xyzx, cb2[0].xyzx
  76: max r0.w, r0.w, l(0.000000)
  77: mul r1.xyz, r0.xyzx, r1.yzwy
  78: mul r0.xyz, r0.xyzx, r2.xyzx
  79: mad o0.xyz, r1.xyzx, r0.wwww, r0.xyzx
  80: mov o0.w, l(1.000000)
  81: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 30 math, 2 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  tmpvar_4 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  mediump vec3 normal_8;
  normal_8 = worldNormal_1;
  mediump vec3 x1_9;
  mediump vec4 tmpvar_10;
  tmpvar_10 = (normal_8.xyzz * normal_8.yzzx);
  x1_9.x = dot (unity_SHBr, tmpvar_10);
  x1_9.y = dot (unity_SHBg, tmpvar_10);
  x1_9.z = dot (unity_SHBb, tmpvar_10);
  highp vec4 o_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (tmpvar_4 * 0.5);
  highp vec2 tmpvar_13;
  tmpvar_13.x = tmpvar_12.x;
  tmpvar_13.y = (tmpvar_12.y * _ProjectionParams.x);
  o_11.xy = (tmpvar_13 + tmpvar_12.w);
  o_11.zw = tmpvar_4.zw;
  gl_Position = tmpvar_4;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = (x1_9 + (unity_SHC.xyz * (
    (normal_8.x * normal_8.x)
   - 
    (normal_8.y * normal_8.y)
  )));
  xlv_TEXCOORD4 = o_11;
  xlv_TEXCOORD6 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_6 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_9;
  tmpvar_9 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  mediump float realtimeShadowAttenuation_10;
  highp vec4 v_11;
  v_11.x = unity_MatrixV[0].z;
  v_11.y = unity_MatrixV[1].z;
  v_11.z = unity_MatrixV[2].z;
  v_11.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_11.xyz), sqrt(dot (tmpvar_12, tmpvar_12)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_13 = tmpvar_14;
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  realtimeShadowAttenuation_10 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = clamp ((realtimeShadowAttenuation_10 + tmpvar_13), 0.0, 1.0);
  atten_5 = tmpvar_16;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_6;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_17;
  mediump vec3 x_20;
  x_20.x = dot (unity_SHAr, tmpvar_19);
  x_20.y = dot (unity_SHAg, tmpvar_19);
  x_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 tmpvar_21;
  tmpvar_21 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_20)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9.xyz * tmpvar_18) * diff_24);
  c_23.w = tmpvar_9.w;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9.xyz * tmpvar_21));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump float u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
float u_xlat16;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat16_2 = u_xlat1.y * u_xlat1.y;
    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);
    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat4.zz + u_xlat4.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
mediump float u_xlat16_17;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat16_2.x = u_xlat0.x + u_xlat10_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat16_1.xyz = vs_TEXCOORD1.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat16_1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_17 = max(u_xlat16_17, 0.0);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Matrix4x4 unity_MatrixVP at 208
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 _MainTex_ST at 272
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    u_xlat1.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = fma(u_xlat1.x, u_xlat1.x, (-u_xlat10));
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat1.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat1.z = dot(Globals.unity_SHBb, u_xlat2);
    output.TEXCOORD3.xyz = fma(Globals.unity_SHC.xyz, float3(u_xlat10), u_xlat1.xyz);
    u_xlat0.y = u_xlat0.y * Globals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD4.zw = u_xlat0.zw;
    output.TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_ShadowMapTexture" to slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "Globals" (336 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 208
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_ProbeVolumeParams at 192
  Vector3 unity_ProbeVolumeSizeInv at 272
  Vector3 unity_ProbeVolumeMin at 288
  Vector4 _LightColor0 at 304
  Vector4 _Color at 320
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture (1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    bool u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat7;
    bool u_xlatb7;
    float u_xlat8;
    float2 u_xlat13;
    float u_xlat18;
    bool u_xlatb18;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * Globals._Color.xyz;
    u_xlat1.xyz = (-input.TEXCOORD2.xyz) + Globals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat2.x = Globals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = Globals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = Globals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.xyz = input.TEXCOORD2.xyz + (-Globals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat18) + u_xlat1.x;
    u_xlat18 = fma(Globals.unity_ShadowFadeCenterAndType.w, u_xlat1.x, u_xlat18);
    u_xlat18 = fma(u_xlat18, Globals._LightShadowData.z, Globals._LightShadowData.w);
    u_xlat18 = clamp(u_xlat18, 0.0f, 1.0f);
    u_xlatb1 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb7 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat2.xyz : input.TEXCOORD2.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat7.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = fma(u_xlat2.y, 0.25, 0.75);
        u_xlat13.x = fma(Globals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat2.x = max(u_xlat13.x, u_xlat7.x);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    }
    u_xlat7.x = dot(u_xlat2, Globals.unity_OcclusionMaskSelector);
    u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
    u_xlat13.xy = input.TEXCOORD4.xy / input.TEXCOORD4.ww;
    u_xlat13.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat13.xy).x;
    u_xlat18 = u_xlat18 + u_xlat13.x;
    u_xlat18 = clamp(u_xlat18, 0.0f, 1.0f);
    u_xlat7.x = min(u_xlat18, u_xlat7.x);
    u_xlat18 = (u_xlatb1) ? u_xlat7.x : u_xlat18;
    u_xlat7.xyz = float3(u_xlat18) * Globals._LightColor0.xyz;
    if(u_xlatb1){
        u_xlatb18 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : input.TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat1.x = Globals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = fma((-Globals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat18 = max(u_xlat18, u_xlat1.x);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + float3(0.25, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + float3(0.5, 0.0, 0.0);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = input.TEXCOORD1.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat3, u_xlat5);
        u_xlat3.y = dot(u_xlat4, u_xlat5);
        u_xlat3.z = dot(u_xlat2, u_xlat5);
    } else {
        u_xlat2.xyz = input.TEXCOORD1.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(Globals.unity_SHAr, u_xlat2);
        u_xlat3.y = dot(Globals.unity_SHAg, u_xlat2);
        u_xlat3.z = dot(Globals.unity_SHAb, u_xlat2);
    }
    u_xlat2.xyz = u_xlat3.xyz + input.TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat18 = dot(input.TEXCOORD1.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat7.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    output.SV_Target0.xyz = fma(u_xlat1.xyz, float3(u_xlat18), u_xlat0.xyz);
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat10;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = u_xlat1.x * u_xlat1.x + (-u_xlat10);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(unity_SHBr, u_xlat2);
    u_xlat1.y = dot(unity_SHBg, u_xlat2);
    u_xlat1.z = dot(unity_SHBb, u_xlat2);
    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat10) + u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat0.zw;
    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
vec2 u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat18) + u_xlat1.x;
    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat18;
    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat13.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13.x, u_xlat7.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat7.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat13.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat13.xy);
    u_xlat18 = u_xlat18 + u_xlat10_2.x;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat7.x = min(u_xlat18, u_xlat7.x);
    u_xlat18 = (u_xlatb1) ? u_xlat7.x : u_xlat18;
    u_xlat7.xyz = vec3(u_xlat18) * _LightColor0.xyz;
    if(u_xlatb1){
        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat1.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat18 = max(u_xlat18, u_xlat1.x);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = vs_TEXCOORD1.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat5);
        u_xlat3.y = dot(u_xlat10_4, u_xlat5);
        u_xlat3.z = dot(u_xlat10_2, u_xlat5);
    } else {
        u_xlat2.xyz = vs_TEXCOORD1.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat2);
        u_xlat3.y = dot(unity_SHAg, u_xlat2);
        u_xlat3.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat18 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat7.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
u_xlatb1", used in: Fragment 

Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 2D Texture "_ShadowMapTexture" to set: 0, binding: 1, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 2, used in: Fragment 

Constant Buffer "PGlobals2835289134" (336 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 208
  Vector4 _Color at 320
  Vector4 _LightColor0 at 304
  Vector4 _LightShadowData at 96
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 80
  Vector3 unity_ProbeVolumeMin at 288
  Vector4 unity_ProbeVolumeParams at 192
  Vector3 unity_ProbeVolumeSizeInv at 272
  Vector4 unity_SHAb at 64
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAr at 32
  Vector4 unity_ShadowFadeCenterAndType at 112
}
Constant Buffer "VGlobals2835289134" (288 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 208
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_WorldToObject at 144
  Vector4 _MainTex_ST at 272
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBb at 48
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBr at 16
  Vector4 unity_SHC at 64
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 238

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 53 94 100 101 114 152 192 217 229
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 RelaxedPrecision
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 RelaxedPrecision
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 RelaxedPrecision
                              MemberDecorate 19 3 Offset 48
                              MemberDecorate 19 4 RelaxedPrecision
                              MemberDecorate 19 4 Offset 64
                              MemberDecorate 19 5 Offset 80
                              MemberDecorate 19 6 Offset 144
                              MemberDecorate 19 7 Offset 208
                              MemberDecorate 19 8 Offset 272
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 53 Location 2
                              MemberDecorate 92 0 BuiltIn Position
                              MemberDecorate 92 1 BuiltIn PointSize
                              MemberDecorate 92 2 BuiltIn ClipDistance
                              Decorate 92 Block
                              Decorate 100 Location 0
                              Decorate 101 Location 2
                              Decorate 114 Location 1
                              Decorate 152 RelaxedPrecision
                              Decorate 152 Location 1
                              Decorate 155 RelaxedPrecision
                              Decorate 166 RelaxedPrecision
                              Decorate 167 RelaxedPrecision
                              Decorate 169 RelaxedPrecision
                              Decorate 176 RelaxedPrecision
                              Decorate 178 RelaxedPrecision
                              Decorate 179 RelaxedPrecision
                              Decorate 180 RelaxedPrecision
                              Decorate 183 RelaxedPrecision
                              Decorate 184 RelaxedPrecision
                              Decorate 185 RelaxedPrecision
                              Decorate 188 RelaxedPrecision
                              Decorate 189 RelaxedPrecision
                              Decorate 190 RelaxedPrecision
                              Decorate 192 RelaxedPrecision
                              Decorate 192 Location 3
                              Decorate 195 RelaxedPrecision
                              Decorate 196 RelaxedPrecision
                              Decorate 197 RelaxedPrecision
                              Decorate 198 RelaxedPrecision
                              Decorate 199 RelaxedPrecision
                              Decorate 200 RelaxedPrecision
                              Decorate 201 RelaxedPrecision
                              Decorate 217 Location 4
                              Decorate 229 Location 5
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 5
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              29:     22(int) Constant 0
              37:     22(int) Constant 2
              45:      8(ptr) Variable Private
              47:     22(int) Constant 3
              51:             TypeVector 6(float) 3
              52:             TypePointer Output 51(fvec3)
              53:     52(ptr) Variable Output
              65:     22(int) Constant 7
              90:     14(int) Constant 1
              91:             TypeArray 6(float) 90
              92:             TypeStruct 7(fvec4) 6(float) 91
              93:             TypePointer Output 92(struct)
              94:     93(ptr) Variable Output
              96:             TypePointer Output 7(fvec4)
              98:             TypeVector 6(float) 2
              99:             TypePointer Output 98(fvec2)
             100:     99(ptr) Variable Output
             101:     10(ptr) Variable Input
             104:     22(int) Constant 8
             113:             TypePointer Input 51(fvec3)
             114:    113(ptr) Variable Input
             116:     22(int) Constant 6
             121:     14(int) Constant 0
             122:             TypePointer Private 6(float)
             135:     14(int) Constant 2
             137:    122(ptr) Variable Private
             152:     52(ptr) Variable Output
             155:    122(ptr) Variable Private
             169:      8(ptr) Variable Private
             175:             TypePointer Private 51(fvec3)
             176:    175(ptr) Variable Private
             192:     52(ptr) Variable Output
             193:     22(int) Constant 4
             204:             TypePointer Uniform 6(float)
             209:      8(ptr) Variable Private
             212:    6(float) Constant 1056964608
             213:   51(fvec3) ConstantComposite 212 212 212
             217:     96(ptr) Variable Output
             229:     96(ptr) Variable Output
             230:    6(float) Constant 0
             231:    7(fvec4) ConstantComposite 230 230 230 230
             232:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              30:     25(ptr) AccessChain 21 23 29
              31:    7(fvec4) Load 30
              32:    7(fvec4) Load 11
              33:    7(fvec4) VectorShuffle 32 32 0 0 0 0
              34:    7(fvec4) FMul 31 33
              35:    7(fvec4) Load 9
              36:    7(fvec4) FAdd 34 35
                              Store 9 36
              38:     25(ptr) AccessChain 21 23 37
              39:    7(fvec4) Load 38
              40:    7(fvec4) Load 11
              41:    7(fvec4) VectorShuffle 40 40 2 2 2 2
              42:    7(fvec4) FMul 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) FAdd 42 43
                              Store 9 44
              46:    7(fvec4) Load 9
              48:     25(ptr) AccessChain 21 23 47
              49:    7(fvec4) Load 48
              50:    7(fvec4) FAdd 46 49
                              Store 45 50
              54:     25(ptr) AccessChain 21 23 47
              55:    7(fvec4) Load 54
              56:   51(fvec3) VectorShuffle 55 55 0 1 2
              57:    7(fvec4) Load 11
              58:   51(fvec3) VectorShuffle 57 57 3 3 3
              59:   51(fvec3) FMul 56 58
              60:    7(fvec4) Load 9
              61:   51(fvec3) VectorShuffle 60 60 0 1 2
              62:   51(fvec3) FAdd 59 61
                              Store 53 62
              63:    7(fvec4) Load 45
              64:    7(fvec4) VectorShuffle 63 63 1 1 1 1
              66:     25(ptr) AccessChain 21 65 24
              67:    7(fvec4) Load 66
              68:    7(fvec4) FMul 64 67
                              Store 9 68
              69:     25(ptr) AccessChain 21 65 29
              70:    7(fvec4) Load 69
              71:    7(fvec4) Load 45
              72:    7(fvec4) VectorShuffle 71 71 0 0 0 0
              73:    7(fvec4) FMul 70 72
              74:    7(fvec4) Load 9
              75:    7(fvec4) FAdd 73 74
                              Store 9 75
              76:     25(ptr) AccessChain 21 65 37
              77:    7(fvec4) Load 76
              78:    7(fvec4) Load 45
              79:    7(fvec4) VectorShuffle 78 78 2 2 2 2
              80:    7(fvec4) FMul 77 79
              81:    7(fvec4) Load 9
              82:    7(fvec4) FAdd 80 81
                              Store 9 82
              83:     25(ptr) AccessChain 21 65 47
              84:    7(fvec4) Load 83
              85:    7(fvec4) Load 45
              86:    7(fvec4) VectorShuffle 85 85 3 3 3 3
              87:    7(fvec4) FMul 84 86
              88:    7(fvec4) Load 9
              89:    7(fvec4) FAdd 87 88
                              Store 9 89
              95:    7(fvec4) Load 9
              97:     96(ptr) AccessChain 94 29
                              Store 97 95
             102:    7(fvec4) Load 101
             103:   98(fvec2) VectorShuffle 102 102 0 1
             105:     25(ptr) AccessChain 21 104
             106:    7(fvec4) Load 105
             107:   98(fvec2) VectorShuffle 106 106 0 1
             108:   98(fvec2) FMul 103 107
             109:     25(ptr) AccessChain 21 104
             110:    7(fvec4) Load 109
             111:   98(fvec2) VectorShuffle 110 110 2 3
             112:   98(fvec2) FAdd 108 111
                              Store 100 112
             115:   51(fvec3) Load 114
             117:     25(ptr) AccessChain 21 116 29
             118:    7(fvec4) Load 117
             119:   51(fvec3) VectorShuffle 118 118 0 1 2
             120:    6(float) Dot 115 119
             123:    122(ptr) AccessChain 45 121
                              Store 123 120
             124:   51(fvec3) Load 114
             125:     25(ptr) AccessChain 21 116 24
             126:    7(fvec4) Load 125
             127:   51(fvec3) VectorShuffle 126 126 0 1 2
             128:    6(float) Dot 124 127
             129:    122(ptr) AccessChain 45 90
                              Store 129 128
             130:   51(fvec3) Load 114
             131:     25(ptr) AccessChain 21 116 37
             132:    7(fvec4) Load 131
             133:   51(fvec3) VectorShuffle 132 132 0 1 2
             134:    6(float) Dot 130 133
             136:    122(ptr) AccessChain 45 135
                              Store 136 134
             138:    7(fvec4) Load 45
             139:   51(fvec3) VectorShuffle 138 138 0 1 2
             140:    7(fvec4) Load 45
             141:   51(fvec3) VectorShuffle 140 140 0 1 2
             142:    6(float) Dot 139 141
                              Store 137 142
             143:    6(float) Load 137
             144:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 143
                              Store 137 144
             145:    6(float) Load 137
             146:   51(fvec3) CompositeConstruct 145 145 145
             147:    7(fvec4) Load 45
             148:   51(fvec3) VectorShuffle 147 147 0 1 2
             149:   51(fvec3) FMul 146 148
             150:    7(fvec4) Load 45
             151:    7(fvec4) VectorShuffle 150 149 4 5 6 3
                              Store 45 151
             153:    7(fvec4) Load 45
             154:   51(fvec3) VectorShuffle 153 153 0 1 2
                              Store 152 154
             156:    122(ptr) AccessChain 45 90
             157:    6(float) Load 156
             158:    122(ptr) AccessChain 45 90
             159:    6(float) Load 158
             160:    6(float) FMul 157 159
                              Store 155 160
             161:    122(ptr) AccessChain 45 121
             162:    6(float) Load 161
             163:    122(ptr) AccessChain 45 121
             164:    6(float) Load 163
             165:    6(float) FMul 162 164
             166:    6(float) Load 155
             167:    6(float) FNegate 166
             168:    6(float) FAdd 165 167
                              Store 155 168
             170:    7(fvec4) Load 45
             171:    7(fvec4) VectorShuffle 170 170 1 2 2 0
             172:    7(fvec4) Load 45
             173:    7(fvec4) VectorShuffle 172 172 0 1 2 2
             174:    7(fvec4) FMul 171 173
                              Store 169 174
             177:     25(ptr) AccessChain 21 24
             178:    7(fvec4) Load 177
             179:    7(fvec4) Load 169
             180:    6(float) Dot 178 179
             181:    122(ptr) AccessChain 176 121
                              Store 181 180
             182:     25(ptr) AccessChain 21 37
             183:    7(fvec4) Load 182
             184:    7(fvec4) Load 169
             185:    6(float) Dot 183 184
             186:    122(ptr) AccessChain 176 90
                              Store 186 185
             187:     25(ptr) AccessChain 21 47
             188:    7(fvec4) Load 187
             189:    7(fvec4) Load 169
             190:    6(float) Dot 188 189
             191:    122(ptr) AccessChain 176 135
                              Store 191 190
             194:     25(ptr) AccessChain 21 193
             195:    7(fvec4) Load 194
             196:   51(fvec3) VectorShuffle 195 195 0 1 2
             197:    6(float) Load 155
             198:   51(fvec3) CompositeConstruct 197 197 197
             199:   51(fvec3) FMul 196 198
             200:   51(fvec3) Load 176
             201:   51(fvec3) FAdd 199 200
                              Store 192 201
             202:    122(ptr) AccessChain 9 90
             203:    6(float) Load 202
             205:    204(ptr) AccessChain 21 29 121
             206:    6(float) Load 205
             207:    6(float) FMul 203 206
             208:    122(ptr) AccessChain 9 90
                              Store 208 207
             210:    7(fvec4) Load 9
             211:   51(fvec3) VectorShuffle 210 210 0 3 1
             214:   51(fvec3) FMul 211 213
             215:    7(fvec4) Load 209
             216:    7(fvec4) VectorShuffle 215 214 4 1 5 6
                              Store 209 216
             218:    7(fvec4) Load 9
             219:   98(fvec2) VectorShuffle 218 218 2 3
             220:    7(fvec4) Load 217
             221:    7(fvec4) VectorShuffle 220 219 0 1 4 5
                              Store 217 221
             222:    7(fvec4) Load 209
             223:   98(fvec2) VectorShuffle 222 222 2 2
             224:    7(fvec4) Load 209
             225:   98(fvec2) VectorShuffle 224 224 0 3
             226:   98(fvec2) FAdd 223 225
             227:    7(fvec4) Load 217
             228:    7(fvec4) VectorShuffle 227 226 4 5 2 3
                              Store 217 228
                              Store 229 231
             233:    232(ptr) AccessChain 94 29 90
             234:    6(float) Load 233
             235:    6(float) FNegate 234
             236:    232(ptr) AccessChain 94 29 90
                              Store 236 235
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 517

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 41 249 416 457 504
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 0
                              Decorate 21 RelaxedPrecision
                              Decorate 22 RelaxedPrecision
                              Decorate 23 RelaxedPrecision
                              Decorate 26 ArrayStride 16
                              Decorate 27 ArrayStride 16
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 RelaxedPrecision
                              MemberDecorate 28 1 Offset 16
                              MemberDecorate 28 2 RelaxedPrecision
                              MemberDecorate 28 2 Offset 32
                              MemberDecorate 28 3 RelaxedPrecision
                              MemberDecorate 28 3 Offset 48
                              MemberDecorate 28 4 RelaxedPrecision
                              MemberDecorate 28 4 Offset 64
                              MemberDecorate 28 5 RelaxedPrecision
                              MemberDecorate 28 5 Offset 80
                              MemberDecorate 28 6 RelaxedPrecision
                              MemberDecorate 28 6 Offset 96
                              MemberDecorate 28 7 Offset 112
                              MemberDecorate 28 8 Offset 128
                              MemberDecorate 28 9 Offset 192
                              MemberDecorate 28 10 Offset 208
                              MemberDecorate 28 11 Offset 272
                              MemberDecorate 28 12 Offset 288
                              MemberDecorate 28 13 RelaxedPrecision
                              MemberDecorate 28 13 Offset 304
                              MemberDecorate 28 14 RelaxedPrecision
                              MemberDecorate 28 14 Offset 320
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 0
                              Decorate 35 RelaxedPrecision
                              Decorate 36 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 41 Location 2
                              Decorate 111 RelaxedPrecision
                              Decorate 114 RelaxedPrecision
                              Decorate 133 SpecId 0
                              Decorate 225 DescriptorSet 0
                              Decorate 225 Binding 2
                              Decorate 230 RelaxedPrecision
                              Decorate 237 RelaxedPrecision
                              Decorate 238 RelaxedPrecision
                              Decorate 241 RelaxedPrecision
                              Decorate 242 RelaxedPrecision
                              Decorate 245 RelaxedPrecision
                              Decorate 246 RelaxedPrecision
                              Decorate 249 Location 4
                              Decorate 257 RelaxedPrecision
                              Decorate 258 RelaxedPrecision
                              Decorate 258 DescriptorSet 0
                              Decorate 258 Binding 1
                              Decorate 259 RelaxedPrecision
                              Decorate 263 RelaxedPrecision
                              Decorate 264 RelaxedPrecision
                              Decorate 266 RelaxedPrecision
                              Decorate 268 RelaxedPrecision
                              Decorate 269 RelaxedPrecision
                              Decorate 270 RelaxedPrecision
                              Decorate 272 RelaxedPrecision
                              Decorate 273 RelaxedPrecision
                              Decorate 281 RelaxedPrecision
                              Decorate 283 RelaxedPrecision
                              Decorate 284 RelaxedPrecision
                              Decorate 286 RelaxedPrecision
                              Decorate 287 RelaxedPrecision
                              Decorate 290 RelaxedPrecision
                              Decorate 291 RelaxedPrecision
                              Decorate 292 RelaxedPrecision
                              Decorate 415 RelaxedPrecision
                              Decorate 416 RelaxedPrecision
                              Decorate 416 Location 1
                              Decorate 417 RelaxedPrecision
                              Decorate 421 RelaxedPrecision
                              Decorate 423 RelaxedPrecision
                              Decorate 427 RelaxedPrecision
                              Decorate 431 RelaxedPrecision
                              Decorate 435 RelaxedPrecision
                              Decorate 436 RelaxedPrecision
                              Decorate 441 RelaxedPrecision
                              Decorate 442 RelaxedPrecision
                              Decorate 443 RelaxedPrecision
                              Decorate 446 RelaxedPrecision
                              Decorate 447 RelaxedPrecision
                              Decorate 448 RelaxedPrecision
                              Decorate 452 RelaxedPrecision
                              Decorate 453 RelaxedPrecision
                              Decorate 454 RelaxedPrecision
                              Decorate 456 RelaxedPrecision
                              Decorate 457 RelaxedPrecision
                              Decorate 457 Location 3
                              Decorate 458 RelaxedPrecision
                              Decorate 459 RelaxedPrecision
                              Decorate 462 RelaxedPrecision
                              Decorate 463 RelaxedPrecision
                              Decorate 465 RelaxedPrecision
                              Decorate 468 RelaxedPrecision
                              Decorate 469 RelaxedPrecision
                              Decorate 470 RelaxedPrecision
                              Decorate 471 RelaxedPrecision
                              Decorate 472 RelaxedPrecision
                              Decorate 475 RelaxedPrecision
                              Decorate 476 RelaxedPrecision
                              Decorate 477 RelaxedPrecision
                              Decorate 478 RelaxedPrecision
                              Decorate 481 RelaxedPrecision
                              Decorate 484 RelaxedPrecision
                              Decorate 485 RelaxedPrecision
                              Decorate 486 RelaxedPrecision
                              Decorate 487 RelaxedPrecision
                              Decorate 488 RelaxedPrecision
                              Decorate 490 RelaxedPrecision
                              Decorate 491 RelaxedPrecision
                              Decorate 492 RelaxedPrecision
                              Decorate 493 RelaxedPrecision
                              Decorate 494 RelaxedPrecision
                              Decorate 495 RelaxedPrecision
                              Decorate 496 RelaxedPrecision
                              Decorate 497 RelaxedPrecision
                              Decorate 498 RelaxedPrecision
                              Decorate 499 RelaxedPrecision
                              Decorate 500 RelaxedPrecision
                              Decorate 504 RelaxedPrecision
                              Decorate 504 Location 0
                              Decorate 505 RelaxedPrecision
                              Decorate 506 RelaxedPrecision
                              Decorate 507 RelaxedPrecision
                              Decorate 508 RelaxedPrecision
                              Decorate 509 RelaxedPrecision
                              Decorate 510 RelaxedPrecision
                              Decorate 511 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              19:             TypeVector 6(float) 4
              22:      8(ptr) Variable Private
              24:             TypeInt 32 0
              25:     24(int) Constant 4
              26:             TypeArray 19(fvec4) 25
              27:             TypeArray 19(fvec4) 25
              28:             TypeStruct 7(fvec3) 19(fvec4) 19(fvec4) 19(fvec4) 19(fvec4) 19(fvec4) 19(fvec4) 19(fvec4) 26 19(fvec4) 27 7(fvec3) 7(fvec3) 19(fvec4) 19(fvec4)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:             TypeInt 32 1
              32:     31(int) Constant 14
              33:             TypePointer Uniform 19(fvec4)
              38:             TypePointer Private 19(fvec4)
              39:     38(ptr) Variable Private
              40:             TypePointer Input 7(fvec3)
              41:     40(ptr) Variable Input
              44:     31(int) Constant 0
              45:             TypePointer Uniform 7(fvec3)
              51:     38(ptr) Variable Private
              52:     31(int) Constant 8
              53:     24(int) Constant 2
              54:             TypePointer Uniform 6(float)
              57:     24(int) Constant 0
              58:             TypePointer Private 6(float)
              60:     31(int) Constant 1
              63:     24(int) Constant 1
              65:     31(int) Constant 2
              69:     58(ptr) Variable Private
              76:     31(int) Constant 7
             100:     24(int) Constant 3
             109:     31(int) Constant 6
             117:    6(float) Constant 0
             118:    6(float) Constant 1065353216
             120:             TypeBool
             121:             TypePointer Private 120(bool)
             122:    121(ptr) Variable Private
             123:     31(int) Constant 9
             127:   120(bool) ConstantFalse
             133:   120(bool) SpecConstantFalse
             136:    121(ptr) Variable Private
             142:     31(int) Constant 10
             173:     31(int) Constant 3
             180:      8(ptr) Variable Private
             181:             TypePointer Function 7(fvec3)
             192:     31(int) Constant 12
             198:     31(int) Constant 11
             206:    6(float) Constant 1048576000
             208:    6(float) Constant 1061158912
             211:     58(ptr) Variable Private
             214:    6(float) Constant 1056964608
             222:             TypeImage 6(float) 3D sampled format:Unknown
             223:             TypeSampledImage 222
             224:             TypePointer UniformConstant 223
             225:    224(ptr) Variable UniformConstant
             230:     38(ptr) Variable Private
             237:      8(ptr) Variable Private
             239:     31(int) Constant 5
             248:             TypePointer Input 19(fvec4)
             249:    248(ptr) Variable Input
             257:     58(ptr) Variable Private
             258:     12(ptr) Variable UniformConstant
             264:     58(ptr) Variable Private
             275:             TypePointer Function 6(float)
             288:     31(int) Constant 13
             300:    121(ptr) Variable Private
             375:     38(ptr) Variable Private
             397:    7(fvec3) ConstantComposite 206 117 117
             407:    7(fvec3) ConstantComposite 214 117 117
             415:     38(ptr) Variable Private
             416:     40(ptr) Variable Input
             421:      8(ptr) Variable Private
             435:     38(ptr) Variable Private
             450:     31(int) Constant 4
             457:     40(ptr) Variable Input
             464:    7(fvec3) ConstantComposite 117 117 117
             468:      8(ptr) Variable Private
             473:    6(float) Constant 1054168405
             474:    7(fvec3) ConstantComposite 473 473 473
             479:    6(float) Constant 1065814589
             480:    7(fvec3) ConstantComposite 479 479 479
             482:    6(float) Constant 3177269166
             483:    7(fvec3) ConstantComposite 482 482 482
             487:     58(ptr) Variable Private
             503:             TypePointer Output 19(fvec4)
             504:    503(ptr) Variable Output
             514:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             182:    181(ptr) Variable Function
             276:    275(ptr) Variable Function
             342:    181(ptr) Variable Function
              14:          11 Load 13
              18:   15(fvec2) Load 17
              20:   19(fvec4) ImageSampleImplicitLod 14 18
              21:    7(fvec3) VectorShuffle 20 20 0 1 2
                              Store 9 21
              23:    7(fvec3) Load 9
              34:     33(ptr) AccessChain 30 32
              35:   19(fvec4) Load 34
              36:    7(fvec3) VectorShuffle 35 35 0 1 2
              37:    7(fvec3) FMul 23 36
                              Store 22 37
              42:    7(fvec3) Load 41
              43:    7(fvec3) FNegate 42
              46:     45(ptr) AccessChain 30 44
              47:    7(fvec3) Load 46
              48:    7(fvec3) FAdd 43 47
              49:   19(fvec4) Load 39
              50:   19(fvec4) VectorShuffle 49 48 4 5 6 3
                              Store 39 50
              55:     54(ptr) AccessChain 30 52 44 53
              56:    6(float) Load 55
              59:     58(ptr) AccessChain 51 57
                              Store 59 56
              61:     54(ptr) AccessChain 30 52 60 53
              62:    6(float) Load 61
              64:     58(ptr) AccessChain 51 63
                              Store 64 62
              66:     54(ptr) AccessChain 30 52 65 53
              67:    6(float) Load 66
              68:     58(ptr) AccessChain 51 53
                              Store 68 67
              70:   19(fvec4) Load 39
              71:    7(fvec3) VectorShuffle 70 70 0 1 2
              72:   19(fvec4) Load 51
              73:    7(fvec3) VectorShuffle 72 72 0 1 2
              74:    6(float) Dot 71 73
                              Store 69 74
              75:    7(fvec3) Load 41
              77:     33(ptr) AccessChain 30 76
              78:   19(fvec4) Load 77
              79:    7(fvec3) VectorShuffle 78 78 0 1 2
              80:    7(fvec3) FNegate 79
              81:    7(fvec3) FAdd 75 80
              82:   19(fvec4) Load 39
              83:   19(fvec4) VectorShuffle 82 81 4 5 6 3
                              Store 39 83
              84:   19(fvec4) Load 39
              85:    7(fvec3) VectorShuffle 84 84 0 1 2
              86:   19(fvec4) Load 39
              87:    7(fvec3) VectorShuffle 86 86 0 1 2
              88:    6(float) Dot 85 87
              89:     58(ptr) AccessChain 39 57
                              Store 89 88
              90:     58(ptr) AccessChain 39 57
              91:    6(float) Load 90
              92:    6(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 91
              93:     58(ptr) AccessChain 39 57
                              Store 93 92
              94:    6(float) Load 69
              95:    6(float) FNegate 94
              96:     58(ptr) AccessChain 39 57
              97:    6(float) Load 96
              98:    6(float) FAdd 95 97
              99:     58(ptr) AccessChain 39 57
                              Store 99 98
             101:     54(ptr) AccessChain 30 76 100
             102:    6(float) Load 101
             103:     58(ptr) AccessChain 39 57
             104:    6(float) Load 103
             105:    6(float) FMul 102 104
             106:    6(float) Load 69
             107:    6(float) FAdd 105 106
                              Store 69 107
             108:    6(float) Load 69
             110:     54(ptr) AccessChain 30 109 53
             111:    6(float) Load 110
             112:    6(float) FMul 108 111
             113:     54(ptr) AccessChain 30 109 100
             114:    6(float) Load 113
             115:    6(float) FAdd 112 114
                              Store 69 115
             116:    6(float) Load 69
             119:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 116 117 118
                              Store 69 119
             124:     54(ptr) AccessChain 30 123 57
             125:    6(float) Load 124
             126:   120(bool) FOrdEqual 125 118
                              Store 122 126
                              SelectionMerge 129 None
                              BranchConditional 127 128 129
             128:               Label
             130:   120(bool)   Load 122
                                SelectionMerge 132 None
                                BranchConditional 130 131 132
             131:                 Label
                                  Branch 132
             132:               Label
                                Branch 129
             129:             Label
                              SelectionMerge 135 None
                              BranchConditional 133 134 232
             134:               Label
             137:     54(ptr)   AccessChain 30 123 63
             138:    6(float)   Load 137
             139:   120(bool)   FOrdEqual 138 118
                                Store 136 139
             140:    7(fvec3)   Load 41
             141:    7(fvec3)   VectorShuffle 140 140 1 1 1
             143:     33(ptr)   AccessChain 30 142 60
             144:   19(fvec4)   Load 143
             145:    7(fvec3)   VectorShuffle 144 144 0 1 2
             146:    7(fvec3)   FMul 141 145
             147:   19(fvec4)   Load 51
             148:   19(fvec4)   VectorShuffle 147 146 4 5 6 3
                                Store 51 148
             149:     33(ptr)   AccessChain 30 142 44
             150:   19(fvec4)   Load 149
             151:    7(fvec3)   VectorShuffle 150 150 0 1 2
             152:    7(fvec3)   Load 41
             153:    7(fvec3)   VectorShuffle 152 152 0 0 0
             154:    7(fvec3)   FMul 151 153
             155:   19(fvec4)   Load 51
             156:    7(fvec3)   VectorShuffle 155 155 0 1 2
             157:    7(fvec3)   FAdd 154 156
             158:   19(fvec4)   Load 51
             159:   19(fvec4)   VectorShuffle 158 157 4 5 6 3
                                Store 51 159
             160:     33(ptr)   AccessChain 30 142 65
             161:   19(fvec4)   Load 160
             162:    7(fvec3)   VectorShuffle 161 161 0 1 2
             163:    7(fvec3)   Load 41
             164:    7(fvec3)   VectorShuffle 163 163 2 2 2
             165:    7(fvec3)   FMul 162 164
             166:   19(fvec4)   Load 51
             167:    7(fvec3)   VectorShuffle 166 166 0 1 2
             168:    7(fvec3)   FAdd 165 167
             169:   19(fvec4)   Load 51
             170:   19(fvec4)   VectorShuffle 169 168 4 5 6 3
                                Store 51 170
             171:   19(fvec4)   Load 51
             172:    7(fvec3)   VectorShuffle 171 171 0 1 2
             174:     33(ptr)   AccessChain 30 142 173
             175:   19(fvec4)   Load 174
             176:    7(fvec3)   VectorShuffle 175 175 0 1 2
             177:    7(fvec3)   FAdd 172 176
             178:   19(fvec4)   Load 51
             179:   19(fvec4)   VectorShuffle 178 177 4 5 6 3
                                Store 51 179
             183:   120(bool)   Load 136
                                SelectionMerge 185 None
                                BranchConditional 183 184 188
             184:                 Label
             186:   19(fvec4)     Load 51
             187:    7(fvec3)     VectorShuffle 186 186 0 1 2
                                  Store 182 187
                                  Branch 185
             188:                 Label
             189:    7(fvec3)     Load 41
                                  Store 182 189
                                  Branch 185
             185:               Label
             190:    7(fvec3)   Load 182
                                Store 180 190
             191:    7(fvec3)   Load 180
             193:     45(ptr)   AccessChain 30 192
             194:    7(fvec3)   Load 193
             195:    7(fvec3)   FNegate 194
             196:    7(fvec3)   FAdd 191 195
                                Store 180 196
             197:    7(fvec3)   Load 180
             199:     45(ptr)   AccessChain 30 198
             200:    7(fvec3)   Load 199
             201:    7(fvec3)   FMul 197 200
             202:   19(fvec4)   Load 51
             203:   19(fvec4)   VectorShuffle 202 201 0 4 5 6
                                Store 51 203
             204:     58(ptr)   AccessChain 51 63
             205:    6(float)   Load 204
             207:    6(float)   FMul 205 206
             209:    6(float)   FAdd 207 208
             210:     58(ptr)   AccessChain 180 57
                                Store 210 209
             212:     54(ptr)   AccessChain 30 123 53
             213:    6(float)   Load 212
             215:    6(float)   FMul 213 214
             216:    6(float)   FAdd 215 208
                                Store 211 216
             217:    6(float)   Load 211
             218:     58(ptr)   AccessChain 180 57
             219:    6(float)   Load 218
             220:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 217 219
             221:     58(ptr)   AccessChain 51 57
                                Store 221 220
             226:         223   Load 225
             227:   19(fvec4)   Load 51
             228:    7(fvec3)   VectorShuffle 227 227 0 2 3
             229:   19(fvec4)   ImageSampleImplicitLod 226 228
                                Store 51 229
             231:   19(fvec4)   Load 51
                                Store 230 231
                                Branch 135
             232:               Label
             233:     58(ptr)   AccessChain 230 57
                                Store 233 118
             234:     58(ptr)   AccessChain 230 63
                                Store 234 118
             235:     58(ptr)   AccessChain 230 53
                                Store 235 118
             236:     58(ptr)   AccessChain 230 100
                                Store 236 118
                                Branch 135
             135:             Label
             238:   19(fvec4) Load 230
             240:     33(ptr) AccessChain 30 239
             241:   19(fvec4) Load 240
             242:    6(float) Dot 238 241
             243:     58(ptr) AccessChain 237 57
                              Store 243 242
             244:     58(ptr) AccessChain 237 57
             245:    6(float) Load 244
             246:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 245 117 118
             247:     58(ptr) AccessChain 237 57
                              Store 247 246
             250:   19(fvec4) Load 249
             251:   15(fvec2) VectorShuffle 250 250 0 1
             252:   19(fvec4) Load 249
             253:   15(fvec2) VectorShuffle 252 252 3 3
             254:   15(fvec2) FDiv 251 253
             255:    7(fvec3) Load 180
             256:    7(fvec3) VectorShuffle 255 254 3 4 2
                              Store 180 256
             259:          11 Load 258
             260:    7(fvec3) Load 180
             261:   15(fvec2) VectorShuffle 260 260 0 1
             262:   19(fvec4) ImageSampleImplicitLod 259 261
             263:    6(float) CompositeExtract 262 0
                              Store 257 263
             265:    6(float) Load 69
             266:    6(float) Load 257
             267:    6(float) FAdd 265 266
                              Store 264 267
             268:    6(float) Load 264
             269:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 268 117 118
                              Store 264 269
             270:    6(float) Load 264
             271:     58(ptr) AccessChain 237 57
             272:    6(float) Load 271
             273:    6(float) ExtInst 1(GLSL.std.450) 37(FMin) 270 272
             274:     58(ptr) AccessChain 237 57
                              Store 274 273
             277:   120(bool) Load 122
                              SelectionMerge 279 None
                              BranchConditional 277 278 282
             278:               Label
             280:     58(ptr)   AccessChain 237 57
             281:    6(float)   Load 280
                                Store 276 281
                                Branch 279
             282:               Label
             283:    6(float)   Load 264
                                Store 276 283
                                Branch 279
             279:             Label
             284:    6(float) Load 276
             285:     58(ptr) AccessChain 237 57
                              Store 285 284
             286:    7(fvec3) Load 237
             287:    7(fvec3) VectorShuffle 286 286 0 0 0
             289:     33(ptr) AccessChain 30 288
             290:   19(fvec4) Load 289
             291:    7(fvec3) VectorShuffle 290 290 0 1 2
             292:    7(fvec3) FMul 287 291
                              Store 237 292
                              SelectionMerge 294 None
                              BranchConditional 127 293 294
             293:               Label
             295:   120(bool)   Load 122
                                SelectionMerge 297 None
                                BranchConditional 295 296 297
             296:                 Label
                                  Branch 297
             297:               Label
                                Branch 294
             294:             Label
                              SelectionMerge 299 None
                              BranchConditional 133 298 434
             298:               Label
             301:     54(ptr)   AccessChain 30 123 63
             302:    6(float)   Load 301
             303:   120(bool)   FOrdEqual 302 118
                                Store 300 303
             304:    7(fvec3)   Load 41
             305:    7(fvec3)   VectorShuffle 304 304 1 1 1
             306:     33(ptr)   AccessChain 30 142 60
             307:   19(fvec4)   Load 306
             308:    7(fvec3)   VectorShuffle 307 307 0 1 2
             309:    7(fvec3)   FMul 305 308
             310:   19(fvec4)   Load 39
             311:   19(fvec4)   VectorShuffle 310 309 4 5 6 3
                                Store 39 311
             312:     33(ptr)   AccessChain 30 142 44
             313:   19(fvec4)   Load 312
             314:    7(fvec3)   VectorShuffle 313 313 0 1 2
             315:    7(fvec3)   Load 41
             316:    7(fvec3)   VectorShuffle 315 315 0 0 0
             317:    7(fvec3)   FMul 314 316
             318:   19(fvec4)   Load 39
             319:    7(fvec3)   VectorShuffle 318 318 0 1 2
             320:    7(fvec3)   FAdd 317 319
             321:   19(fvec4)   Load 39
             322:   19(fvec4)   VectorShuffle 321 320 4 5 6 3
                                Store 39 322
             323:     33(ptr)   AccessChain 30 142 65
             324:   19(fvec4)   Load 323
             325:    7(fvec3)   VectorShuffle 324 324 0 1 2
             326:    7(fvec3)   Load 41
             327:    7(fvec3)   VectorShuffle 326 326 2 2 2
             328:    7(fvec3)   FMul 325 327
             329:   19(fvec4)   Load 39
             330:    7(fvec3)   VectorShuffle 329 329 0 1 2
             331:    7(fvec3)   FAdd 328 330
             332:   19(fvec4)   Load 39
             333:   19(fvec4)   VectorShuffle 332 331 4 5 6 3
                                Store 39 333
             334:   19(fvec4)   Load 39
             335:    7(fvec3)   VectorShuffle 334 334 0 1 2
             336:     33(ptr)   AccessChain 30 142 173
             337:   19(fvec4)   Load 336
             338:    7(fvec3)   VectorShuffle 337 337 0 1 2
             339:    7(fvec3)   FAdd 335 338
             340:   19(fvec4)   Load 39
             341:   19(fvec4)   VectorShuffle 340 339 4 5 6 3
                                Store 39 341
             343:   120(bool)   Load 300
                                SelectionMerge 345 None
                                BranchConditional 343 344 348
             344:                 Label
             346:   19(fvec4)     Load 39
             347:    7(fvec3)     VectorShuffle 346 346 0 1 2
                                  Store 342 347
                                  Branch 345
             348:                 Label
             349:    7(fvec3)     Load 41
                                  Store 342 349
                                  Branch 345
             345:               Label
             350:    7(fvec3)   Load 342
             351:   19(fvec4)   Load 39
             352:   19(fvec4)   VectorShuffle 351 350 4 5 6 3
                                Store 39 352
             353:   19(fvec4)   Load 39
             354:    7(fvec3)   VectorShuffle 353 353 0 1 2
             355:     45(ptr)   AccessChain 30 192
             356:    7(fvec3)   Load 355
             357:    7(fvec3)   FNegate 356
             358:    7(fvec3)   FAdd 354 357
             359:   19(fvec4)   Load 39
             360:   19(fvec4)   VectorShuffle 359 358 4 5 6 3
                                Store 39 360
             361:   19(fvec4)   Load 39
             362:    7(fvec3)   VectorShuffle 361 361 0 1 2
             363:     45(ptr)   AccessChain 30 198
             364:    7(fvec3)   Load 363
             365:    7(fvec3)   FMul 362 364
             366:   19(fvec4)   Load 39
             367:   19(fvec4)   VectorShuffle 366 365 0 4 5 6
                                Store 39 367
             368:     58(ptr)   AccessChain 39 63
             369:    6(float)   Load 368
             370:    6(float)   FMul 369 206
                                Store 69 370
             371:     54(ptr)   AccessChain 30 123 53
             372:    6(float)   Load 371
             373:    6(float)   FMul 372 214
             374:     58(ptr)   AccessChain 180 57
                                Store 374 373
             376:     54(ptr)   AccessChain 30 123 53
             377:    6(float)   Load 376
             378:    6(float)   FNegate 377
             379:    6(float)   FMul 378 214
             380:    6(float)   FAdd 379 206
             381:     58(ptr)   AccessChain 375 57
                                Store 381 380
             382:    6(float)   Load 69
             383:     58(ptr)   AccessChain 180 57
             384:    6(float)   Load 383
             385:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 382 384
                                Store 69 385
             386:     58(ptr)   AccessChain 375 57
             387:    6(float)   Load 386
             388:    6(float)   Load 69
             389:    6(float)   ExtInst 1(GLSL.std.450) 37(FMin) 387 388
             390:     58(ptr)   AccessChain 39 57
                                Store 390 389
             391:         223   Load 225
             392:   19(fvec4)   Load 39
             393:    7(fvec3)   VectorShuffle 392 392 0 2 3
             394:   19(fvec4)   ImageSampleImplicitLod 391 393
                                Store 51 394
             395:   19(fvec4)   Load 39
             396:    7(fvec3)   VectorShuffle 395 395 0 2 3
             398:    7(fvec3)   FAdd 396 397
             399:   19(fvec4)   Load 375
             400:   19(fvec4)   VectorShuffle 399 398 4 5 6 3
                                Store 375 400
             401:         223   Load 225
             402:   19(fvec4)   Load 375
             403:    7(fvec3)   VectorShuffle 402 402 0 1 2
             404:   19(fvec4)   ImageSampleImplicitLod 401 403
                                Store 375 404
             405:   19(fvec4)   Load 39
             406:    7(fvec3)   VectorShuffle 405 405 0 2 3
             408:    7(fvec3)   FAdd 406 407
             409:   19(fvec4)   Load 39
             410:   19(fvec4)   VectorShuffle 409 408 4 5 6 3
                                Store 39 410
             411:         223   Load 225
             412:   19(fvec4)   Load 39
             413:    7(fvec3)   VectorShuffle 412 412 0 1 2
             414:   19(fvec4)   ImageSampleImplicitLod 411 413
                                Store 39 414
             417:    7(fvec3)   Load 416
             418:   19(fvec4)   Load 415
             419:   19(fvec4)   VectorShuffle 418 417 4 5 6 3
                                Store 415 419
             420:     58(ptr)   AccessChain 415 100
                                Store 420 118
             422:   19(fvec4)   Load 51
             423:   19(fvec4)   Load 415
             424:    6(float)   Dot 422 423
             425:     58(ptr)   AccessChain 421 57
                                Store 425 424
             426:   19(fvec4)   Load 375
             427:   19(fvec4)   Load 415
             428:    6(float)   Dot 426 427
             429:     58(ptr)   AccessChain 421 63
                                Store 429 428
             430:   19(fvec4)   Load 39
             431:   19(fvec4)   Load 415
             432:    6(float)   Dot 430 431
             433:     58(ptr)   AccessChain 421 53
                                Store 433 432
                                Branch 299
             434:               Label
             436:    7(fvec3)   Load 416
             437:   19(fvec4)   Load 435
             438:   19(fvec4)   VectorShuffle 437 436 4 5 6 3
                                Store 435 438
             439:     58(ptr)   AccessChain 435 100
                                Store 439 118
             440:     33(ptr)   AccessChain 30 65
             441:   19(fvec4)   Load 440
             442:   19(fvec4)   Load 435
             443:    6(float)   Dot 441 442
             444:     58(ptr)   AccessChain 421 57
                                Store 444 443
             445:     33(ptr)   AccessChain 30 173
             446:   19(fvec4)   Load 445
             447:   19(fvec4)   Load 435
             448:    6(float)   Dot 446 447
             449:     58(ptr)   AccessChain 421 63
                                Store 449 448
             451:     33(ptr)   AccessChain 30 450
             452:   19(fvec4)   Load 451
             453:   19(fvec4)   Load 435
             454:    6(float)   Dot 452 453
             455:     58(ptr)   AccessChain 421 53
                                Store 455 454
                                Branch 299
             299:             Label
             456:    7(fvec3) Load 421
             458:    7(fvec3) Load 457
             459:    7(fvec3) FAdd 456 458
             460:   19(fvec4) Load 415
             461:   19(fvec4) VectorShuffle 460 459 4 5 6 3
                              Store 415 461
             462:   19(fvec4) Load 415
             463:    7(fvec3) VectorShuffle 462 462 0 1 2
             465:    7(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 463 464
             466:   19(fvec4) Load 415
             467:   19(fvec4) VectorShuffle 466 465 4 5 6 3
                              Store 415 467
             469:   19(fvec4) Load 415
             470:    7(fvec3) VectorShuffle 469 469 0 1 2
             471:    7(fvec3) ExtInst 1(GLSL.std.450) 30(Log2) 470
                              Store 468 471
             472:    7(fvec3) Load 468
             475:    7(fvec3) FMul 472 474
                              Store 468 475
             476:    7(fvec3) Load 468
             477:    7(fvec3) ExtInst 1(GLSL.std.450) 29(Exp2) 476
                              Store 468 477
             478:    7(fvec3) Load 468
             481:    7(fvec3) FMul 478 480
             484:    7(fvec3) FAdd 481 483
                              Store 468 484
             485:    7(fvec3) Load 468
             486:    7(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 485 464
                              Store 468 486
             488:    7(fvec3) Load 416
             489:     33(ptr) AccessChain 30 60
             490:   19(fvec4) Load 489
             491:    7(fvec3) VectorShuffle 490 490 0 1 2
             492:    6(float) Dot 488 491
                              Store 487 492
             493:    6(float) Load 487
             494:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 493 117
                              Store 487 494
             495:    7(fvec3) Load 22
             496:    7(fvec3) Load 237
             497:    7(fvec3) FMul 495 496
                              Store 237 497
             498:    7(fvec3) Load 22
             499:    7(fvec3) Load 468
             500:    7(fvec3) FMul 498 499
             501:   19(fvec4) Load 415
             502:   19(fvec4) VectorShuffle 501 500 4 5 6 3
                              Store 415 502
             505:    7(fvec3) Load 237
             506:    6(float) Load 487
             507:    7(fvec3) CompositeConstruct 506 506 506
             508:    7(fvec3) FMul 505 507
             509:   19(fvec4) Load 415
             510:    7(fvec3) VectorShuffle 509 509 0 1 2
             511:    7(fvec3) FAdd 508 510
             512:   19(fvec4) Load 504
             513:   19(fvec4) VectorShuffle 512 511 4 5 6 3
                              Store 504 513
             515:    514(ptr) AccessChain 504 100
                              Store 515 118
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL VERTEXLIGHT_ON 
-- Vertex shader for "d3d9":
// Stats: 72 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 8
Matrix4x4 unity_ObjectToWorld at 4
Matrix4x3 unity_WorldToObject at 12
Vector4 _MainTex_ST at 26
Vector4 unity_4LightAtten0 at 18
Vector4 unity_4LightPosX0 at 15
Vector4 unity_4LightPosY0 at 16
Vector4 unity_4LightPosZ0 at 17
Vector4 unity_LightColor[4] at 0
Vector4 unity_SHAb at 21
Vector4 unity_SHAg at 20
Vector4 unity_SHAr at 19
Vector4 unity_SHBb at 24
Vector4 unity_SHBg at 23
Vector4 unity_SHBr at 22
Vector4 unity_SHC at 25

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   float4 unity_4LightAtten0;
//   float4 unity_4LightPosX0;
//   float4 unity_4LightPosY0;
//   float4 unity_4LightPosZ0;
//   float4 unity_LightColor[8];
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   float4 unity_SHAb;
//   float4 unity_SHAg;
//   float4 unity_SHAr;
//   float4 unity_SHBb;
//   float4 unity_SHBg;
//   float4 unity_SHBr;
//   float4 unity_SHC;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_LightColor    c0       4
//   unity_ObjectToWorld c4       4
//   unity_MatrixVP      c8       4
//   unity_WorldToObject c12      3
//   unity_4LightPosX0   c15      1
//   unity_4LightPosY0   c16      1
//   unity_4LightPosZ0   c17      1
//   unity_4LightAtten0  c18      1
//   unity_SHAr          c19      1
//   unity_SHAg          c20      1
//   unity_SHAb          c21      1
//   unity_SHBr          c22      1
//   unity_SHBg          c23      1
//   unity_SHBb          c24      1
//   unity_SHC           c25      1
//   _MainTex_ST         c26      1
//

    vs_3_0
    def c27, 1, 0, 9.99999997e-007, 0.416666657
    def c28, 1.05499995, -0.0549999997, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4.xyz
    dcl_texcoord4 o5.xy
    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
    dp4 r1.x, c4, r0
    dp4 r1.y, c5, r0
    dp4 r1.z, c6, r0
    dp4 r1.w, c7, r0
    dp4 r6.x, c8, r1
    dp4 r6.y, c9, r1
    dp4 r6.z, c10, r1
    dp4 r6.w, c11, r1
    mad o1.xy, v2, c26, c26.zwzw
    mul r0.xyz, c13, v1.y
    mad r0.xyz, v1.x, c12, r0
    mad r0.xyz, v1.z, c14, r0
    nrm r1.xyz, r0
    mul r0.x, r1.y, r1.y
    mad r0.x, r1.x, r1.x, -r0.x
    mul r2, r1.yzzx, r1.xyzz
    dp4 r3.x, c22, r2
    dp4 r3.y, c23, r2
    dp4 r3.z, c24, r2
    mad r0.xyz, c25, r0.x, r3
    mov r1.w, c27.x
    dp4 r2.x, c19, r1
    dp4 r2.y, c20, r1
    dp4 r2.z, c21, r1
    add r0.xyz, r0, r2
    max r0.xyz, r0, c27.y
    log r2.x, r0.x
    log r2.y, r0.y
    log r2.z, r0.z
    mul r0.xyz, r2, c27.w
    exp r2.x, r0.x
    exp r2.y, r0.y
    exp r2.z, r0.z
    mad r0.xyz, r2, c28.x, c28.y
    max r0.xyz, r0, c27.y
    dp4 r2.y, c5, v0
    add r3, -r2.y, c16
    mul r4, r1.y, r3
    mul r3, r3, r3
    dp4 r2.x, c4, v0
    add r5, -r2.x, c15
    mad r4, r5, r1.x, r4
    mad r3, r5, r5, r3
    dp4 r2.z, c6, v0
    add r5, -r2.z, c17
    mov o3.xyz, r2
    mad r2, r5, r1.z, r4
    mov o2.xyz, r1
    mad r1, r5, r5, r3
    max r1, r1, c27.z
    rsq r3.x, r1.x
    rsq r3.y, r1.y
    rsq r3.z, r1.z
    rsq r3.w, r1.w
    mov r4.x, c27.x
    mad r1, r1, c18, r4.x
    mul r2, r2, r3
    max r2, r2, c27.y
    rcp r3.x, r1.x
    rcp r3.y, r1.y
    rcp r3.z, r1.z
    rcp r3.w, r1.w
    mul r1, r2, r3
    mul r2.xyz, r1.y, c1
    mad r2.xyz, c0, r1.x, r2
    mad r1.xyz, c2, r1.z, r2
    mad r1.xyz, c3, r1.w, r1
    add o4.xyz, r0, r1
    mov o5.xy, c27.y
    mad o0.xy, r6.w, c255, r6
    mov o0.zw, r6

// approximately 74 instruction slots used


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "d3d11":
// Stats: 54 math, 6 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_4LightPosX0 at 32
  Vector4 unity_4LightPosY0 at 48
  Vector4 unity_4LightPosZ0 at 64
  Vector4 unity_4LightAtten0 at 80
  Vector4 unity_LightColor[8] at 96
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 4     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_temps 6
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb2[3].xyzw
   4: mad r0.xyz, cb2[3].xyzx, v0.wwww, r0.xyzx
   5: mul r2.xyzw, r1.yyyy, cb3[18].xyzw
   6: mad r2.xyzw, cb3[17].xyzw, r1.xxxx, r2.xyzw
   7: mad r2.xyzw, cb3[19].xyzw, r1.zzzz, r2.xyzw
   8: mad o0.xyzw, cb3[20].xyzw, r1.wwww, r2.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r1.x, v2.xyzx, cb2[4].xyzx
  12: dp3 r1.y, v2.xyzx, cb2[5].xyzx
  13: dp3 r1.z, v2.xyzx, cb2[6].xyzx
  14: dp3 r0.w, r1.xyzx, r1.xyzx
  15: rsq r0.w, r0.w
  16: mul r1.xyz, r0.wwww, r1.xyzx
  17: mov o2.xyz, r1.xyzx
  18: mov o3.xyz, r0.xyzx
  19: mul r0.w, r1.y, r1.y
  20: mad r0.w, r1.x, r1.x, -r0.w
  21: mul r2.xyzw, r1.yzzx, r1.xyzz
  22: dp4 r3.x, cb1[41].xyzw, r2.xyzw
  23: dp4 r3.y, cb1[42].xyzw, r2.xyzw
  24: dp4 r3.z, cb1[43].xyzw, r2.xyzw
  25: mad r2.xyz, cb1[44].xyzx, r0.wwww, r3.xyzx
  26: mov r1.w, l(1.000000)
  27: dp4 r3.x, cb1[38].xyzw, r1.xyzw
  28: dp4 r3.y, cb1[39].xyzw, r1.xyzw
  29: dp4 r3.z, cb1[40].xyzw, r1.xyzw
  30: add r2.xyz, r2.xyzx, r3.xyzx
  31: max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  32: log r2.xyz, r2.xyzx
  33: mul r2.xyz, r2.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  34: exp r2.xyz, r2.xyzx
  35: mad r2.xyz, r2.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  36: max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  37: add r3.xyzw, -r0.yyyy, cb1[3].xyzw
  38: mul r4.xyzw, r1.yyyy, r3.xyzw
  39: mul r3.xyzw, r3.xyzw, r3.xyzw
  40: add r5.xyzw, -r0.xxxx, cb1[2].xyzw
  41: add r0.xyzw, -r0.zzzz, cb1[4].xyzw
  42: mad r4.xyzw, r5.xyzw, r1.xxxx, r4.xyzw
  43: mad r1.xyzw, r0.xyzw, r1.zzzz, r4.xyzw
  44: mad r3.xyzw, r5.xyzw, r5.xyzw, r3.xyzw
  45: mad r0.xyzw, r0.xyzw, r0.xyzw, r3.xyzw
  46: max r0.xyzw, r0.xyzw, l(0.000001, 0.000001, 0.000001, 0.000001)
  47: rsq r3.xyzw, r0.xyzw
  48: mad r0.xyzw, r0.xyzw, cb1[5].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  49: div r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r0.xyzw
  50: mul r1.xyzw, r1.xyzw, r3.xyzw
  51: max r1.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  52: mul r0.xyzw, r0.xyzw, r1.xyzw
  53: mul r1.xyz, r0.yyyy, cb1[7].xyzx
  54: mad r1.xyz, cb1[6].xyzx, r0.xxxx, r1.xyzx
  55: mad r0.xyz, cb1[8].xyzx, r0.zzzz, r1.xyzx
  56: mad r0.xyz, cb1[9].xyzx, r0.wwww, r0.xyzx
  57: add o4.xyz, r2.xyzx, r0.xyzx
  58: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles":
// Stats: 8 math, 1 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec2 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  highp vec2 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_WorldToObject[0].xyz;
  tmpvar_7[1] = unity_WorldToObject[1].xyz;
  tmpvar_7[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_glesNormal * tmpvar_7));
  worldNormal_1 = tmpvar_8;
  tmpvar_2 = worldNormal_1;
  highp vec3 lightColor0_9;
  lightColor0_9 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_10;
  lightColor1_10 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_11;
  lightColor2_11 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_12;
  lightColor3_12 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_13;
  lightAttenSq_13 = unity_4LightAtten0;
  highp vec3 normal_14;
  normal_14 = worldNormal_1;
  highp vec3 col_15;
  highp vec4 ndotl_16;
  highp vec4 lengthSq_17;
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosX0 - tmpvar_6.x);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosY0 - tmpvar_6.y);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosZ0 - tmpvar_6.z);
  lengthSq_17 = (tmpvar_18 * tmpvar_18);
  lengthSq_17 = (lengthSq_17 + (tmpvar_19 * tmpvar_19));
  lengthSq_17 = (lengthSq_17 + (tmpvar_20 * tmpvar_20));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (lengthSq_17, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_17 = tmpvar_21;
  ndotl_16 = (tmpvar_18 * normal_14.x);
  ndotl_16 = (ndotl_16 + (tmpvar_19 * normal_14.y));
  ndotl_16 = (ndotl_16 + (tmpvar_20 * normal_14.z));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_16 * inversesqrt(tmpvar_21)));
  ndotl_16 = tmpvar_22;
  highp vec4 tmpvar_23;
  tmpvar_23 = (tmpvar_22 * (1.0/((1.0 + 
    (tmpvar_21 * lightAttenSq_13)
  ))));
  col_15 = (lightColor0_9 * tmpvar_23.x);
  col_15 = (col_15 + (lightColor1_10 * tmpvar_23.y));
  col_15 = (col_15 + (lightColor2_11 * tmpvar_23.z));
  col_15 = (col_15 + (lightColor3_12 * tmpvar_23.w));
  tmpvar_3 = col_15;
  mediump vec3 normal_24;
  normal_24 = worldNormal_1;
  mediump vec3 ambient_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normal_24;
  mediump vec3 res_27;
  mediump vec3 x_28;
  x_28.x = dot (unity_SHAr, tmpvar_26);
  x_28.y = dot (unity_SHAg, tmpvar_26);
  x_28.z = dot (unity_SHAb, tmpvar_26);
  mediump vec3 x1_29;
  mediump vec4 tmpvar_30;
  tmpvar_30 = (normal_24.xyzz * normal_24.yzzx);
  x1_29.x = dot (unity_SHBr, tmpvar_30);
  x1_29.y = dot (unity_SHBg, tmpvar_30);
  x1_29.z = dot (unity_SHBb, tmpvar_30);
  res_27 = (x_28 + (x1_29 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )));
  mediump vec3 tmpvar_31;
  tmpvar_31 = max (((1.055 * 
    pow (max (res_27, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_27 = tmpvar_31;
  ambient_25 = (tmpvar_3 + max (vec3(0.0, 0.0, 0.0), tmpvar_31));
  tmpvar_3 = ambient_25;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_5));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = ambient_25;
  xlv_TEXCOORD4 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_8;
  lowp vec4 c_9;
  lowp float diff_10;
  mediump float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_10 = tmpvar_11;
  c_9.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_10);
  c_9.w = tmpvar_7.w;
  c_8.w = c_9.w;
  c_8.xyz = (c_9.xyz + (tmpvar_7.xyz * xlv_TEXCOORD3));
  c_3.xyz = c_8.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "d3d11_9x":
// Stats: 54 math, 6 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_4LightPosX0 at 32
  Vector4 unity_4LightPosY0 at 48
  Vector4 unity_4LightPosZ0 at 64
  Vector4 unity_4LightAtten0 at 80
  Vector4 unity_LightColor[8] at 96
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 4     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             5         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             2         8  ( FLT, FLT, FLT, FLT)
// c10        cb1            38         7  ( FLT, FLT, FLT, FLT)
// c17        cb2             0         7  ( FLT, FLT, FLT, FLT)
// c24        cb3            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          def c28, 9.99999997e-007, 0, 1, 0.416666657
          def c29, 1.05499995, -0.0549999997, 0, 0
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     dp3 r0.x, v2, c21
   2:     dp3 r0.y, v2, c22
   3:     dp3 r0.z, v2, c23
   4:     nrm r1.xyz, r0
   7:     mul r0.x, r1.y, r1.y
   8:     mad r0.x, r1.x, r1.x, -r0.x
   9:     mul r2, r1.yzzx, r1.xyzz
  10:     dp4 r3.x, c13, r2
  11:     dp4 r3.y, c14, r2
  12:     dp4 r3.z, c15, r2
  13:     mad r0.xyz, c16, r0.x, r3
  14:     mov r1.w, c28.z
  15:     dp4 r2.x, c10, r1
  16:     dp4 r2.y, c11, r1
  17:     dp4 r2.z, c12, r1
  18:     add r0.xyz, r0, r2
  19:     max r0.xyz, r0, c28.y
  20:     mov r0.w, c28.w
  21:     lit r2, r0.xxww
  22:     mov r2.x, r2.z
  23:     lit r3, r0.yyww
  24:     lit r0, r0.zzww
  25:     mov r2.z, r0.z
  26:     mov r2.y, r3.z
  27:     mad r0.xyz, r2, c29.x, c29.y
  28:     max r0.xyz, r0, c28.y
  29:     mul r2, v0.y, c18
  30:     mad r2, c17, v0.x, r2
  31:     mad r2, c19, v0.z, r2
  32:     mad r3.xyz, c20, v0.w, r2
  33:     add r2, r2, c20
  34:     add r4, -r3.y, c3
  35:     mul r5, r1.y, r4
  36:     mul r4, r4, r4
  37:     add r6, -r3.x, c2
  38:     mad r5, r6, r1.x, r5
  39:     mad r4, r6, r6, r4
  40:     add r6, -r3.z, c4
  41:     mov oT2.xyz, r3
  42:     mad r3, r6, r1.z, r5
  43:     mov oT1.xyz, r1
  44:     mad r1, r6, r6, r4
  45:     max r1, r1, c28.x
  46:     rsq r4.x, r1.x
  47:     rsq r4.y, r1.y
  48:     rsq r4.z, r1.z
  49:     rsq r4.w, r1.w
  50:     mov r5.z, c28.z
  51:     mad r1, r1, c5, r5.z
  52:     mul r3, r3, r4
  53:     max r3, r3, c28.y
  54:     rcp r4.x, r1.x
  55:     rcp r4.y, r1.y
  56:     rcp r4.z, r1.z
  57:     rcp r4.w, r1.w
  58:     mul r1, r3, r4
  59:     mul r3.xyz, r1.y, c7
  60:     mad r3.xyz, c6, r1.x, r3
  61:     mad r1.xyz, c8, r1.z, r3
  62:     mad r1.xyz, c9, r1.w, r1
  63:     add oT3.xyz, r0, r1
  64:     mul r0, r2.y, c25
  65:     mad r0, c24, r2.x, r0
  66:     mad r0, c26, r2.z, r0
  67:     mad r0, c27, r2.w, r0
  68:     mad oPos.xy, r0.w, c0, r0
  69:     mov oPos.zw, r0
  70:     mov oT0.zw, c28.y

// approximately 71 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_temps 6
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb2[3].xyzw
   4: mad r0.xyz, cb2[3].xyzx, v0.wwww, r0.xyzx
   5: mul r2.xyzw, r1.yyyy, cb3[18].xyzw
   6: mad r2.xyzw, cb3[17].xyzw, r1.xxxx, r2.xyzw
   7: mad r2.xyzw, cb3[19].xyzw, r1.zzzz, r2.xyzw
   8: mad o0.xyzw, cb3[20].xyzw, r1.wwww, r2.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r1.x, v2.xyzx, cb2[4].xyzx
  12: dp3 r1.y, v2.xyzx, cb2[5].xyzx
  13: dp3 r1.z, v2.xyzx, cb2[6].xyzx
  14: dp3 r0.w, r1.xyzx, r1.xyzx
  15: rsq r0.w, r0.w
  16: mul r1.xyz, r0.wwww, r1.xyzx
  17: mov o2.xyz, r1.xyzx
  18: mov o3.xyz, r0.xyzx
  19: mul r0.w, r1.y, r1.y
  20: mad r0.w, r1.x, r1.x, -r0.w
  21: mul r2.xyzw, r1.yzzx, r1.xyzz
  22: dp4 r3.x, cb1[41].xyzw, r2.xyzw
  23: dp4 r3.y, cb1[42].xyzw, r2.xyzw
  24: dp4 r3.z, cb1[43].xyzw, r2.xyzw
  25: mad r2.xyz, cb1[44].xyzx, r0.wwww, r3.xyzx
  26: mov r1.w, l(1.000000)
  27: dp4 r3.x, cb1[38].xyzw, r1.xyzw
  28: dp4 r3.y, cb1[39].xyzw, r1.xyzw
  29: dp4 r3.z, cb1[40].xyzw, r1.xyzw
  30: add r2.xyz, r2.xyzx, r3.xyzx
  31: max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  32: log r2.xyz, r2.xyzx
  33: mul r2.xyz, r2.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  34: exp r2.xyz, r2.xyzx
  35: mad r2.xyz, r2.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  36: max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  37: add r3.xyzw, -r0.yyyy, cb1[3].xyzw
  38: mul r4.xyzw, r1.yyyy, r3.xyzw
  39: mul r3.xyzw, r3.xyzw, r3.xyzw
  40: add r5.xyzw, -r0.xxxx, cb1[2].xyzw
  41: add r0.xyzw, -r0.zzzz, cb1[4].xyzw
  42: mad r4.xyzw, r5.xyzw, r1.xxxx, r4.xyzw
  43: mad r1.xyzw, r0.xyzw, r1.zzzz, r4.xyzw
  44: mad r3.xyzw, r5.xyzw, r5.xyzw, r3.xyzw
  45: mad r0.xyzw, r0.xyzw, r0.xyzw, r3.xyzw
  46: max r0.xyzw, r0.xyzw, l(0.000001, 0.000001, 0.000001, 0.000001)
  47: rsq r3.xyzw, r0.xyzw
  48: mad r0.xyzw, r0.xyzw, cb1[5].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  49: div r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r0.xyzw
  50: mul r1.xyzw, r1.xyzw, r3.xyzw
  51: max r1.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  52: mul r0.xyzw, r0.xyzw, r1.xyzw
  53: mul r1.xyz, r0.yyyy, cb1[7].xyzx
  54: mad r1.xyz, cb1[6].xyzx, r0.xxxx, r1.xyzx
  55: mad r0.xyz, cb1[8].xyzx, r0.zzzz, r1.xyzx
  56: mad r0.xyz, cb1[9].xyzx, r0.wwww, r0.xyzx
  57: add o4.xyz, r2.xyzx, r0.xyzx
  58: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat16_5.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat10_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (512 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 304
  Matrix4x4 unity_WorldToObject at 368
  Matrix4x4 unity_MatrixVP at 432
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_LightColor[8] at 64
  Vector4 unity_SHAr at 192
  Vector4 unity_SHAg at 208
  Vector4 unity_SHAb at 224
  Vector4 unity_SHBr at 240
  Vector4 unity_SHBg at 256
  Vector4 unity_SHBb at 272
  Vector4 unity_SHC at 288
  Vector4 _MainTex_ST at 496
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat18;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    output.TEXCOORD4.xy = float2(0.0, 0.0);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = u_xlat1.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = fma(u_xlat1.x, u_xlat1.x, (-u_xlat18));
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(Globals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = fma(Globals.unity_SHC.xyz, float3(u_xlat18), u_xlat3.xyz);
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(Globals.unity_SHAr, u_xlat1);
    u_xlat3.y = dot(Globals.unity_SHAg, u_xlat1);
    u_xlat3.z = dot(Globals.unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = fma(u_xlat5, u_xlat1.xxxx, u_xlat4);
    u_xlat1 = fma(u_xlat0, u_xlat1.zzzz, u_xlat4);
    u_xlat3 = fma(u_xlat5, u_xlat5, u_xlat3);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat3);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, Globals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * Globals.unity_LightColor[1].xyz;
    u_xlat1.xyz = fma(Globals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(Globals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat0.xyz = fma(Globals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    return output;
}


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD4;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD4.xy = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlatb6 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb6){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
        u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6 = u_xlat1.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat6, u_xlat3);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat6 = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
u_xlatb12", used in: Fragment 

Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 1, used in: Fragment 

Constant Buffer "PGlobals632534569" (176 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Vector4 _Color at 160
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals632534569" (512 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 432
  Matrix4x4 unity_ObjectToWorld at 304
  Matrix4x4 unity_WorldToObject at 368
  Vector4 _MainTex_ST at 496
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_LightColor[4] at 64
  Vector4 unity_SHAb at 224
  Vector4 unity_SHAg at 208
  Vector4 unity_SHAr at 192
  Vector4 unity_SHBb at 272
  Vector4 unity_SHBg at 256
  Vector4 unity_SHBr at 240
  Vector4 unity_SHC at 288
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 400

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 90 102 103 115 119 158 161 388
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              Decorate 19 ArrayStride 16
                              Decorate 20 ArrayStride 16
                              MemberDecorate 21 0 Offset 0
                              MemberDecorate 21 1 Offset 16
                              MemberDecorate 21 2 Offset 32
                              MemberDecorate 21 3 RelaxedPrecision
                              MemberDecorate 21 3 Offset 48
                              MemberDecorate 21 4 RelaxedPrecision
                              MemberDecorate 21 4 Offset 64
                              MemberDecorate 21 5 RelaxedPrecision
                              MemberDecorate 21 5 Offset 192
                              MemberDecorate 21 6 RelaxedPrecision
                              MemberDecorate 21 6 Offset 208
                              MemberDecorate 21 7 RelaxedPrecision
                              MemberDecorate 21 7 Offset 224
                              MemberDecorate 21 8 RelaxedPrecision
                              MemberDecorate 21 8 Offset 240
                              MemberDecorate 21 9 RelaxedPrecision
                              MemberDecorate 21 9 Offset 256
                              MemberDecorate 21 10 RelaxedPrecision
                              MemberDecorate 21 10 Offset 272
                              MemberDecorate 21 11 RelaxedPrecision
                              MemberDecorate 21 11 Offset 288
                              MemberDecorate 21 12 Offset 304
                              MemberDecorate 21 13 Offset 368
                              MemberDecorate 21 14 Offset 432
                              MemberDecorate 21 15 Offset 496
                              Decorate 21 Block
                              Decorate 23 DescriptorSet 1
                              Decorate 23 Binding 1
                              MemberDecorate 88 0 BuiltIn Position
                              MemberDecorate 88 1 BuiltIn PointSize
                              MemberDecorate 88 2 BuiltIn ClipDistance
                              Decorate 88 Block
                              Decorate 102 Location 0
                              Decorate 103 Location 2
                              Decorate 115 Location 4
                              Decorate 119 Location 1
                              Decorate 158 RelaxedPrecision
                              Decorate 158 Location 1
                              Decorate 161 Location 2
                              Decorate 221 RelaxedPrecision
                              Decorate 241 RelaxedPrecision
                              Decorate 242 RelaxedPrecision
                              Decorate 247 RelaxedPrecision
                              Decorate 248 RelaxedPrecision
                              Decorate 258 RelaxedPrecision
                              Decorate 259 RelaxedPrecision
                              Decorate 269 RelaxedPrecision
                              Decorate 270 RelaxedPrecision
                              Decorate 280 RelaxedPrecision
                              Decorate 293 RelaxedPrecision
                              Decorate 294 RelaxedPrecision
                              Decorate 297 RelaxedPrecision
                              Decorate 303 RelaxedPrecision
                              Decorate 306 RelaxedPrecision
                              Decorate 307 RelaxedPrecision
                              Decorate 308 RelaxedPrecision
                              Decorate 312 RelaxedPrecision
                              Decorate 313 RelaxedPrecision
                              Decorate 314 RelaxedPrecision
                              Decorate 318 RelaxedPrecision
                              Decorate 319 RelaxedPrecision
                              Decorate 320 RelaxedPrecision
                              Decorate 324 RelaxedPrecision
                              Decorate 325 RelaxedPrecision
                              Decorate 326 RelaxedPrecision
                              Decorate 327 RelaxedPrecision
                              Decorate 328 RelaxedPrecision
                              Decorate 329 RelaxedPrecision
                              Decorate 330 RelaxedPrecision
                              Decorate 335 RelaxedPrecision
                              Decorate 341 RelaxedPrecision
                              Decorate 347 RelaxedPrecision
                              Decorate 351 RelaxedPrecision
                              Decorate 352 RelaxedPrecision
                              Decorate 353 RelaxedPrecision
                              Decorate 354 RelaxedPrecision
                              Decorate 356 RelaxedPrecision
                              Decorate 357 RelaxedPrecision
                              Decorate 358 RelaxedPrecision
                              Decorate 388 RelaxedPrecision
                              Decorate 388 Location 3
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 8
              16:             TypeArray 7(fvec4) 15
              17:     14(int) Constant 4
              18:             TypeArray 7(fvec4) 17
              19:             TypeArray 7(fvec4) 17
              20:             TypeArray 7(fvec4) 17
              21:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 16 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 18 19 20 7(fvec4)
              22:             TypePointer Uniform 21(struct)
              23:     22(ptr) Variable Uniform
              24:             TypeInt 32 1
              25:     24(int) Constant 12
              26:     24(int) Constant 1
              27:             TypePointer Uniform 7(fvec4)
              31:     24(int) Constant 0
              39:     24(int) Constant 2
              47:      8(ptr) Variable Private
              49:     24(int) Constant 3
              53:             TypeVector 6(float) 3
              65:      8(ptr) Variable Private
              68:     24(int) Constant 14
              86:     14(int) Constant 1
              87:             TypeArray 6(float) 86
              88:             TypeStruct 7(fvec4) 6(float) 87
              89:             TypePointer Output 88(struct)
              90:     89(ptr) Variable Output
              98:             TypePointer Output 7(fvec4)
             100:             TypeVector 6(float) 2
             101:             TypePointer Output 100(fvec2)
             102:    101(ptr) Variable Output
             103:     10(ptr) Variable Input
             106:     24(int) Constant 15
             115:    101(ptr) Variable Output
             116:    6(float) Constant 0
             117:  100(fvec2) ConstantComposite 116 116
             118:             TypePointer Input 53(fvec3)
             119:    118(ptr) Variable Input
             121:     24(int) Constant 13
             126:     14(int) Constant 0
             127:             TypePointer Private 6(float)
             140:     14(int) Constant 2
             142:    127(ptr) Variable Private
             157:             TypePointer Output 53(fvec3)
             158:    157(ptr) Variable Output
             161:    157(ptr) Variable Output
             170:      8(ptr) Variable Private
             183:      8(ptr) Variable Private
             214:    6(float) Constant 897988541
             215:    7(fvec4) ConstantComposite 214 214 214 214
             223:    6(float) Constant 1065353216
             224:    7(fvec4) ConstantComposite 223 223 223 223
             232:    7(fvec4) ConstantComposite 116 116 116 116
             239:     24(int) Constant 4
             279:             TypePointer Private 53(fvec3)
             280:    279(ptr) Variable Private
             297:      8(ptr) Variable Private
             303:    279(ptr) Variable Private
             304:     24(int) Constant 8
             310:     24(int) Constant 9
             316:     24(int) Constant 10
             322:     24(int) Constant 11
             331:     14(int) Constant 3
             333:     24(int) Constant 5
             339:     24(int) Constant 6
             345:     24(int) Constant 7
             355:   53(fvec3) ConstantComposite 116 116 116
             363:    6(float) Constant 1054168405
             364:   53(fvec3) ConstantComposite 363 363 363
             375:    6(float) Constant 1065814589
             376:   53(fvec3) ConstantComposite 375 375 375
             378:    6(float) Constant 3177269166
             379:   53(fvec3) ConstantComposite 378 378 378
             388:    157(ptr) Variable Output
             394:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              28:     27(ptr) AccessChain 23 25 26
              29:    7(fvec4) Load 28
              30:    7(fvec4) FMul 13 29
                              Store 9 30
              32:     27(ptr) AccessChain 23 25 31
              33:    7(fvec4) Load 32
              34:    7(fvec4) Load 11
              35:    7(fvec4) VectorShuffle 34 34 0 0 0 0
              36:    7(fvec4) FMul 33 35
              37:    7(fvec4) Load 9
              38:    7(fvec4) FAdd 36 37
                              Store 9 38
              40:     27(ptr) AccessChain 23 25 39
              41:    7(fvec4) Load 40
              42:    7(fvec4) Load 11
              43:    7(fvec4) VectorShuffle 42 42 2 2 2 2
              44:    7(fvec4) FMul 41 43
              45:    7(fvec4) Load 9
              46:    7(fvec4) FAdd 44 45
                              Store 9 46
              48:    7(fvec4) Load 9
              50:     27(ptr) AccessChain 23 25 49
              51:    7(fvec4) Load 50
              52:    7(fvec4) FAdd 48 51
                              Store 47 52
              54:     27(ptr) AccessChain 23 25 49
              55:    7(fvec4) Load 54
              56:   53(fvec3) VectorShuffle 55 55 0 1 2
              57:    7(fvec4) Load 11
              58:   53(fvec3) VectorShuffle 57 57 3 3 3
              59:   53(fvec3) FMul 56 58
              60:    7(fvec4) Load 9
              61:   53(fvec3) VectorShuffle 60 60 0 1 2
              62:   53(fvec3) FAdd 59 61
              63:    7(fvec4) Load 9
              64:    7(fvec4) VectorShuffle 63 62 4 5 6 3
                              Store 9 64
              66:    7(fvec4) Load 47
              67:    7(fvec4) VectorShuffle 66 66 1 1 1 1
              69:     27(ptr) AccessChain 23 68 26
              70:    7(fvec4) Load 69
              71:    7(fvec4) FMul 67 70
                              Store 65 71
              72:     27(ptr) AccessChain 23 68 31
              73:    7(fvec4) Load 72
              74:    7(fvec4) Load 47
              75:    7(fvec4) VectorShuffle 74 74 0 0 0 0
              76:    7(fvec4) FMul 73 75
              77:    7(fvec4) Load 65
              78:    7(fvec4) FAdd 76 77
                              Store 65 78
              79:     27(ptr) AccessChain 23 68 39
              80:    7(fvec4) Load 79
              81:    7(fvec4) Load 47
              82:    7(fvec4) VectorShuffle 81 81 2 2 2 2
              83:    7(fvec4) FMul 80 82
              84:    7(fvec4) Load 65
              85:    7(fvec4) FAdd 83 84
                              Store 65 85
              91:     27(ptr) AccessChain 23 68 49
              92:    7(fvec4) Load 91
              93:    7(fvec4) Load 47
              94:    7(fvec4) VectorShuffle 93 93 3 3 3 3
              95:    7(fvec4) FMul 92 94
              96:    7(fvec4) Load 65
              97:    7(fvec4) FAdd 95 96
              99:     98(ptr) AccessChain 90 31
                              Store 99 97
             104:    7(fvec4) Load 103
             105:  100(fvec2) VectorShuffle 104 104 0 1
             107:     27(ptr) AccessChain 23 106
             108:    7(fvec4) Load 107
             109:  100(fvec2) VectorShuffle 108 108 0 1
             110:  100(fvec2) FMul 105 109
             111:     27(ptr) AccessChain 23 106
             112:    7(fvec4) Load 111
             113:  100(fvec2) VectorShuffle 112 112 2 3
             114:  100(fvec2) FAdd 110 113
                              Store 102 114
                              Store 115 117
             120:   53(fvec3) Load 119
             122:     27(ptr) AccessChain 23 121 31
             123:    7(fvec4) Load 122
             124:   53(fvec3) VectorShuffle 123 123 0 1 2
             125:    6(float) Dot 120 124
             128:    127(ptr) AccessChain 47 126
                              Store 128 125
             129:   53(fvec3) Load 119
             130:     27(ptr) AccessChain 23 121 26
             131:    7(fvec4) Load 130
             132:   53(fvec3) VectorShuffle 131 131 0 1 2
             133:    6(float) Dot 129 132
             134:    127(ptr) AccessChain 47 86
                              Store 134 133
             135:   53(fvec3) Load 119
             136:     27(ptr) AccessChain 23 121 39
             137:    7(fvec4) Load 136
             138:   53(fvec3) VectorShuffle 137 137 0 1 2
             139:    6(float) Dot 135 138
             141:    127(ptr) AccessChain 47 140
                              Store 141 139
             143:    7(fvec4) Load 47
             144:   53(fvec3) VectorShuffle 143 143 0 1 2
             145:    7(fvec4) Load 47
             146:   53(fvec3) VectorShuffle 145 145 0 1 2
             147:    6(float) Dot 144 146
                              Store 142 147
             148:    6(float) Load 142
             149:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 148
                              Store 142 149
             150:    6(float) Load 142
             151:   53(fvec3) CompositeConstruct 150 150 150
             152:    7(fvec4) Load 47
             153:   53(fvec3) VectorShuffle 152 152 0 1 2
             154:   53(fvec3) FMul 151 153
             155:    7(fvec4) Load 47
             156:    7(fvec4) VectorShuffle 155 154 4 5 6 3
                              Store 47 156
             159:    7(fvec4) Load 47
             160:   53(fvec3) VectorShuffle 159 159 0 1 2
                              Store 158 160
             162:    7(fvec4) Load 9
             163:   53(fvec3) VectorShuffle 162 162 0 1 2
                              Store 161 163
             164:    7(fvec4) Load 9
             165:    7(fvec4) VectorShuffle 164 164 0 0 0 0
             166:    7(fvec4) FNegate 165
             167:     27(ptr) AccessChain 23 31
             168:    7(fvec4) Load 167
             169:    7(fvec4) FAdd 166 168
                              Store 65 169
             171:    7(fvec4) Load 9
             172:    7(fvec4) VectorShuffle 171 171 1 1 1 1
             173:    7(fvec4) FNegate 172
             174:     27(ptr) AccessChain 23 26
             175:    7(fvec4) Load 174
             176:    7(fvec4) FAdd 173 175
                              Store 170 176
             177:    7(fvec4) Load 9
             178:    7(fvec4) VectorShuffle 177 177 2 2 2 2
             179:    7(fvec4) FNegate 178
             180:     27(ptr) AccessChain 23 39
             181:    7(fvec4) Load 180
             182:    7(fvec4) FAdd 179 181
                              Store 9 182
             184:    7(fvec4) Load 47
             185:    7(fvec4) VectorShuffle 184 184 1 1 1 1
             186:    7(fvec4) Load 170
             187:    7(fvec4) FMul 185 186
                              Store 183 187
             188:    7(fvec4) Load 170
             189:    7(fvec4) Load 170
             190:    7(fvec4) FMul 188 189
                              Store 170 190
             191:    7(fvec4) Load 65
             192:    7(fvec4) Load 65
             193:    7(fvec4) FMul 191 192
             194:    7(fvec4) Load 170
             195:    7(fvec4) FAdd 193 194
                              Store 170 195
             196:    7(fvec4) Load 65
             197:    7(fvec4) Load 47
             198:    7(fvec4) VectorShuffle 197 197 0 0 0 0
             199:    7(fvec4) FMul 196 198
             200:    7(fvec4) Load 183
             201:    7(fvec4) FAdd 199 200
                              Store 65 201
             202:    7(fvec4) Load 9
             203:    7(fvec4) Load 47
             204:    7(fvec4) VectorShuffle 203 203 2 2 2 2
             205:    7(fvec4) FMul 202 204
             206:    7(fvec4) Load 65
             207:    7(fvec4) FAdd 205 206
                              Store 65 207
             208:    7(fvec4) Load 9
             209:    7(fvec4) Load 9
             210:    7(fvec4) FMul 208 209
             211:    7(fvec4) Load 170
             212:    7(fvec4) FAdd 210 211
                              Store 9 212
             213:    7(fvec4) Load 9
             216:    7(fvec4) ExtInst 1(GLSL.std.450) 40(FMax) 213 215
                              Store 9 216
             217:    7(fvec4) Load 9
             218:    7(fvec4) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 217
                              Store 170 218
             219:    7(fvec4) Load 9
             220:     27(ptr) AccessChain 23 49
             221:    7(fvec4) Load 220
             222:    7(fvec4) FMul 219 221
             225:    7(fvec4) FAdd 222 224
                              Store 9 225
             226:    7(fvec4) Load 9
             227:    7(fvec4) FDiv 224 226
                              Store 9 227
             228:    7(fvec4) Load 65
             229:    7(fvec4) Load 170
             230:    7(fvec4) FMul 228 229
                              Store 65 230
             231:    7(fvec4) Load 65
             233:    7(fvec4) ExtInst 1(GLSL.std.450) 40(FMax) 231 232
                              Store 65 233
             234:    7(fvec4) Load 9
             235:    7(fvec4) Load 65
             236:    7(fvec4) FMul 234 235
                              Store 9 236
             237:    7(fvec4) Load 9
             238:   53(fvec3) VectorShuffle 237 237 1 1 1
             240:     27(ptr) AccessChain 23 239 26
             241:    7(fvec4) Load 240
             242:   53(fvec3) VectorShuffle 241 241 0 1 2
             243:   53(fvec3) FMul 238 242
             244:    7(fvec4) Load 65
             245:    7(fvec4) VectorShuffle 244 243 4 5 6 3
                              Store 65 245
             246:     27(ptr) AccessChain 23 239 31
             247:    7(fvec4) Load 246
             248:   53(fvec3) VectorShuffle 247 247 0 1 2
             249:    7(fvec4) Load 9
             250:   53(fvec3) VectorShuffle 249 249 0 0 0
             251:   53(fvec3) FMul 248 250
             252:    7(fvec4) Load 65
             253:   53(fvec3) VectorShuffle 252 252 0 1 2
             254:   53(fvec3) FAdd 251 253
             255:    7(fvec4) Load 65
             256:    7(fvec4) VectorShuffle 255 254 4 5 6 3
                              Store 65 256
             257:     27(ptr) AccessChain 23 239 39
             258:    7(fvec4) Load 257
             259:   53(fvec3) VectorShuffle 258 258 0 1 2
             260:    7(fvec4) Load 9
             261:   53(fvec3) VectorShuffle 260 260 2 2 2
             262:   53(fvec3) FMul 259 261
             263:    7(fvec4) Load 65
             264:   53(fvec3) VectorShuffle 263 263 0 1 2
             265:   53(fvec3) FAdd 262 264
             266:    7(fvec4) Load 9
             267:    7(fvec4) VectorShuffle 266 265 4 5 6 3
                              Store 9 267
             268:     27(ptr) AccessChain 23 239 49
             269:    7(fvec4) Load 268
             270:   53(fvec3) VectorShuffle 269 269 0 1 2
             271:    7(fvec4) Load 9
             272:   53(fvec3) VectorShuffle 271 271 3 3 3
             273:   53(fvec3) FMul 270 272
             274:    7(fvec4) Load 9
             275:   53(fvec3) VectorShuffle 274 274 0 1 2
             276:   53(fvec3) FAdd 273 275
             277:    7(fvec4) Load 9
             278:    7(fvec4) VectorShuffle 277 276 4 5 6 3
                              Store 9 278
             281:    127(ptr) AccessChain 47 86
             282:    6(float) Load 281
             283:    127(ptr) AccessChain 47 86
             284:    6(float) Load 283
             285:    6(float) FMul 282 284
             286:    127(ptr) AccessChain 280 126
                              Store 286 285
             287:    127(ptr) AccessChain 47 126
             288:    6(float) Load 287
             289:    127(ptr) AccessChain 47 126
             290:    6(float) Load 289
             291:    6(float) FMul 288 290
             292:    127(ptr) AccessChain 280 126
             293:    6(float) Load 292
             294:    6(float) FNegate 293
             295:    6(float) FAdd 291 294
             296:    127(ptr) AccessChain 280 126
                              Store 296 295
             298:    7(fvec4) Load 47
             299:    7(fvec4) VectorShuffle 298 298 1 2 2 0
             300:    7(fvec4) Load 47
             301:    7(fvec4) VectorShuffle 300 300 0 1 2 2
             302:    7(fvec4) FMul 299 301
                              Store 297 302
             305:     27(ptr) AccessChain 23 304
             306:    7(fvec4) Load 305
             307:    7(fvec4) Load 297
             308:    6(float) Dot 306 307
             309:    127(ptr) AccessChain 303 126
                              Store 309 308
             311:     27(ptr) AccessChain 23 310
             312:    7(fvec4) Load 311
             313:    7(fvec4) Load 297
             314:    6(float) Dot 312 313
             315:    127(ptr) AccessChain 303 86
                              Store 315 314
             317:     27(ptr) AccessChain 23 316
             318:    7(fvec4) Load 317
             319:    7(fvec4) Load 297
             320:    6(float) Dot 318 319
             321:    127(ptr) AccessChain 303 140
                              Store 321 320
             323:     27(ptr) AccessChain 23 322
             324:    7(fvec4) Load 323
             325:   53(fvec3) VectorShuffle 324 324 0 1 2
             326:   53(fvec3) Load 280
             327:   53(fvec3) VectorShuffle 326 326 0 0 0
             328:   53(fvec3) FMul 325 327
             329:   53(fvec3) Load 303
             330:   53(fvec3) FAdd 328 329
                              Store 280 330
             332:    127(ptr) AccessChain 47 331
                              Store 332 223
             334:     27(ptr) AccessChain 23 333
             335:    7(fvec4) Load 334
             336:    7(fvec4) Load 47
             337:    6(float) Dot 335 336
             338:    127(ptr) AccessChain 303 126
                              Store 338 337
             340:     27(ptr) AccessChain 23 339
             341:    7(fvec4) Load 340
             342:    7(fvec4) Load 47
             343:    6(float) Dot 341 342
             344:    127(ptr) AccessChain 303 86
                              Store 344 343
             346:     27(ptr) AccessChain 23 345
             347:    7(fvec4) Load 346
             348:    7(fvec4) Load 47
             349:    6(float) Dot 347 348
             350:    127(ptr) AccessChain 303 140
                              Store 350 349
             351:   53(fvec3) Load 280
             352:   53(fvec3) Load 303
             353:   53(fvec3) FAdd 351 352
                              Store 280 353
             354:   53(fvec3) Load 280
             356:   53(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 354 355
                              Store 280 356
             357:   53(fvec3) Load 280
             358:   53(fvec3) ExtInst 1(GLSL.std.450) 30(Log2) 357
             359:    7(fvec4) Load 47
             360:    7(fvec4) VectorShuffle 359 358 4 5 6 3
                              Store 47 360
             361:    7(fvec4) Load 47
             362:   53(fvec3) VectorShuffle 361 361 0 1 2
             365:   53(fvec3) FMul 362 364
             366:    7(fvec4) Load 47
             367:    7(fvec4) VectorShuffle 366 365 4 5 6 3
                              Store 47 367
             368:    7(fvec4) Load 47
             369:   53(fvec3) VectorShuffle 368 368 0 1 2
             370:   53(fvec3) ExtInst 1(GLSL.std.450) 29(Exp2) 369
             371:    7(fvec4) Load 47
             372:    7(fvec4) VectorShuffle 371 370 4 5 6 3
                              Store 47 372
             373:    7(fvec4) Load 47
             374:   53(fvec3) VectorShuffle 373 373 0 1 2
             377:   53(fvec3) FMul 374 376
             380:   53(fvec3) FAdd 377 379
             381:    7(fvec4) Load 47
             382:    7(fvec4) VectorShuffle 381 380 4 5 6 3
                              Store 47 382
             383:    7(fvec4) Load 47
             384:   53(fvec3) VectorShuffle 383 383 0 1 2
             385:   53(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 384 355
             386:    7(fvec4) Load 47
             387:    7(fvec4) VectorShuffle 386 385 4 5 6 3
                              Store 47 387
             389:    7(fvec4) Load 9
             390:   53(fvec3) VectorShuffle 389 389 0 1 2
             391:    7(fvec4) Load 47
             392:   53(fvec3) VectorShuffle 391 391 0 1 2
             393:   53(fvec3) FAdd 390 392
                              Store 388 393
             395:    394(ptr) AccessChain 90 31 86
             396:    6(float) Load 395
             397:    6(float) FNegate 396
             398:    394(ptr) AccessChain 90 31 86
                              Store 398 397
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 218

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 63 189 202 206
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 0
                              Decorate 21 RelaxedPrecision
                              Decorate 22 RelaxedPrecision
                              Decorate 23 RelaxedPrecision
                              Decorate 26 ArrayStride 16
                              MemberDecorate 27 0 RelaxedPrecision
                              MemberDecorate 27 0 Offset 0
                              MemberDecorate 27 1 RelaxedPrecision
                              MemberDecorate 27 1 Offset 16
                              MemberDecorate 27 2 Offset 32
                              MemberDecorate 27 3 Offset 48
                              MemberDecorate 27 4 Offset 112
                              MemberDecorate 27 5 Offset 128
                              MemberDecorate 27 6 RelaxedPrecision
                              MemberDecorate 27 6 Offset 144
                              MemberDecorate 27 7 RelaxedPrecision
                              MemberDecorate 27 7 Offset 160
                              Decorate 27 Block
                              Decorate 29 DescriptorSet 1
                              Decorate 29 Binding 0
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 36 RelaxedPrecision
                              Decorate 53 SpecId 0
                              Decorate 63 Location 2
                              Decorate 157 DescriptorSet 0
                              Decorate 157 Binding 1
                              Decorate 162 RelaxedPrecision
                              Decorate 170 RelaxedPrecision
                              Decorate 171 RelaxedPrecision
                              Decorate 173 RelaxedPrecision
                              Decorate 174 RelaxedPrecision
                              Decorate 177 RelaxedPrecision
                              Decorate 179 RelaxedPrecision
                              Decorate 181 RelaxedPrecision
                              Decorate 182 RelaxedPrecision
                              Decorate 185 RelaxedPrecision
                              Decorate 186 RelaxedPrecision
                              Decorate 187 RelaxedPrecision
                              Decorate 188 RelaxedPrecision
                              Decorate 189 RelaxedPrecision
                              Decorate 189 Location 1
                              Decorate 190 RelaxedPrecision
                              Decorate 192 RelaxedPrecision
                              Decorate 193 RelaxedPrecision
                              Decorate 194 RelaxedPrecision
                              Decorate 195 RelaxedPrecision
                              Decorate 196 RelaxedPrecision
                              Decorate 197 RelaxedPrecision
                              Decorate 198 RelaxedPrecision
                              Decorate 199 RelaxedPrecision
                              Decorate 200 RelaxedPrecision
                              Decorate 201 RelaxedPrecision
                              Decorate 202 RelaxedPrecision
                              Decorate 202 Location 3
                              Decorate 203 RelaxedPrecision
                              Decorate 204 RelaxedPrecision
                              Decorate 206 RelaxedPrecision
                              Decorate 206 Location 0
                              Decorate 207 RelaxedPrecision
                              Decorate 208 RelaxedPrecision
                              Decorate 209 RelaxedPrecision
                              Decorate 210 RelaxedPrecision
                              Decorate 211 RelaxedPrecision
                              Decorate 212 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              19:             TypeVector 6(float) 4
              22:      8(ptr) Variable Private
              24:             TypeInt 32 0
              25:     24(int) Constant 4
              26:             TypeArray 19(fvec4) 25
              27:             TypeStruct 19(fvec4) 19(fvec4) 19(fvec4) 26 7(fvec3) 7(fvec3) 19(fvec4) 19(fvec4)
              28:             TypePointer Uniform 27(struct)
              29:     28(ptr) Variable Uniform
              30:             TypeInt 32 1
              31:     30(int) Constant 7
              32:             TypePointer Uniform 19(fvec4)
              37:             TypeBool
              38:             TypePointer Private 37(bool)
              39:     38(ptr) Variable Private
              40:     30(int) Constant 2
              41:     24(int) Constant 0
              42:             TypePointer Uniform 6(float)
              45:    6(float) Constant 1065353216
              47:    37(bool) ConstantFalse
              53:    37(bool) SpecConstantFalse
              56:     24(int) Constant 1
              60:             TypePointer Private 19(fvec4)
              61:     60(ptr) Variable Private
              62:             TypePointer Input 7(fvec3)
              63:     62(ptr) Variable Input
              66:     30(int) Constant 3
              67:     30(int) Constant 1
              74:     30(int) Constant 0
             105:             TypePointer Function 7(fvec3)
             119:     30(int) Constant 5
             120:             TypePointer Uniform 7(fvec3)
             129:     30(int) Constant 4
             135:             TypePointer Private 6(float)
             136:    135(ptr) Variable Private
             139:    6(float) Constant 1048576000
             141:    6(float) Constant 1061158912
             143:    135(ptr) Variable Private
             144:     24(int) Constant 2
             147:    6(float) Constant 1056964608
             154:             TypeImage 6(float) 3D sampled format:Unknown
             155:             TypeSampledImage 154
             156:             TypePointer UniformConstant 155
             157:    156(ptr) Variable UniformConstant
             162:     60(ptr) Variable Private
             168:     24(int) Constant 3
             170:      8(ptr) Variable Private
             178:    6(float) Constant 0
             183:     30(int) Constant 6
             188:    135(ptr) Variable Private
             189:     62(ptr) Variable Input
             200:      8(ptr) Variable Private
             202:     62(ptr) Variable Input
             205:             TypePointer Output 19(fvec4)
             206:    205(ptr) Variable Output
             215:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             106:    105(ptr) Variable Function
              14:          11 Load 13
              18:   15(fvec2) Load 17
              20:   19(fvec4) ImageSampleImplicitLod 14 18
              21:    7(fvec3) VectorShuffle 20 20 0 1 2
                              Store 9 21
              23:    7(fvec3) Load 9
              33:     32(ptr) AccessChain 29 31
              34:   19(fvec4) Load 33
              35:    7(fvec3) VectorShuffle 34 34 0 1 2
              36:    7(fvec3) FMul 23 35
                              Store 22 36
              43:     42(ptr) AccessChain 29 40 41
              44:    6(float) Load 43
              46:    37(bool) FOrdEqual 44 45
                              Store 39 46
                              SelectionMerge 49 None
                              BranchConditional 47 48 49
              48:               Label
              50:    37(bool)   Load 39
                                SelectionMerge 52 None
                                BranchConditional 50 51 52
              51:                 Label
                                  Branch 52
              52:               Label
                                Branch 49
              49:             Label
                              SelectionMerge 55 None
                              BranchConditional 53 54 164
              54:               Label
              57:     42(ptr)   AccessChain 29 40 56
              58:    6(float)   Load 57
              59:    37(bool)   FOrdEqual 58 45
                                Store 39 59
              64:    7(fvec3)   Load 63
              65:    7(fvec3)   VectorShuffle 64 64 1 1 1
              68:     32(ptr)   AccessChain 29 66 67
              69:   19(fvec4)   Load 68
              70:    7(fvec3)   VectorShuffle 69 69 0 1 2
              71:    7(fvec3)   FMul 65 70
              72:   19(fvec4)   Load 61
              73:   19(fvec4)   VectorShuffle 72 71 4 5 6 3
                                Store 61 73
              75:     32(ptr)   AccessChain 29 66 74
              76:   19(fvec4)   Load 75
              77:    7(fvec3)   VectorShuffle 76 76 0 1 2
              78:    7(fvec3)   Load 63
              79:    7(fvec3)   VectorShuffle 78 78 0 0 0
              80:    7(fvec3)   FMul 77 79
              81:   19(fvec4)   Load 61
              82:    7(fvec3)   VectorShuffle 81 81 0 1 2
              83:    7(fvec3)   FAdd 80 82
              84:   19(fvec4)   Load 61
              85:   19(fvec4)   VectorShuffle 84 83 4 5 6 3
                                Store 61 85
              86:     32(ptr)   AccessChain 29 66 40
              87:   19(fvec4)   Load 86
              88:    7(fvec3)   VectorShuffle 87 87 0 1 2
              89:    7(fvec3)   Load 63
              90:    7(fvec3)   VectorShuffle 89 89 2 2 2
              91:    7(fvec3)   FMul 88 90
              92:   19(fvec4)   Load 61
              93:    7(fvec3)   VectorShuffle 92 92 0 1 2
              94:    7(fvec3)   FAdd 91 93
              95:   19(fvec4)   Load 61
              96:   19(fvec4)   VectorShuffle 95 94 4 5 6 3
                                Store 61 96
              97:   19(fvec4)   Load 61
              98:    7(fvec3)   VectorShuffle 97 97 0 1 2
              99:     32(ptr)   AccessChain 29 66 66
             100:   19(fvec4)   Load 99
             101:    7(fvec3)   VectorShuffle 100 100 0 1 2
             102:    7(fvec3)   FAdd 98 101
             103:   19(fvec4)   Load 61
             104:   19(fvec4)   VectorShuffle 103 102 4 5 6 3
                                Store 61 104
             107:    37(bool)   Load 39
                                SelectionMerge 109 None
                                BranchConditional 107 108 112
             108:                 Label
             110:   19(fvec4)     Load 61
             111:    7(fvec3)     VectorShuffle 110 110 0 1 2
                                  Store 106 111
                                  Branch 109
             112:                 Label
             113:    7(fvec3)     Load 63
                                  Store 106 113
                                  Branch 109
             109:               Label
             114:    7(fvec3)   Load 106
             115:   19(fvec4)   Load 61
             116:   19(fvec4)   VectorShuffle 115 114 4 5 6 3
                                Store 61 116
             117:   19(fvec4)   Load 61
             118:    7(fvec3)   VectorShuffle 117 117 0 1 2
             121:    120(ptr)   AccessChain 29 119
             122:    7(fvec3)   Load 121
             123:    7(fvec3)   FNegate 122
             124:    7(fvec3)   FAdd 118 123
             125:   19(fvec4)   Load 61
             126:   19(fvec4)   VectorShuffle 125 124 4 5 6 3
                                Store 61 126
             127:   19(fvec4)   Load 61
             128:    7(fvec3)   VectorShuffle 127 127 0 1 2
             130:    120(ptr)   AccessChain 29 129
             131:    7(fvec3)   Load 130
             132:    7(fvec3)   FMul 128 131
             133:   19(fvec4)   Load 61
             134:   19(fvec4)   VectorShuffle 133 132 0 4 5 6
                                Store 61 134
             137:    135(ptr)   AccessChain 61 56
             138:    6(float)   Load 137
             140:    6(float)   FMul 138 139
             142:    6(float)   FAdd 140 141
                                Store 136 142
             145:     42(ptr)   AccessChain 29 40 144
             146:    6(float)   Load 145
             148:    6(float)   FMul 146 147
             149:    6(float)   FAdd 148 141
                                Store 143 149
             150:    6(float)   Load 136
             151:    6(float)   Load 143
             152:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 150 151
             153:    135(ptr)   AccessChain 61 41
                                Store 153 152
             158:         155   Load 157
             159:   19(fvec4)   Load 61
             160:    7(fvec3)   VectorShuffle 159 159 0 2 3
             161:   19(fvec4)   ImageSampleImplicitLod 158 160
                                Store 61 161
             163:   19(fvec4)   Load 61
                                Store 162 163
                                Branch 55
             164:               Label
             165:    135(ptr)   AccessChain 162 41
                                Store 165 45
             166:    135(ptr)   AccessChain 162 56
                                Store 166 45
             167:    135(ptr)   AccessChain 162 144
                                Store 167 45
             169:    135(ptr)   AccessChain 162 168
                                Store 169 45
                                Branch 55
              55:             Label
             171:   19(fvec4) Load 162
             172:     32(ptr) AccessChain 29 67
             173:   19(fvec4) Load 172
             174:    6(float) Dot 171 173
             175:    135(ptr) AccessChain 170 41
                              Store 175 174
             176:    135(ptr) AccessChain 170 41
             177:    6(float) Load 176
             179:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 177 178 45
             180:    135(ptr) AccessChain 170 41
                              Store 180 179
             181:    7(fvec3) Load 170
             182:    7(fvec3) VectorShuffle 181 181 0 0 0
             184:     32(ptr) AccessChain 29 183
             185:   19(fvec4) Load 184
             186:    7(fvec3) VectorShuffle 185 185 0 1 2
             187:    7(fvec3) FMul 182 186
                              Store 170 187
             190:    7(fvec3) Load 189
             191:     32(ptr) AccessChain 29 74
             192:   19(fvec4) Load 191
             193:    7(fvec3) VectorShuffle 192 192 0 1 2
             194:    6(float) Dot 190 193
                              Store 188 194
             195:    6(float) Load 188
             196:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 195 178
                              Store 188 196
             197:    7(fvec3) Load 22
             198:    7(fvec3) Load 170
             199:    7(fvec3) FMul 197 198
                              Store 170 199
             201:    7(fvec3) Load 22
             203:    7(fvec3) Load 202
             204:    7(fvec3) FMul 201 203
                              Store 200 204
             207:    7(fvec3) Load 170
             208:    6(float) Load 188
             209:    7(fvec3) CompositeConstruct 208 208 208
             210:    7(fvec3) FMul 207 209
             211:    7(fvec3) Load 200
             212:    7(fvec3) FAdd 210 211
             213:   19(fvec4) Load 206
             214:   19(fvec4) VectorShuffle 213 212 4 5 6 3
                              Store 206 214
             216:    215(ptr) AccessChain 206 168
                              Store 216 45
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL SHADOWS_SCREEN VERTEXLIGHT_ON 
-- Vertex shader for "d3d9":
// Stats: 65 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 8
Matrix4x4 unity_ObjectToWorld at 4
Matrix4x3 unity_WorldToObject at 12
Vector4 _MainTex_ST at 24
Vector4 _ProjectionParams at 15
Vector4 unity_4LightAtten0 at 19
Vector4 unity_4LightPosX0 at 16
Vector4 unity_4LightPosY0 at 17
Vector4 unity_4LightPosZ0 at 18
Vector4 unity_LightColor[4] at 0
Vector4 unity_SHBb at 22
Vector4 unity_SHBg at 21
Vector4 unity_SHBr at 20
Vector4 unity_SHC at 23

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   float4 _ProjectionParams;
//   float4 unity_4LightAtten0;
//   float4 unity_4LightPosX0;
//   float4 unity_4LightPosY0;
//   float4 unity_4LightPosZ0;
//   float4 unity_LightColor[8];
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   float4 unity_SHBb;
//   float4 unity_SHBg;
//   float4 unity_SHBr;
//   float4 unity_SHC;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_LightColor    c0       4
//   unity_ObjectToWorld c4       4
//   unity_MatrixVP      c8       4
//   unity_WorldToObject c12      3
//   _ProjectionParams   c15      1
//   unity_4LightPosX0   c16      1
//   unity_4LightPosY0   c17      1
//   unity_4LightPosZ0   c18      1
//   unity_4LightAtten0  c19      1
//   unity_SHBr          c20      1
//   unity_SHBg          c21      1
//   unity_SHBb          c22      1
//   unity_SHC           c23      1
//   _MainTex_ST         c24      1
//

    vs_3_0
    def c25, 1, 0, 9.99999997e-007, 0.0125228781
    def c26, 0.305306017, 0.682171106, 0.5, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4.xyz
    dcl_texcoord4 o5
    dcl_texcoord6 o6
    mad o1.xy, v2, c24, c24.zwzw
    dp4 r0.x, c4, v0
    add r1, -r0.x, c16
    dp4 r0.y, c5, v0
    add r2, -r0.y, c17
    mul r3.xyz, c13, v1.y
    mad r3.xyz, v1.x, c12, r3
    mad r3.xyz, v1.z, c14, r3
    nrm r4.xyz, r3
    mul r3, r2, r4.y
    mul r2, r2, r2
    mad r2, r1, r1, r2
    mad r1, r1, r4.x, r3
    dp4 r0.z, c6, v0
    add r3, -r0.z, c18
    mov o3.xyz, r0
    mad r0, r3, r4.z, r1
    mad r1, r3, r3, r2
    max r1, r1, c25.z
    rsq r2.x, r1.x
    rsq r2.y, r1.y
    rsq r2.z, r1.z
    rsq r2.w, r1.w
    mov r3.x, c25.x
    mad r1, r1, c19, r3.x
    mul r0, r0, r2
    max r0, r0, c25.y
    rcp r2.x, r1.x
    rcp r2.y, r1.y
    rcp r2.z, r1.z
    rcp r2.w, r1.w
    mul r0, r0, r2
    mul r1.xyz, r0.y, c1
    mad r1.xyz, c0, r0.x, r1
    mad r0.xyz, c2, r0.z, r1
    mad r0.xyz, c3, r0.w, r0
    mad r1.xyz, r0, c26.x, c26.y
    mad r1.xyz, r0, r1, c25.w
    mul r0.w, r4.y, r4.y
    mad r0.w, r4.x, r4.x, -r0.w
    mul r2, r4.yzzx, r4.xyzz
    mov o2.xyz, r4
    dp4 r3.x, c20, r2
    dp4 r3.y, c21, r2
    dp4 r3.z, c22, r2
    mad r2.xyz, c23, r0.w, r3
    mad o4.xyz, r0, r1, r2
    mad r0, v0.xyzx, c25.xxxy, c25.yyyx
    dp4 r1.x, c4, r0
    dp4 r1.y, c5, r0
    dp4 r1.z, c6, r0
    dp4 r1.w, c7, r0
    dp4 r0.x, c8, r1
    dp4 r0.w, c11, r1
    mul r2.xz, r0.xyww, c26.z
    dp4 r0.y, c9, r1
    dp4 r0.z, c10, r1
    mul r1.x, r0.y, c15.x
    mov r5, r0
    mov o5.zw, r0
    mul r2.w, r1.x, c26.z
    add o5.xy, r2.z, r2.xwzw
    mov o6, c25.y
    mad o0.xy, r5.w, c255, r5
    mov o0.zw, r5

// approximately 67 instruction slots used


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "d3d11":
// Stats: 50 math, 6 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 2 {
  Vector4 unity_4LightPosX0 at 32
  Vector4 unity_4LightPosY0 at 48
  Vector4 unity_4LightPosZ0 at 64
  Vector4 unity_4LightAtten0 at 80
  Vector4 unity_LightColor[8] at 96
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 3 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 4 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[45], immediateIndexed
      dcl_constantbuffer CB3[7], immediateIndexed
      dcl_constantbuffer CB4[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_output o5.xyzw
      dcl_output o6.xyzw
      dcl_temps 6
   0: mul r0.xyzw, v0.yyyy, cb3[1].xyzw
   1: mad r0.xyzw, cb3[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb3[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb3[3].xyzw
   4: mad r0.xyz, cb3[3].xyzx, v0.wwww, r0.xyzx
   5: mul r2.xyzw, r1.yyyy, cb4[18].xyzw
   6: mad r2.xyzw, cb4[17].xyzw, r1.xxxx, r2.xyzw
   7: mad r2.xyzw, cb4[19].xyzw, r1.zzzz, r2.xyzw
   8: mad r1.xyzw, cb4[20].xyzw, r1.wwww, r2.xyzw
   9: mov o0.xyzw, r1.xyzw
  10: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  11: dp3 r2.x, v2.xyzx, cb3[4].xyzx
  12: dp3 r2.y, v2.xyzx, cb3[5].xyzx
  13: dp3 r2.z, v2.xyzx, cb3[6].xyzx
  14: dp3 r0.w, r2.xyzx, r2.xyzx
  15: rsq r0.w, r0.w
  16: mul r2.xyz, r0.wwww, r2.xyzx
  17: mov o2.xyz, r2.xyzx
  18: mov o3.xyz, r0.xyzx
  19: add r3.xyzw, -r0.xxxx, cb2[2].xyzw
  20: add r4.xyzw, -r0.yyyy, cb2[3].xyzw
  21: add r0.xyzw, -r0.zzzz, cb2[4].xyzw
  22: mul r5.xyzw, r2.yyyy, r4.xyzw
  23: mul r4.xyzw, r4.xyzw, r4.xyzw
  24: mad r4.xyzw, r3.xyzw, r3.xyzw, r4.xyzw
  25: mad r3.xyzw, r3.xyzw, r2.xxxx, r5.xyzw
  26: mad r3.xyzw, r0.xyzw, r2.zzzz, r3.xyzw
  27: mad r0.xyzw, r0.xyzw, r0.xyzw, r4.xyzw
  28: max r0.xyzw, r0.xyzw, l(0.000001, 0.000001, 0.000001, 0.000001)
  29: rsq r4.xyzw, r0.xyzw
  30: mad r0.xyzw, r0.xyzw, cb2[5].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  31: div r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r0.xyzw
  32: mul r3.xyzw, r3.xyzw, r4.xyzw
  33: max r3.xyzw, r3.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  34: mul r0.xyzw, r0.xyzw, r3.xyzw
  35: mul r3.xyz, r0.yyyy, cb2[7].xyzx
  36: mad r3.xyz, cb2[6].xyzx, r0.xxxx, r3.xyzx
  37: mad r0.xyz, cb2[8].xyzx, r0.zzzz, r3.xyzx
  38: mad r0.xyz, cb2[9].xyzx, r0.wwww, r0.xyzx
  39: mad r3.xyz, r0.xyzx, l(0.305306, 0.305306, 0.305306, 0.000000), l(0.682171, 0.682171, 0.682171, 0.000000)
  40: mad r3.xyz, r0.xyzx, r3.xyzx, l(0.012523, 0.012523, 0.012523, 0.000000)
  41: mul r0.w, r2.y, r2.y
  42: mad r0.w, r2.x, r2.x, -r0.w
  43: mul r2.xyzw, r2.yzzx, r2.xyzz
  44: dp4 r4.x, cb2[41].xyzw, r2.xyzw
  45: dp4 r4.y, cb2[42].xyzw, r2.xyzw
  46: dp4 r4.z, cb2[43].xyzw, r2.xyzw
  47: mad r2.xyz, cb2[44].xyzx, r0.wwww, r4.xyzx
  48: mad o4.xyz, r0.xyzx, r3.xyzx, r2.xyzx
  49: mul r0.x, r1.y, cb1[5].x
  50: mul r0.w, r0.x, l(0.500000)
  51: mul r0.xz, r1.xxwx, l(0.500000, 0.000000, 0.500000, 0.000000)
  52: mov o5.zw, r1.zzzw
  53: add o5.xy, r0.zzzz, r0.xwxx
  54: mov o6.xyzw, l(0,0,0,0)
  55: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles":
// Stats: 30 math, 2 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6.w = 1.0;
  tmpvar_6.xyz = _glesVertex.xyz;
  tmpvar_5 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_6));
  highp vec3 tmpvar_7;
  tmpvar_7 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_glesNormal * tmpvar_8));
  worldNormal_1 = tmpvar_9;
  tmpvar_2 = worldNormal_1;
  highp vec3 lightColor0_10;
  lightColor0_10 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_11;
  lightColor1_11 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_12;
  lightColor2_12 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_13;
  lightColor3_13 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_14;
  lightAttenSq_14 = unity_4LightAtten0;
  highp vec3 normal_15;
  normal_15 = worldNormal_1;
  highp vec3 col_16;
  highp vec4 ndotl_17;
  highp vec4 lengthSq_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosX0 - tmpvar_7.x);
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_4LightPosY0 - tmpvar_7.y);
  highp vec4 tmpvar_21;
  tmpvar_21 = (unity_4LightPosZ0 - tmpvar_7.z);
  lengthSq_18 = (tmpvar_19 * tmpvar_19);
  lengthSq_18 = (lengthSq_18 + (tmpvar_20 * tmpvar_20));
  lengthSq_18 = (lengthSq_18 + (tmpvar_21 * tmpvar_21));
  highp vec4 tmpvar_22;
  tmpvar_22 = max (lengthSq_18, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_18 = tmpvar_22;
  ndotl_17 = (tmpvar_19 * normal_15.x);
  ndotl_17 = (ndotl_17 + (tmpvar_20 * normal_15.y));
  ndotl_17 = (ndotl_17 + (tmpvar_21 * normal_15.z));
  highp vec4 tmpvar_23;
  tmpvar_23 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_17 * inversesqrt(tmpvar_22)));
  ndotl_17 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24 = (tmpvar_23 * (1.0/((1.0 + 
    (tmpvar_22 * lightAttenSq_14)
  ))));
  col_16 = (lightColor0_10 * tmpvar_24.x);
  col_16 = (col_16 + (lightColor1_11 * tmpvar_24.y));
  col_16 = (col_16 + (lightColor2_12 * tmpvar_24.z));
  col_16 = (col_16 + (lightColor3_13 * tmpvar_24.w));
  tmpvar_3 = col_16;
  mediump vec3 normal_25;
  normal_25 = worldNormal_1;
  mediump vec3 ambient_26;
  mediump vec3 x1_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
  x1_27.x = dot (unity_SHBr, tmpvar_28);
  x1_27.y = dot (unity_SHBg, tmpvar_28);
  x1_27.z = dot (unity_SHBb, tmpvar_28);
  ambient_26 = ((tmpvar_3 * (
    (tmpvar_3 * ((tmpvar_3 * 0.305306) + 0.6821711))
   + 0.01252288)) + (x1_27 + (unity_SHC.xyz * 
    ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y))
  )));
  tmpvar_3 = ambient_26;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_7;
  xlv_TEXCOORD3 = ambient_26;
  xlv_TEXCOORD4 = o_29;
  xlv_TEXCOORD6 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 unity_MatrixV;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp float atten_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_7 = tmpvar_8;
  tmpvar_6 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_9;
  tmpvar_9 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  mediump float realtimeShadowAttenuation_10;
  highp vec4 v_11;
  v_11.x = unity_MatrixV[0].z;
  v_11.y = unity_MatrixV[1].z;
  v_11.z = unity_MatrixV[2].z;
  v_11.w = unity_MatrixV[3].z;
  highp vec3 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD2 - unity_ShadowFadeCenterAndType.xyz);
  mediump float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp (((
    mix (dot ((_WorldSpaceCameraPos - xlv_TEXCOORD2), v_11.xyz), sqrt(dot (tmpvar_12, tmpvar_12)), unity_ShadowFadeCenterAndType.w)
   * _LightShadowData.z) + _LightShadowData.w), 0.0, 1.0);
  tmpvar_13 = tmpvar_14;
  lowp float tmpvar_15;
  tmpvar_15 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  realtimeShadowAttenuation_10 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = clamp ((realtimeShadowAttenuation_10 + tmpvar_13), 0.0, 1.0);
  atten_5 = tmpvar_16;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_7;
  tmpvar_1 = atten_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_6;
  mediump vec3 tmpvar_18;
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_17;
  mediump vec3 x_20;
  x_20.x = dot (unity_SHAr, tmpvar_19);
  x_20.y = dot (unity_SHAg, tmpvar_19);
  x_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec3 tmpvar_21;
  tmpvar_21 = max (((1.055 * 
    pow (max (vec3(0.0, 0.0, 0.0), (xlv_TEXCOORD3 + x_20)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_6, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9.xyz * tmpvar_18) * diff_24);
  c_23.w = tmpvar_9.w;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9.xyz * tmpvar_21));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat24;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;
    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);
    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp float u_xlat10_5;
mediump float u_xlat16_17;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat5.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat5.x) + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat5.x;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat16_2.x = u_xlat0.x + u_xlat10_5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.x = min(max(u_xlat16_2.x, 0.0), 1.0);
#else
    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat16_1.xyz = vs_TEXCOORD1.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat16_1);
    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD3.xyz;
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = log2(u_xlat16_3.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz;
    u_xlat16_17 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_17 = max(u_xlat16_17, 0.0);
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_17) + u_xlat16_3.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (480 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_WorldToObject at 336
  Matrix4x4 unity_MatrixVP at 400
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 _MainTex_ST at 464
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat18;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    u_xlat2.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat2.xyz = float3(u_xlat18) * u_xlat2.xyz;
    output.TEXCOORD1.xyz = u_xlat2.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat3 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = fma(u_xlat3, u_xlat3, u_xlat4);
    u_xlat3 = fma(u_xlat3, u_xlat2.xxxx, u_xlat5);
    u_xlat3 = fma(u_xlat0, u_xlat2.zzzz, u_xlat3);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat4);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, Globals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * Globals.unity_LightColor[1].xyz;
    u_xlat3.xyz = fma(Globals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat3.xyz);
    u_xlat0.xyz = fma(Globals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat3.xyz);
    u_xlat0.xyz = fma(Globals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat3.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat3.xyz = fma(u_xlat0.xyz, u_xlat3.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = fma(u_xlat2.x, u_xlat2.x, (-u_xlat18));
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat4.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat4.z = dot(Globals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = fma(Globals.unity_SHC.xyz, float3(u_xlat18), u_xlat4.xyz);
    output.TEXCOORD3.xyz = fma(u_xlat0.xyz, u_xlat3.xyz, u_xlat2.xyz);
    u_xlat0.x = u_xlat1.y * Globals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD4.zw = u_xlat1.zw;
    output.TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
out vec4 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    vs_TEXCOORD1.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;
    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;
    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat4 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = u_xlat2.x * u_xlat2.x + (-u_xlat18);
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(unity_SHBr, u_xlat2);
    u_xlat4.y = dot(unity_SHBg, u_xlat2);
    u_xlat4.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat4.xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.zw = u_xlat1.zw;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
bool u_xlatb1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat7;
bool u_xlatb7;
float u_xlat8;
vec2 u_xlat13;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat18 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = (-u_xlat18) + u_xlat1.x;
    u_xlat18 = unity_ShadowFadeCenterAndType.w * u_xlat1.x + u_xlat18;
    u_xlat18 = u_xlat18 * _LightShadowData.z + _LightShadowData.w;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7.x = u_xlat2.y * 0.25 + 0.75;
        u_xlat13.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat13.x, u_xlat7.x);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat7.x = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat13.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat10_2 = texture(_ShadowMapTexture, u_xlat13.xy);
    u_xlat18 = u_xlat18 + u_xlat10_2.x;
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
    u_xlat7.x = min(u_xlat18, u_xlat7.x);
    u_xlat18 = (u_xlatb1) ? u_xlat7.x : u_xlat18;
    u_xlat7.xyz = vec3(u_xlat18) * _LightColor0.xyz;
    if(u_xlatb1){
        u_xlatb18 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb18)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat18 = u_xlat2.y * 0.25;
        u_xlat1.x = unity_ProbeVolumeParams.z * 0.5;
        u_xlat8 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat18 = max(u_xlat18, u_xlat1.x);
        u_xlat2.x = min(u_xlat8, u_xlat18);
        u_xlat10_3 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
        u_xlat4.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_4 = texture(unity_ProbeVolumeSH, u_xlat4.xyz);
        u_xlat2.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_2 = texture(unity_ProbeVolumeSH, u_xlat2.xyz);
        u_xlat5.xyz = vs_TEXCOORD1.xyz;
        u_xlat5.w = 1.0;
        u_xlat3.x = dot(u_xlat10_3, u_xlat5);
        u_xlat3.y = dot(u_xlat10_4, u_xlat5);
        u_xlat3.z = dot(u_xlat10_2, u_xlat5);
    } else {
        u_xlat2.xyz = vs_TEXCOORD1.xyz;
        u_xlat2.w = 1.0;
        u_xlat3.x = dot(unity_SHAr, u_xlat2);
        u_xlat3.y = dot(unity_SHAg, u_xlat2);
        u_xlat3.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat2.xyz = u_xlat3.xyz + vs_TEXCOORD3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat18 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat7.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
u_xlatb1", used in: Fragment 

Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 2D Texture "_ShadowMapTexture" to set: 0, binding: 1, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 2, used in: Fragment 

Constant Buffer "PGlobals461794415" (336 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 208
  Vector4 _Color at 320
  Vector4 _LightColor0 at 304
  Vector4 _LightShadowData at 96
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 80
  Vector3 unity_ProbeVolumeMin at 288
  Vector4 unity_ProbeVolumeParams at 192
  Vector3 unity_ProbeVolumeSizeInv at 272
  Vector4 unity_SHAb at 64
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAr at 32
  Vector4 unity_ShadowFadeCenterAndType at 112
}
Constant Buffer "VGlobals461794415" (480 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 400
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_WorldToObject at 336
  Vector4 _MainTex_ST at 464
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_LightColor[4] at 80
  Vector4 unity_SHBb at 240
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBr at 208
  Vector4 unity_SHC at 256
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 398

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 97 103 104 117 156 159 352 379 391
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              Decorate 19 ArrayStride 16
                              Decorate 20 ArrayStride 16
                              MemberDecorate 21 0 Offset 0
                              MemberDecorate 21 1 Offset 16
                              MemberDecorate 21 2 Offset 32
                              MemberDecorate 21 3 Offset 48
                              MemberDecorate 21 4 RelaxedPrecision
                              MemberDecorate 21 4 Offset 64
                              MemberDecorate 21 5 RelaxedPrecision
                              MemberDecorate 21 5 Offset 80
                              MemberDecorate 21 6 RelaxedPrecision
                              MemberDecorate 21 6 Offset 208
                              MemberDecorate 21 7 RelaxedPrecision
                              MemberDecorate 21 7 Offset 224
                              MemberDecorate 21 8 RelaxedPrecision
                              MemberDecorate 21 8 Offset 240
                              MemberDecorate 21 9 RelaxedPrecision
                              MemberDecorate 21 9 Offset 256
                              MemberDecorate 21 10 Offset 272
                              MemberDecorate 21 11 Offset 336
                              MemberDecorate 21 12 Offset 400
                              MemberDecorate 21 13 Offset 464
                              Decorate 21 Block
                              Decorate 23 DescriptorSet 1
                              Decorate 23 Binding 1
                              MemberDecorate 95 0 BuiltIn Position
                              MemberDecorate 95 1 BuiltIn PointSize
                              MemberDecorate 95 2 BuiltIn ClipDistance
                              Decorate 95 Block
                              Decorate 103 Location 0
                              Decorate 104 Location 2
                              Decorate 117 Location 1
                              Decorate 156 RelaxedPrecision
                              Decorate 156 Location 1
                              Decorate 159 Location 2
                              Decorate 221 RelaxedPrecision
                              Decorate 242 RelaxedPrecision
                              Decorate 243 RelaxedPrecision
                              Decorate 248 RelaxedPrecision
                              Decorate 249 RelaxedPrecision
                              Decorate 259 RelaxedPrecision
                              Decorate 260 RelaxedPrecision
                              Decorate 270 RelaxedPrecision
                              Decorate 271 RelaxedPrecision
                              Decorate 301 RelaxedPrecision
                              Decorate 314 RelaxedPrecision
                              Decorate 315 RelaxedPrecision
                              Decorate 318 RelaxedPrecision
                              Decorate 324 RelaxedPrecision
                              Decorate 327 RelaxedPrecision
                              Decorate 328 RelaxedPrecision
                              Decorate 329 RelaxedPrecision
                              Decorate 333 RelaxedPrecision
                              Decorate 334 RelaxedPrecision
                              Decorate 335 RelaxedPrecision
                              Decorate 339 RelaxedPrecision
                              Decorate 340 RelaxedPrecision
                              Decorate 341 RelaxedPrecision
                              Decorate 345 RelaxedPrecision
                              Decorate 346 RelaxedPrecision
                              Decorate 347 RelaxedPrecision
                              Decorate 348 RelaxedPrecision
                              Decorate 349 RelaxedPrecision
                              Decorate 350 RelaxedPrecision
                              Decorate 351 RelaxedPrecision
                              Decorate 352 RelaxedPrecision
                              Decorate 352 Location 3
                              Decorate 358 RelaxedPrecision
                              Decorate 379 Location 4
                              Decorate 391 Location 5
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 8
              16:             TypeArray 7(fvec4) 15
              17:     14(int) Constant 4
              18:             TypeArray 7(fvec4) 17
              19:             TypeArray 7(fvec4) 17
              20:             TypeArray 7(fvec4) 17
              21:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 16 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 18 19 20 7(fvec4)
              22:             TypePointer Uniform 21(struct)
              23:     22(ptr) Variable Uniform
              24:             TypeInt 32 1
              25:     24(int) Constant 10
              26:     24(int) Constant 1
              27:             TypePointer Uniform 7(fvec4)
              31:     24(int) Constant 0
              39:     24(int) Constant 2
              47:      8(ptr) Variable Private
              49:     24(int) Constant 3
              53:             TypeVector 6(float) 3
              65:      8(ptr) Variable Private
              68:     24(int) Constant 12
              93:     14(int) Constant 1
              94:             TypeArray 6(float) 93
              95:             TypeStruct 7(fvec4) 6(float) 94
              96:             TypePointer Output 95(struct)
              97:     96(ptr) Variable Output
              99:             TypePointer Output 7(fvec4)
             101:             TypeVector 6(float) 2
             102:             TypePointer Output 101(fvec2)
             103:    102(ptr) Variable Output
             104:     10(ptr) Variable Input
             107:     24(int) Constant 13
             116:             TypePointer Input 53(fvec3)
             117:    116(ptr) Variable Input
             119:     24(int) Constant 11
             124:     14(int) Constant 0
             125:             TypePointer Private 6(float)
             138:     14(int) Constant 2
             140:    125(ptr) Variable Private
             155:             TypePointer Output 53(fvec3)
             156:    155(ptr) Variable Output
             159:    155(ptr) Variable Output
             162:      8(ptr) Variable Private
             169:      8(ptr) Variable Private
             182:      8(ptr) Variable Private
             213:    6(float) Constant 897988541
             214:    7(fvec4) ConstantComposite 213 213 213 213
             219:     24(int) Constant 4
             223:    6(float) Constant 1065353216
             224:    7(fvec4) ConstantComposite 223 223 223 223
             232:    6(float) Constant 0
             233:    7(fvec4) ConstantComposite 232 232 232 232
             240:     24(int) Constant 5
             282:    6(float) Constant 1050431762
             283:   53(fvec3) ConstantComposite 282 282 282
             285:    6(float) Constant 1060020932
             286:   53(fvec3) ConstantComposite 285 285 285
             295:    6(float) Constant 1011690690
             296:   53(fvec3) ConstantComposite 295 295 295
             300:             TypePointer Private 53(fvec3)
             301:    300(ptr) Variable Private
             318:      8(ptr) Variable Private
             324:    300(ptr) Variable Private
             325:     24(int) Constant 6
             331:     24(int) Constant 7
             337:     24(int) Constant 8
             343:     24(int) Constant 9
             352:    155(ptr) Variable Output
             362:             TypePointer Uniform 6(float)
             369:    6(float) Constant 1056964608
             371:     14(int) Constant 3
             375:  101(fvec2) ConstantComposite 369 369
             379:     99(ptr) Variable Output
             391:     99(ptr) Variable Output
             392:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              28:     27(ptr) AccessChain 23 25 26
              29:    7(fvec4) Load 28
              30:    7(fvec4) FMul 13 29
                              Store 9 30
              32:     27(ptr) AccessChain 23 25 31
              33:    7(fvec4) Load 32
              34:    7(fvec4) Load 11
              35:    7(fvec4) VectorShuffle 34 34 0 0 0 0
              36:    7(fvec4) FMul 33 35
              37:    7(fvec4) Load 9
              38:    7(fvec4) FAdd 36 37
                              Store 9 38
              40:     27(ptr) AccessChain 23 25 39
              41:    7(fvec4) Load 40
              42:    7(fvec4) Load 11
              43:    7(fvec4) VectorShuffle 42 42 2 2 2 2
              44:    7(fvec4) FMul 41 43
              45:    7(fvec4) Load 9
              46:    7(fvec4) FAdd 44 45
                              Store 9 46
              48:    7(fvec4) Load 9
              50:     27(ptr) AccessChain 23 25 49
              51:    7(fvec4) Load 50
              52:    7(fvec4) FAdd 48 51
                              Store 47 52
              54:     27(ptr) AccessChain 23 25 49
              55:    7(fvec4) Load 54
              56:   53(fvec3) VectorShuffle 55 55 0 1 2
              57:    7(fvec4) Load 11
              58:   53(fvec3) VectorShuffle 57 57 3 3 3
              59:   53(fvec3) FMul 56 58
              60:    7(fvec4) Load 9
              61:   53(fvec3) VectorShuffle 60 60 0 1 2
              62:   53(fvec3) FAdd 59 61
              63:    7(fvec4) Load 9
              64:    7(fvec4) VectorShuffle 63 62 4 5 6 3
                              Store 9 64
              66:    7(fvec4) Load 47
              67:    7(fvec4) VectorShuffle 66 66 1 1 1 1
              69:     27(ptr) AccessChain 23 68 26
              70:    7(fvec4) Load 69
              71:    7(fvec4) FMul 67 70
                              Store 65 71
              72:     27(ptr) AccessChain 23 68 31
              73:    7(fvec4) Load 72
              74:    7(fvec4) Load 47
              75:    7(fvec4) VectorShuffle 74 74 0 0 0 0
              76:    7(fvec4) FMul 73 75
              77:    7(fvec4) Load 65
              78:    7(fvec4) FAdd 76 77
                              Store 65 78
              79:     27(ptr) AccessChain 23 68 39
              80:    7(fvec4) Load 79
              81:    7(fvec4) Load 47
              82:    7(fvec4) VectorShuffle 81 81 2 2 2 2
              83:    7(fvec4) FMul 80 82
              84:    7(fvec4) Load 65
              85:    7(fvec4) FAdd 83 84
                              Store 65 85
              86:     27(ptr) AccessChain 23 68 49
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 47
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 65
              92:    7(fvec4) FAdd 90 91
                              Store 47 92
              98:    7(fvec4) Load 47
             100:     99(ptr) AccessChain 97 31
                              Store 100 98
             105:    7(fvec4) Load 104
             106:  101(fvec2) VectorShuffle 105 105 0 1
             108:     27(ptr) AccessChain 23 107
             109:    7(fvec4) Load 108
             110:  101(fvec2) VectorShuffle 109 109 0 1
             111:  101(fvec2) FMul 106 110
             112:     27(ptr) AccessChain 23 107
             113:    7(fvec4) Load 112
             114:  101(fvec2) VectorShuffle 113 113 2 3
             115:  101(fvec2) FAdd 111 114
                              Store 103 115
             118:   53(fvec3) Load 117
             120:     27(ptr) AccessChain 23 119 31
             121:    7(fvec4) Load 120
             122:   53(fvec3) VectorShuffle 121 121 0 1 2
             123:    6(float) Dot 118 122
             126:    125(ptr) AccessChain 65 124
                              Store 126 123
             127:   53(fvec3) Load 117
             128:     27(ptr) AccessChain 23 119 26
             129:    7(fvec4) Load 128
             130:   53(fvec3) VectorShuffle 129 129 0 1 2
             131:    6(float) Dot 127 130
             132:    125(ptr) AccessChain 65 93
                              Store 132 131
             133:   53(fvec3) Load 117
             134:     27(ptr) AccessChain 23 119 39
             135:    7(fvec4) Load 134
             136:   53(fvec3) VectorShuffle 135 135 0 1 2
             137:    6(float) Dot 133 136
             139:    125(ptr) AccessChain 65 138
                              Store 139 137
             141:    7(fvec4) Load 65
             142:   53(fvec3) VectorShuffle 141 141 0 1 2
             143:    7(fvec4) Load 65
             144:   53(fvec3) VectorShuffle 143 143 0 1 2
             145:    6(float) Dot 142 144
                              Store 140 145
             146:    6(float) Load 140
             147:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 146
                              Store 140 147
             148:    6(float) Load 140
             149:   53(fvec3) CompositeConstruct 148 148 148
             150:    7(fvec4) Load 65
             151:   53(fvec3) VectorShuffle 150 150 0 1 2
             152:   53(fvec3) FMul 149 151
             153:    7(fvec4) Load 65
             154:    7(fvec4) VectorShuffle 153 152 4 5 6 3
                              Store 65 154
             157:    7(fvec4) Load 65
             158:   53(fvec3) VectorShuffle 157 157 0 1 2
                              Store 156 158
             160:    7(fvec4) Load 9
             161:   53(fvec3) VectorShuffle 160 160 0 1 2
                              Store 159 161
             163:    7(fvec4) Load 9
             164:    7(fvec4) VectorShuffle 163 163 0 0 0 0
             165:    7(fvec4) FNegate 164
             166:     27(ptr) AccessChain 23 26
             167:    7(fvec4) Load 166
             168:    7(fvec4) FAdd 165 167
                              Store 162 168
             170:    7(fvec4) Load 9
             171:    7(fvec4) VectorShuffle 170 170 1 1 1 1
             172:    7(fvec4) FNegate 171
             173:     27(ptr) AccessChain 23 39
             174:    7(fvec4) Load 173
             175:    7(fvec4) FAdd 172 174
                              Store 169 175
             176:    7(fvec4) Load 9
             177:    7(fvec4) VectorShuffle 176 176 2 2 2 2
             178:    7(fvec4) FNegate 177
             179:     27(ptr) AccessChain 23 49
             180:    7(fvec4) Load 179
             181:    7(fvec4) FAdd 178 180
                              Store 9 181
             183:    7(fvec4) Load 65
             184:    7(fvec4) VectorShuffle 183 183 1 1 1 1
             185:    7(fvec4) Load 169
             186:    7(fvec4) FMul 184 185
                              Store 182 186
             187:    7(fvec4) Load 169
             188:    7(fvec4) Load 169
             189:    7(fvec4) FMul 187 188
                              Store 169 189
             190:    7(fvec4) Load 162
             191:    7(fvec4) Load 162
             192:    7(fvec4) FMul 190 191
             193:    7(fvec4) Load 169
             194:    7(fvec4) FAdd 192 193
                              Store 169 194
             195:    7(fvec4) Load 162
             196:    7(fvec4) Load 65
             197:    7(fvec4) VectorShuffle 196 196 0 0 0 0
             198:    7(fvec4) FMul 195 197
             199:    7(fvec4) Load 182
             200:    7(fvec4) FAdd 198 199
                              Store 162 200
             201:    7(fvec4) Load 9
             202:    7(fvec4) Load 65
             203:    7(fvec4) VectorShuffle 202 202 2 2 2 2
             204:    7(fvec4) FMul 201 203
             205:    7(fvec4) Load 162
             206:    7(fvec4) FAdd 204 205
                              Store 162 206
             207:    7(fvec4) Load 9
             208:    7(fvec4) Load 9
             209:    7(fvec4) FMul 207 208
             210:    7(fvec4) Load 169
             211:    7(fvec4) FAdd 209 210
                              Store 9 211
             212:    7(fvec4) Load 9
             215:    7(fvec4) ExtInst 1(GLSL.std.450) 40(FMax) 212 214
                              Store 9 215
             216:    7(fvec4) Load 9
             217:    7(fvec4) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 216
                              Store 169 217
             218:    7(fvec4) Load 9
             220:     27(ptr) AccessChain 23 219
             221:    7(fvec4) Load 220
             222:    7(fvec4) FMul 218 221
             225:    7(fvec4) FAdd 222 224
                              Store 9 225
             226:    7(fvec4) Load 9
             227:    7(fvec4) FDiv 224 226
                              Store 9 227
             228:    7(fvec4) Load 162
             229:    7(fvec4) Load 169
             230:    7(fvec4) FMul 228 229
                              Store 162 230
             231:    7(fvec4) Load 162
             234:    7(fvec4) ExtInst 1(GLSL.std.450) 40(FMax) 231 233
                              Store 162 234
             235:    7(fvec4) Load 9
             236:    7(fvec4) Load 162
             237:    7(fvec4) FMul 235 236
                              Store 9 237
             238:    7(fvec4) Load 9
             239:   53(fvec3) VectorShuffle 238 238 1 1 1
             241:     27(ptr) AccessChain 23 240 26
             242:    7(fvec4) Load 241
             243:   53(fvec3) VectorShuffle 242 242 0 1 2
             244:   53(fvec3) FMul 239 243
             245:    7(fvec4) Load 162
             246:    7(fvec4) VectorShuffle 245 244 4 5 6 3
                              Store 162 246
             247:     27(ptr) AccessChain 23 240 31
             248:    7(fvec4) Load 247
             249:   53(fvec3) VectorShuffle 248 248 0 1 2
             250:    7(fvec4) Load 9
             251:   53(fvec3) VectorShuffle 250 250 0 0 0
             252:   53(fvec3) FMul 249 251
             253:    7(fvec4) Load 162
             254:   53(fvec3) VectorShuffle 253 253 0 1 2
             255:   53(fvec3) FAdd 252 254
             256:    7(fvec4) Load 162
             257:    7(fvec4) VectorShuffle 256 255 4 5 6 3
                              Store 162 257
             258:     27(ptr) AccessChain 23 240 39
             259:    7(fvec4) Load 258
             260:   53(fvec3) VectorShuffle 259 259 0 1 2
             261:    7(fvec4) Load 9
             262:   53(fvec3) VectorShuffle 261 261 2 2 2
             263:   53(fvec3) FMul 260 262
             264:    7(fvec4) Load 162
             265:   53(fvec3) VectorShuffle 264 264 0 1 2
             266:   53(fvec3) FAdd 263 265
             267:    7(fvec4) Load 9
             268:    7(fvec4) VectorShuffle 267 266 4 5 6 3
                              Store 9 268
             269:     27(ptr) AccessChain 23 240 49
             270:    7(fvec4) Load 269
             271:   53(fvec3) VectorShuffle 270 270 0 1 2
             272:    7(fvec4) Load 9
             273:   53(fvec3) VectorShuffle 272 272 3 3 3
             274:   53(fvec3) FMul 271 273
             275:    7(fvec4) Load 9
             276:   53(fvec3) VectorShuffle 275 275 0 1 2
             277:   53(fvec3) FAdd 274 276
             278:    7(fvec4) Load 9
             279:    7(fvec4) VectorShuffle 278 277 4 5 6 3
                              Store 9 279
             280:    7(fvec4) Load 9
             281:   53(fvec3) VectorShuffle 280 280 0 1 2
             284:   53(fvec3) FMul 281 283
             287:   53(fvec3) FAdd 284 286
             288:    7(fvec4) Load 162
             289:    7(fvec4) VectorShuffle 288 287 4 5 6 3
                              Store 162 289
             290:    7(fvec4) Load 9
             291:   53(fvec3) VectorShuffle 290 290 0 1 2
             292:    7(fvec4) Load 162
             293:   53(fvec3) VectorShuffle 292 292 0 1 2
             294:   53(fvec3) FMul 291 293
             297:   53(fvec3) FAdd 294 296
             298:    7(fvec4) Load 162
             299:    7(fvec4) VectorShuffle 298 297 4 5 6 3
                              Store 162 299
             302:    125(ptr) AccessChain 65 93
             303:    6(float) Load 302
             304:    125(ptr) AccessChain 65 93
             305:    6(float) Load 304
             306:    6(float) FMul 303 305
             307:    125(ptr) AccessChain 301 124
                              Store 307 306
             308:    125(ptr) AccessChain 65 124
             309:    6(float) Load 308
             310:    125(ptr) AccessChain 65 124
             311:    6(float) Load 310
             312:    6(float) FMul 309 311
             313:    125(ptr) AccessChain 301 124
             314:    6(float) Load 313
             315:    6(float) FNegate 314
             316:    6(float) FAdd 312 315
             317:    125(ptr) AccessChain 301 124
                              Store 317 316
             319:    7(fvec4) Load 65
             320:    7(fvec4) VectorShuffle 319 319 1 2 2 0
             321:    7(fvec4) Load 65
             322:    7(fvec4) VectorShuffle 321 321 0 1 2 2
             323:    7(fvec4) FMul 320 322
                              Store 318 323
             326:     27(ptr) AccessChain 23 325
             327:    7(fvec4) Load 326
             328:    7(fvec4) Load 318
             329:    6(float) Dot 327 328
             330:    125(ptr) AccessChain 324 124
                              Store 330 329
             332:     27(ptr) AccessChain 23 331
             333:    7(fvec4) Load 332
             334:    7(fvec4) Load 318
             335:    6(float) Dot 333 334
             336:    125(ptr) AccessChain 324 93
                              Store 336 335
             338:     27(ptr) AccessChain 23 337
             339:    7(fvec4) Load 338
             340:    7(fvec4) Load 318
             341:    6(float) Dot 339 340
             342:    125(ptr) AccessChain 324 138
                              Store 342 341
             344:     27(ptr) AccessChain 23 343
             345:    7(fvec4) Load 344
             346:   53(fvec3) VectorShuffle 345 345 0 1 2
             347:   53(fvec3) Load 301
             348:   53(fvec3) VectorShuffle 347 347 0 0 0
             349:   53(fvec3) FMul 346 348
             350:   53(fvec3) Load 324
             351:   53(fvec3) FAdd 349 350
                              Store 301 351
             353:    7(fvec4) Load 9
             354:   53(fvec3) VectorShuffle 353 353 0 1 2
             355:    7(fvec4) Load 162
             356:   53(fvec3) VectorShuffle 355 355 0 1 2
             357:   53(fvec3) FMul 354 356
             358:   53(fvec3) Load 301
             359:   53(fvec3) FAdd 357 358
                              Store 352 359
             360:    125(ptr) AccessChain 47 93
             361:    6(float) Load 360
             363:    362(ptr) AccessChain 23 31 124
             364:    6(float) Load 363
             365:    6(float) FMul 361 364
             366:    125(ptr) AccessChain 9 124
                              Store 366 365
             367:    125(ptr) AccessChain 9 124
             368:    6(float) Load 367
             370:    6(float) FMul 368 369
             372:    125(ptr) AccessChain 9 371
                              Store 372 370
             373:    7(fvec4) Load 47
             374:  101(fvec2) VectorShuffle 373 373 0 3
             376:  101(fvec2) FMul 374 375
             377:    7(fvec4) Load 9
             378:    7(fvec4) VectorShuffle 377 376 4 1 5 3
                              Store 9 378
             380:    7(fvec4) Load 47
             381:  101(fvec2) VectorShuffle 380 380 2 3
             382:    7(fvec4) Load 379
             383:    7(fvec4) VectorShuffle 382 381 0 1 4 5
                              Store 379 383
             384:    7(fvec4) Load 9
             385:  101(fvec2) VectorShuffle 384 384 2 2
             386:    7(fvec4) Load 9
             387:  101(fvec2) VectorShuffle 386 386 0 3
             388:  101(fvec2) FAdd 385 387
             389:    7(fvec4) Load 379
             390:    7(fvec4) VectorShuffle 389 388 4 5 2 3
                              Store 379 390
                              Store 391 233
             393:    392(ptr) AccessChain 97 31 93
             394:    6(float) Load 393
             395:    6(float) FNegate 394
             396:    392(ptr) AccessChain 97 31 93
                              Store 396 395
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 517

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 41 249 416 457 504
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 0
                              Decorate 21 RelaxedPrecision
                              Decorate 22 RelaxedPrecision
                              Decorate 23 RelaxedPrecision
                              Decorate 26 ArrayStride 16
                              Decorate 27 ArrayStride 16
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 RelaxedPrecision
                              MemberDecorate 28 1 Offset 16
                              MemberDecorate 28 2 RelaxedPrecision
                              MemberDecorate 28 2 Offset 32
                              MemberDecorate 28 3 RelaxedPrecision
                              MemberDecorate 28 3 Offset 48
                              MemberDecorate 28 4 RelaxedPrecision
                              MemberDecorate 28 4 Offset 64
                              MemberDecorate 28 5 RelaxedPrecision
                              MemberDecorate 28 5 Offset 80
                              MemberDecorate 28 6 RelaxedPrecision
                              MemberDecorate 28 6 Offset 96
                              MemberDecorate 28 7 Offset 112
                              MemberDecorate 28 8 Offset 128
                              MemberDecorate 28 9 Offset 192
                              MemberDecorate 28 10 Offset 208
                              MemberDecorate 28 11 Offset 272
                              MemberDecorate 28 12 Offset 288
                              MemberDecorate 28 13 RelaxedPrecision
                              MemberDecorate 28 13 Offset 304
                              MemberDecorate 28 14 RelaxedPrecision
                              MemberDecorate 28 14 Offset 320
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 0
                              Decorate 35 RelaxedPrecision
                              Decorate 36 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 41 Location 2
                              Decorate 111 RelaxedPrecision
                              Decorate 114 RelaxedPrecision
                              Decorate 133 SpecId 0
                              Decorate 225 DescriptorSet 0
                              Decorate 225 Binding 2
                              Decorate 230 RelaxedPrecision
                              Decorate 237 RelaxedPrecision
                              Decorate 238 RelaxedPrecision
                              Decorate 241 RelaxedPrecision
                              Decorate 242 RelaxedPrecision
                              Decorate 245 RelaxedPrecision
                              Decorate 246 RelaxedPrecision
                              Decorate 249 Location 4
                              Decorate 257 RelaxedPrecision
                              Decorate 258 RelaxedPrecision
                              Decorate 258 DescriptorSet 0
                              Decorate 258 Binding 1
                              Decorate 259 RelaxedPrecision
                              Decorate 263 RelaxedPrecision
                              Decorate 264 RelaxedPrecision
                              Decorate 266 RelaxedPrecision
                              Decorate 268 RelaxedPrecision
                              Decorate 269 RelaxedPrecision
                              Decorate 270 RelaxedPrecision
                              Decorate 272 RelaxedPrecision
                              Decorate 273 RelaxedPrecision
                              Decorate 281 RelaxedPrecision
                              Decorate 283 RelaxedPrecision
                              Decorate 284 RelaxedPrecision
                              Decorate 286 RelaxedPrecision
                              Decorate 287 RelaxedPrecision
                              Decorate 290 RelaxedPrecision
                              Decorate 291 RelaxedPrecision
                              Decorate 292 RelaxedPrecision
                              Decorate 415 RelaxedPrecision
                              Decorate 416 RelaxedPrecision
                              Decorate 416 Location 1
                              Decorate 417 RelaxedPrecision
                              Decorate 421 RelaxedPrecision
                              Decorate 423 RelaxedPrecision
                              Decorate 427 RelaxedPrecision
                              Decorate 431 RelaxedPrecision
                              Decorate 435 RelaxedPrecision
                              Decorate 436 RelaxedPrecision
                              Decorate 441 RelaxedPrecision
                              Decorate 442 RelaxedPrecision
                              Decorate 443 RelaxedPrecision
                              Decorate 446 RelaxedPrecision
                              Decorate 447 RelaxedPrecision
                              Decorate 448 RelaxedPrecision
                              Decorate 452 RelaxedPrecision
                              Decorate 453 RelaxedPrecision
                              Decorate 454 RelaxedPrecision
                              Decorate 456 RelaxedPrecision
                              Decorate 457 RelaxedPrecision
                              Decorate 457 Location 3
                              Decorate 458 RelaxedPrecision
                              Decorate 459 RelaxedPrecision
                              Decorate 462 RelaxedPrecision
                              Decorate 463 RelaxedPrecision
                              Decorate 465 RelaxedPrecision
                              Decorate 468 RelaxedPrecision
                              Decorate 469 RelaxedPrecision
                              Decorate 470 RelaxedPrecision
                              Decorate 471 RelaxedPrecision
                              Decorate 472 RelaxedPrecision
                              Decorate 475 RelaxedPrecision
                              Decorate 476 RelaxedPrecision
                              Decorate 477 RelaxedPrecision
                              Decorate 478 RelaxedPrecision
                              Decorate 481 RelaxedPrecision
                              Decorate 484 RelaxedPrecision
                              Decorate 485 RelaxedPrecision
                              Decorate 486 RelaxedPrecision
                              Decorate 487 RelaxedPrecision
                              Decorate 488 RelaxedPrecision
                              Decorate 490 RelaxedPrecision
                              Decorate 491 RelaxedPrecision
                              Decorate 492 RelaxedPrecision
                              Decorate 493 RelaxedPrecision
                              Decorate 494 RelaxedPrecision
                              Decorate 495 RelaxedPrecision
                              Decorate 496 RelaxedPrecision
                              Decorate 497 RelaxedPrecision
                              Decorate 498 RelaxedPrecision
                              Decorate 499 RelaxedPrecision
                              Decorate 500 RelaxedPrecision
                              Decorate 504 RelaxedPrecision
                              Decorate 504 Location 0
                              Decorate 505 RelaxedPrecision
                              Decorate 506 RelaxedPrecision
                              Decorate 507 RelaxedPrecision
                              Decorate 508 RelaxedPrecision
                              Decorate 509 RelaxedPrecision
                              Decorate 510 RelaxedPrecision
                              Decorate 511 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              19:             TypeVector 6(float) 4
              22:      8(ptr) Variable Private
              24:             TypeInt 32 0
              25:     24(int) Constant 4
              26:             TypeArray 19(fvec4) 25
              27:             TypeArray 19(fvec4) 25
              28:             TypeStruct 7(fvec3) 19(fvec4) 19(fvec4) 19(fvec4) 19(fvec4) 19(fvec4) 19(fvec4) 19(fvec4) 26 19(fvec4) 27 7(fvec3) 7(fvec3) 19(fvec4) 19(fvec4)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:             TypeInt 32 1
              32:     31(int) Constant 14
              33:             TypePointer Uniform 19(fvec4)
              38:             TypePointer Private 19(fvec4)
              39:     38(ptr) Variable Private
              40:             TypePointer Input 7(fvec3)
              41:     40(ptr) Variable Input
              44:     31(int) Constant 0
              45:             TypePointer Uniform 7(fvec3)
              51:     38(ptr) Variable Private
              52:     31(int) Constant 8
              53:     24(int) Constant 2
              54:             TypePointer Uniform 6(float)
              57:     24(int) Constant 0
              58:             TypePointer Private 6(float)
              60:     31(int) Constant 1
              63:     24(int) Constant 1
              65:     31(int) Constant 2
              69:     58(ptr) Variable Private
              76:     31(int) Constant 7
             100:     24(int) Constant 3
             109:     31(int) Constant 6
             117:    6(float) Constant 0
             118:    6(float) Constant 1065353216
             120:             TypeBool
             121:             TypePointer Private 120(bool)
             122:    121(ptr) Variable Private
             123:     31(int) Constant 9
             127:   120(bool) ConstantFalse
             133:   120(bool) SpecConstantFalse
             136:    121(ptr) Variable Private
             142:     31(int) Constant 10
             173:     31(int) Constant 3
             180:      8(ptr) Variable Private
             181:             TypePointer Function 7(fvec3)
             192:     31(int) Constant 12
             198:     31(int) Constant 11
             206:    6(float) Constant 1048576000
             208:    6(float) Constant 1061158912
             211:     58(ptr) Variable Private
             214:    6(float) Constant 1056964608
             222:             TypeImage 6(float) 3D sampled format:Unknown
             223:             TypeSampledImage 222
             224:             TypePointer UniformConstant 223
             225:    224(ptr) Variable UniformConstant
             230:     38(ptr) Variable Private
             237:      8(ptr) Variable Private
             239:     31(int) Constant 5
             248:             TypePointer Input 19(fvec4)
             249:    248(ptr) Variable Input
             257:     58(ptr) Variable Private
             258:     12(ptr) Variable UniformConstant
             264:     58(ptr) Variable Private
             275:             TypePointer Function 6(float)
             288:     31(int) Constant 13
             300:    121(ptr) Variable Private
             375:     38(ptr) Variable Private
             397:    7(fvec3) ConstantComposite 206 117 117
             407:    7(fvec3) ConstantComposite 214 117 117
             415:     38(ptr) Variable Private
             416:     40(ptr) Variable Input
             421:      8(ptr) Variable Private
             435:     38(ptr) Variable Private
             450:     31(int) Constant 4
             457:     40(ptr) Variable Input
             464:    7(fvec3) ConstantComposite 117 117 117
             468:      8(ptr) Variable Private
             473:    6(float) Constant 1054168405
             474:    7(fvec3) ConstantComposite 473 473 473
             479:    6(float) Constant 1065814589
             480:    7(fvec3) ConstantComposite 479 479 479
             482:    6(float) Constant 3177269166
             483:    7(fvec3) ConstantComposite 482 482 482
             487:     58(ptr) Variable Private
             503:             TypePointer Output 19(fvec4)
             504:    503(ptr) Variable Output
             514:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             182:    181(ptr) Variable Function
             276:    275(ptr) Variable Function
             342:    181(ptr) Variable Function
              14:          11 Load 13
              18:   15(fvec2) Load 17
              20:   19(fvec4) ImageSampleImplicitLod 14 18
              21:    7(fvec3) VectorShuffle 20 20 0 1 2
                              Store 9 21
              23:    7(fvec3) Load 9
              34:     33(ptr) AccessChain 30 32
              35:   19(fvec4) Load 34
              36:    7(fvec3) VectorShuffle 35 35 0 1 2
              37:    7(fvec3) FMul 23 36
                              Store 22 37
              42:    7(fvec3) Load 41
              43:    7(fvec3) FNegate 42
              46:     45(ptr) AccessChain 30 44
              47:    7(fvec3) Load 46
              48:    7(fvec3) FAdd 43 47
              49:   19(fvec4) Load 39
              50:   19(fvec4) VectorShuffle 49 48 4 5 6 3
                              Store 39 50
              55:     54(ptr) AccessChain 30 52 44 53
              56:    6(float) Load 55
              59:     58(ptr) AccessChain 51 57
                              Store 59 56
              61:     54(ptr) AccessChain 30 52 60 53
              62:    6(float) Load 61
              64:     58(ptr) AccessChain 51 63
                              Store 64 62
              66:     54(ptr) AccessChain 30 52 65 53
              67:    6(float) Load 66
              68:     58(ptr) AccessChain 51 53
                              Store 68 67
              70:   19(fvec4) Load 39
              71:    7(fvec3) VectorShuffle 70 70 0 1 2
              72:   19(fvec4) Load 51
              73:    7(fvec3) VectorShuffle 72 72 0 1 2
              74:    6(float) Dot 71 73
                              Store 69 74
              75:    7(fvec3) Load 41
              77:     33(ptr) AccessChain 30 76
              78:   19(fvec4) Load 77
              79:    7(fvec3) VectorShuffle 78 78 0 1 2
              80:    7(fvec3) FNegate 79
              81:    7(fvec3) FAdd 75 80
              82:   19(fvec4) Load 39
              83:   19(fvec4) VectorShuffle 82 81 4 5 6 3
                              Store 39 83
              84:   19(fvec4) Load 39
              85:    7(fvec3) VectorShuffle 84 84 0 1 2
              86:   19(fvec4) Load 39
              87:    7(fvec3) VectorShuffle 86 86 0 1 2
              88:    6(float) Dot 85 87
              89:     58(ptr) AccessChain 39 57
                              Store 89 88
              90:     58(ptr) AccessChain 39 57
              91:    6(float) Load 90
              92:    6(float) ExtInst 1(GLSL.std.450) 31(Sqrt) 91
              93:     58(ptr) AccessChain 39 57
                              Store 93 92
              94:    6(float) Load 69
              95:    6(float) FNegate 94
              96:     58(ptr) AccessChain 39 57
              97:    6(float) Load 96
              98:    6(float) FAdd 95 97
              99:     58(ptr) AccessChain 39 57
                              Store 99 98
             101:     54(ptr) AccessChain 30 76 100
             102:    6(float) Load 101
             103:     58(ptr) AccessChain 39 57
             104:    6(float) Load 103
             105:    6(float) FMul 102 104
             106:    6(float) Load 69
             107:    6(float) FAdd 105 106
                              Store 69 107
             108:    6(float) Load 69
             110:     54(ptr) AccessChain 30 109 53
             111:    6(float) Load 110
             112:    6(float) FMul 108 111
             113:     54(ptr) AccessChain 30 109 100
             114:    6(float) Load 113
             115:    6(float) FAdd 112 114
                              Store 69 115
             116:    6(float) Load 69
             119:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 116 117 118
                              Store 69 119
             124:     54(ptr) AccessChain 30 123 57
             125:    6(float) Load 124
             126:   120(bool) FOrdEqual 125 118
                              Store 122 126
                              SelectionMerge 129 None
                              BranchConditional 127 128 129
             128:               Label
             130:   120(bool)   Load 122
                                SelectionMerge 132 None
                                BranchConditional 130 131 132
             131:                 Label
                                  Branch 132
             132:               Label
                                Branch 129
             129:             Label
                              SelectionMerge 135 None
                              BranchConditional 133 134 232
             134:               Label
             137:     54(ptr)   AccessChain 30 123 63
             138:    6(float)   Load 137
             139:   120(bool)   FOrdEqual 138 118
                                Store 136 139
             140:    7(fvec3)   Load 41
             141:    7(fvec3)   VectorShuffle 140 140 1 1 1
             143:     33(ptr)   AccessChain 30 142 60
             144:   19(fvec4)   Load 143
             145:    7(fvec3)   VectorShuffle 144 144 0 1 2
             146:    7(fvec3)   FMul 141 145
             147:   19(fvec4)   Load 51
             148:   19(fvec4)   VectorShuffle 147 146 4 5 6 3
                                Store 51 148
             149:     33(ptr)   AccessChain 30 142 44
             150:   19(fvec4)   Load 149
             151:    7(fvec3)   VectorShuffle 150 150 0 1 2
             152:    7(fvec3)   Load 41
             153:    7(fvec3)   VectorShuffle 152 152 0 0 0
             154:    7(fvec3)   FMul 151 153
             155:   19(fvec4)   Load 51
             156:    7(fvec3)   VectorShuffle 155 155 0 1 2
             157:    7(fvec3)   FAdd 154 156
             158:   19(fvec4)   Load 51
             159:   19(fvec4)   VectorShuffle 158 157 4 5 6 3
                                Store 51 159
             160:     33(ptr)   AccessChain 30 142 65
             161:   19(fvec4)   Load 160
             162:    7(fvec3)   VectorShuffle 161 161 0 1 2
             163:    7(fvec3)   Load 41
             164:    7(fvec3)   VectorShuffle 163 163 2 2 2
             165:    7(fvec3)   FMul 162 164
             166:   19(fvec4)   Load 51
             167:    7(fvec3)   VectorShuffle 166 166 0 1 2
             168:    7(fvec3)   FAdd 165 167
             169:   19(fvec4)   Load 51
             170:   19(fvec4)   VectorShuffle 169 168 4 5 6 3
                                Store 51 170
             171:   19(fvec4)   Load 51
             172:    7(fvec3)   VectorShuffle 171 171 0 1 2
             174:     33(ptr)   AccessChain 30 142 173
             175:   19(fvec4)   Load 174
             176:    7(fvec3)   VectorShuffle 175 175 0 1 2
             177:    7(fvec3)   FAdd 172 176
             178:   19(fvec4)   Load 51
             179:   19(fvec4)   VectorShuffle 178 177 4 5 6 3
                                Store 51 179
             183:   120(bool)   Load 136
                                SelectionMerge 185 None
                                BranchConditional 183 184 188
             184:                 Label
             186:   19(fvec4)     Load 51
             187:    7(fvec3)     VectorShuffle 186 186 0 1 2
                                  Store 182 187
                                  Branch 185
             188:                 Label
             189:    7(fvec3)     Load 41
                                  Store 182 189
                                  Branch 185
             185:               Label
             190:    7(fvec3)   Load 182
                                Store 180 190
             191:    7(fvec3)   Load 180
             193:     45(ptr)   AccessChain 30 192
             194:    7(fvec3)   Load 193
             195:    7(fvec3)   FNegate 194
             196:    7(fvec3)   FAdd 191 195
                                Store 180 196
             197:    7(fvec3)   Load 180
             199:     45(ptr)   AccessChain 30 198
             200:    7(fvec3)   Load 199
             201:    7(fvec3)   FMul 197 200
             202:   19(fvec4)   Load 51
             203:   19(fvec4)   VectorShuffle 202 201 0 4 5 6
                                Store 51 203
             204:     58(ptr)   AccessChain 51 63
             205:    6(float)   Load 204
             207:    6(float)   FMul 205 206
             209:    6(float)   FAdd 207 208
             210:     58(ptr)   AccessChain 180 57
                                Store 210 209
             212:     54(ptr)   AccessChain 30 123 53
             213:    6(float)   Load 212
             215:    6(float)   FMul 213 214
             216:    6(float)   FAdd 215 208
                                Store 211 216
             217:    6(float)   Load 211
             218:     58(ptr)   AccessChain 180 57
             219:    6(float)   Load 218
             220:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 217 219
             221:     58(ptr)   AccessChain 51 57
                                Store 221 220
             226:         223   Load 225
             227:   19(fvec4)   Load 51
             228:    7(fvec3)   VectorShuffle 227 227 0 2 3
             229:   19(fvec4)   ImageSampleImplicitLod 226 228
                                Store 51 229
             231:   19(fvec4)   Load 51
                                Store 230 231
                                Branch 135
             232:               Label
             233:     58(ptr)   AccessChain 230 57
                                Store 233 118
             234:     58(ptr)   AccessChain 230 63
                                Store 234 118
             235:     58(ptr)   AccessChain 230 53
                                Store 235 118
             236:     58(ptr)   AccessChain 230 100
                                Store 236 118
                                Branch 135
             135:             Label
             238:   19(fvec4) Load 230
             240:     33(ptr) AccessChain 30 239
             241:   19(fvec4) Load 240
             242:    6(float) Dot 238 241
             243:     58(ptr) AccessChain 237 57
                              Store 243 242
             244:     58(ptr) AccessChain 237 57
             245:    6(float) Load 244
             246:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 245 117 118
             247:     58(ptr) AccessChain 237 57
                              Store 247 246
             250:   19(fvec4) Load 249
             251:   15(fvec2) VectorShuffle 250 250 0 1
             252:   19(fvec4) Load 249
             253:   15(fvec2) VectorShuffle 252 252 3 3
             254:   15(fvec2) FDiv 251 253
             255:    7(fvec3) Load 180
             256:    7(fvec3) VectorShuffle 255 254 3 4 2
                              Store 180 256
             259:          11 Load 258
             260:    7(fvec3) Load 180
             261:   15(fvec2) VectorShuffle 260 260 0 1
             262:   19(fvec4) ImageSampleImplicitLod 259 261
             263:    6(float) CompositeExtract 262 0
                              Store 257 263
             265:    6(float) Load 69
             266:    6(float) Load 257
             267:    6(float) FAdd 265 266
                              Store 264 267
             268:    6(float) Load 264
             269:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 268 117 118
                              Store 264 269
             270:    6(float) Load 264
             271:     58(ptr) AccessChain 237 57
             272:    6(float) Load 271
             273:    6(float) ExtInst 1(GLSL.std.450) 37(FMin) 270 272
             274:     58(ptr) AccessChain 237 57
                              Store 274 273
             277:   120(bool) Load 122
                              SelectionMerge 279 None
                              BranchConditional 277 278 282
             278:               Label
             280:     58(ptr)   AccessChain 237 57
             281:    6(float)   Load 280
                                Store 276 281
                                Branch 279
             282:               Label
             283:    6(float)   Load 264
                                Store 276 283
                                Branch 279
             279:             Label
             284:    6(float) Load 276
             285:     58(ptr) AccessChain 237 57
                              Store 285 284
             286:    7(fvec3) Load 237
             287:    7(fvec3) VectorShuffle 286 286 0 0 0
             289:     33(ptr) AccessChain 30 288
             290:   19(fvec4) Load 289
             291:    7(fvec3) VectorShuffle 290 290 0 1 2
             292:    7(fvec3) FMul 287 291
                              Store 237 292
                              SelectionMerge 294 None
                              BranchConditional 127 293 294
             293:               Label
             295:   120(bool)   Load 122
                                SelectionMerge 297 None
                                BranchConditional 295 296 297
             296:                 Label
                                  Branch 297
             297:               Label
                                Branch 294
             294:             Label
                              SelectionMerge 299 None
                              BranchConditional 133 298 434
             298:               Label
             301:     54(ptr)   AccessChain 30 123 63
             302:    6(float)   Load 301
             303:   120(bool)   FOrdEqual 302 118
                                Store 300 303
             304:    7(fvec3)   Load 41
             305:    7(fvec3)   VectorShuffle 304 304 1 1 1
             306:     33(ptr)   AccessChain 30 142 60
             307:   19(fvec4)   Load 306
             308:    7(fvec3)   VectorShuffle 307 307 0 1 2
             309:    7(fvec3)   FMul 305 308
             310:   19(fvec4)   Load 39
             311:   19(fvec4)   VectorShuffle 310 309 4 5 6 3
                                Store 39 311
             312:     33(ptr)   AccessChain 30 142 44
             313:   19(fvec4)   Load 312
             314:    7(fvec3)   VectorShuffle 313 313 0 1 2
             315:    7(fvec3)   Load 41
             316:    7(fvec3)   VectorShuffle 315 315 0 0 0
             317:    7(fvec3)   FMul 314 316
             318:   19(fvec4)   Load 39
             319:    7(fvec3)   VectorShuffle 318 318 0 1 2
             320:    7(fvec3)   FAdd 317 319
             321:   19(fvec4)   Load 39
             322:   19(fvec4)   VectorShuffle 321 320 4 5 6 3
                                Store 39 322
             323:     33(ptr)   AccessChain 30 142 65
             324:   19(fvec4)   Load 323
             325:    7(fvec3)   VectorShuffle 324 324 0 1 2
             326:    7(fvec3)   Load 41
             327:    7(fvec3)   VectorShuffle 326 326 2 2 2
             328:    7(fvec3)   FMul 325 327
             329:   19(fvec4)   Load 39
             330:    7(fvec3)   VectorShuffle 329 329 0 1 2
             331:    7(fvec3)   FAdd 328 330
             332:   19(fvec4)   Load 39
             333:   19(fvec4)   VectorShuffle 332 331 4 5 6 3
                                Store 39 333
             334:   19(fvec4)   Load 39
             335:    7(fvec3)   VectorShuffle 334 334 0 1 2
             336:     33(ptr)   AccessChain 30 142 173
             337:   19(fvec4)   Load 336
             338:    7(fvec3)   VectorShuffle 337 337 0 1 2
             339:    7(fvec3)   FAdd 335 338
             340:   19(fvec4)   Load 39
             341:   19(fvec4)   VectorShuffle 340 339 4 5 6 3
                                Store 39 341
             343:   120(bool)   Load 300
                                SelectionMerge 345 None
                                BranchConditional 343 344 348
             344:                 Label
             346:   19(fvec4)     Load 39
             347:    7(fvec3)     VectorShuffle 346 346 0 1 2
                                  Store 342 347
                                  Branch 345
             348:                 Label
             349:    7(fvec3)     Load 41
                                  Store 342 349
                                  Branch 345
             345:               Label
             350:    7(fvec3)   Load 342
             351:   19(fvec4)   Load 39
             352:   19(fvec4)   VectorShuffle 351 350 4 5 6 3
                                Store 39 352
             353:   19(fvec4)   Load 39
             354:    7(fvec3)   VectorShuffle 353 353 0 1 2
             355:     45(ptr)   AccessChain 30 192
             356:    7(fvec3)   Load 355
             357:    7(fvec3)   FNegate 356
             358:    7(fvec3)   FAdd 354 357
             359:   19(fvec4)   Load 39
             360:   19(fvec4)   VectorShuffle 359 358 4 5 6 3
                                Store 39 360
             361:   19(fvec4)   Load 39
             362:    7(fvec3)   VectorShuffle 361 361 0 1 2
             363:     45(ptr)   AccessChain 30 198
             364:    7(fvec3)   Load 363
             365:    7(fvec3)   FMul 362 364
             366:   19(fvec4)   Load 39
             367:   19(fvec4)   VectorShuffle 366 365 0 4 5 6
                                Store 39 367
             368:     58(ptr)   AccessChain 39 63
             369:    6(float)   Load 368
             370:    6(float)   FMul 369 206
                                Store 69 370
             371:     54(ptr)   AccessChain 30 123 53
             372:    6(float)   Load 371
             373:    6(float)   FMul 372 214
             374:     58(ptr)   AccessChain 180 57
                                Store 374 373
             376:     54(ptr)   AccessChain 30 123 53
             377:    6(float)   Load 376
             378:    6(float)   FNegate 377
             379:    6(float)   FMul 378 214
             380:    6(float)   FAdd 379 206
             381:     58(ptr)   AccessChain 375 57
                                Store 381 380
             382:    6(float)   Load 69
             383:     58(ptr)   AccessChain 180 57
             384:    6(float)   Load 383
             385:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 382 384
                                Store 69 385
             386:     58(ptr)   AccessChain 375 57
             387:    6(float)   Load 386
             388:    6(float)   Load 69
             389:    6(float)   ExtInst 1(GLSL.std.450) 37(FMin) 387 388
             390:     58(ptr)   AccessChain 39 57
                                Store 390 389
             391:         223   Load 225
             392:   19(fvec4)   Load 39
             393:    7(fvec3)   VectorShuffle 392 392 0 2 3
             394:   19(fvec4)   ImageSampleImplicitLod 391 393
                                Store 51 394
             395:   19(fvec4)   Load 39
             396:    7(fvec3)   VectorShuffle 395 395 0 2 3
             398:    7(fvec3)   FAdd 396 397
             399:   19(fvec4)   Load 375
             400:   19(fvec4)   VectorShuffle 399 398 4 5 6 3
                                Store 375 400
             401:         223   Load 225
             402:   19(fvec4)   Load 375
             403:    7(fvec3)   VectorShuffle 402 402 0 1 2
             404:   19(fvec4)   ImageSampleImplicitLod 401 403
                                Store 375 404
             405:   19(fvec4)   Load 39
             406:    7(fvec3)   VectorShuffle 405 405 0 2 3
             408:    7(fvec3)   FAdd 406 407
             409:   19(fvec4)   Load 39
             410:   19(fvec4)   VectorShuffle 409 408 4 5 6 3
                                Store 39 410
             411:         223   Load 225
             412:   19(fvec4)   Load 39
             413:    7(fvec3)   VectorShuffle 412 412 0 1 2
             414:   19(fvec4)   ImageSampleImplicitLod 411 413
                                Store 39 414
             417:    7(fvec3)   Load 416
             418:   19(fvec4)   Load 415
             419:   19(fvec4)   VectorShuffle 418 417 4 5 6 3
                                Store 415 419
             420:     58(ptr)   AccessChain 415 100
                                Store 420 118
             422:   19(fvec4)   Load 51
             423:   19(fvec4)   Load 415
             424:    6(float)   Dot 422 423
             425:     58(ptr)   AccessChain 421 57
                                Store 425 424
             426:   19(fvec4)   Load 375
             427:   19(fvec4)   Load 415
             428:    6(float)   Dot 426 427
             429:     58(ptr)   AccessChain 421 63
                                Store 429 428
             430:   19(fvec4)   Load 39
             431:   19(fvec4)   Load 415
             432:    6(float)   Dot 430 431
             433:     58(ptr)   AccessChain 421 53
                                Store 433 432
                                Branch 299
             434:               Label
             436:    7(fvec3)   Load 416
             437:   19(fvec4)   Load 435
             438:   19(fvec4)   VectorShuffle 437 436 4 5 6 3
                                Store 435 438
             439:     58(ptr)   AccessChain 435 100
                                Store 439 118
             440:     33(ptr)   AccessChain 30 65
             441:   19(fvec4)   Load 440
             442:   19(fvec4)   Load 435
             443:    6(float)   Dot 441 442
             444:     58(ptr)   AccessChain 421 57
                                Store 444 443
             445:     33(ptr)   AccessChain 30 173
             446:   19(fvec4)   Load 445
             447:   19(fvec4)   Load 435
             448:    6(float)   Dot 446 447
             449:     58(ptr)   AccessChain 421 63
                                Store 449 448
             451:     33(ptr)   AccessChain 30 450
             452:   19(fvec4)   Load 451
             453:   19(fvec4)   Load 435
             454:    6(float)   Dot 452 453
             455:     58(ptr)   AccessChain 421 53
                                Store 455 454
                                Branch 299
             299:             Label
             456:    7(fvec3) Load 421
             458:    7(fvec3) Load 457
             459:    7(fvec3) FAdd 456 458
             460:   19(fvec4) Load 415
             461:   19(fvec4) VectorShuffle 460 459 4 5 6 3
                              Store 415 461
             462:   19(fvec4) Load 415
             463:    7(fvec3) VectorShuffle 462 462 0 1 2
             465:    7(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 463 464
             466:   19(fvec4) Load 415
             467:   19(fvec4) VectorShuffle 466 465 4 5 6 3
                              Store 415 467
             469:   19(fvec4) Load 415
             470:    7(fvec3) VectorShuffle 469 469 0 1 2
             471:    7(fvec3) ExtInst 1(GLSL.std.450) 30(Log2) 470
                              Store 468 471
             472:    7(fvec3) Load 468
             475:    7(fvec3) FMul 472 474
                              Store 468 475
             476:    7(fvec3) Load 468
             477:    7(fvec3) ExtInst 1(GLSL.std.450) 29(Exp2) 476
                              Store 468 477
             478:    7(fvec3) Load 468
             481:    7(fvec3) FMul 478 480
             484:    7(fvec3) FAdd 481 483
                              Store 468 484
             485:    7(fvec3) Load 468
             486:    7(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 485 464
                              Store 468 486
             488:    7(fvec3) Load 416
             489:     33(ptr) AccessChain 30 60
             490:   19(fvec4) Load 489
             491:    7(fvec3) VectorShuffle 490 490 0 1 2
             492:    6(float) Dot 488 491
                              Store 487 492
             493:    6(float) Load 487
             494:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 493 117
                              Store 487 494
             495:    7(fvec3) Load 22
             496:    7(fvec3) Load 237
             497:    7(fvec3) FMul 495 496
                              Store 237 497
             498:    7(fvec3) Load 22
             499:    7(fvec3) Load 468
             500:    7(fvec3) FMul 498 499
             501:   19(fvec4) Load 415
             502:   19(fvec4) VectorShuffle 501 500 4 5 6 3
                              Store 415 502
             505:    7(fvec3) Load 237
             506:    6(float) Load 487
             507:    7(fvec3) CompositeConstruct 506 506 506
             508:    7(fvec3) FMul 505 507
             509:   19(fvec4) Load 415
             510:    7(fvec3) VectorShuffle 509 509 0 1 2
             511:    7(fvec3) FAdd 508 510
             512:   19(fvec4) Load 504
             513:   19(fvec4) VectorShuffle 512 511 4 5 6 3
                              Store 504 513
             515:    514(ptr) AccessChain 504 100
                              Store 515 118
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

 }


 // Stats for Vertex shader:
 //         d3d9: 20 math
 //        d3d11: 16 math
 //         gles: 11 avg math (6..18), 2 avg texture (1..3)
 //     d3d11_9x: 16 math
 // Stats for Fragment shader:
 //         d3d9: 14 avg math (6..21), 2 avg texture (1..3)
 //        d3d11: 26 avg math (18..34), 3 avg texture (2..4), 2 branch
 //     d3d11_9x: 13 avg math (5..21), 2 avg texture (1..3)
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="FORWARDADD" "RenderType"="Opaque" }
  ZWrite Off
  Blend One One
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: POINT 
-- Vertex shader for "d3d9":
// Stats: 20 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 11

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   _MainTex_ST         c11      1
//

    vs_3_0
    def c12, 1, 0, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4.xy
    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r2.x, c4, r1
    dp4 r2.y, c5, r1
    dp4 r2.z, c6, r1
    dp4 r2.w, c7, r1
    mad o1.xy, v2, c11, c11.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul o2.xyz, r0.w, r0
    mov o4.xy, c12.y
    mad o0.xy, r2.w, c255, r2
    mov o0.zw, r2

// approximately 22 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 16 math, 2 textures
Matrix4x3 unity_WorldToLight at 0
Vector4 _Color at 5
Vector4 _LightColor0 at 4
Vector4 _WorldSpaceLightPos0 at 3

Set 2D Texture "_LightTexture0" to slot 0
Set 2D Texture "_MainTex" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _LightColor0;
//   sampler2D _LightTexture0;
//   sampler2D _MainTex;
//   float4 _WorldSpaceLightPos0;
//   row_major float4x4 unity_WorldToLight;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   unity_WorldToLight   c0       3
//   _WorldSpaceLightPos0 c3       1
//   _LightColor0         c4       1
//   _Color               c5       1
//   _LightTexture0       s0       1
//   _MainTex             s1       1
//

    ps_3_0
    def c6, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_texcoord2 v2.xyz
    dcl_2d s0
    dcl_2d s1
    mad r0, v2.xyzx, c6.xxxy, c6.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp3 r0.x, r1, r1
    texld_pp r0, r0.x, s0
    mul_pp r0.xyz, r0.x, c4
    texld r1, v0, s1
    mul_pp r1.xyz, r1, c5
    mul_pp r0.xyz, r0, r1
    add r1.xyz, c3, -v2
    nrm_pp r2.xyz, r1
    dp3_pp r0.w, v1, r2
    max_pp r1.x, r0.w, c6.y
    mul_pp oC0.xyz, r0, r1.x
    mov_pp oC0.w, c6.x

// approximately 18 instruction slots used (2 texture, 16 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  12: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  13: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  14: dp3 r0.w, r0.xyzx, r0.xyzx
  15: rsq r0.w, r0.w
  16: mul o2.xyz, r0.wwww, r0.xyzx
  17: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 28 math, 4 temp registers, 3 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 720
}
Constant Buffer "UnityProbeVolume" (112 bytes) on slot 2 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 16
  Vector4 unity_ProbeVolumeParams at 0
  Vector3 unity_ProbeVolumeSizeInv at 80
  Vector3 unity_ProbeVolumeMin at 96
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[46], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture3d (float,float,float,float) t2
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 4
   0: add r0.xyz, -v3.xyzx, cb1[0].xyzx
   1: dp3 r0.w, r0.xyzx, r0.xyzx
   2: rsq r0.w, r0.w
   3: mul r0.xyz, r0.wwww, r0.xyzx
   4: sample r1.xyzw, v1.xyxx, t0.xyzw, s2
   5: mul r1.xyz, r1.xyzx, cb0[8].xyzx
   6: mul r2.xyz, v3.yyyy, cb0[5].xyzx
   7: mad r2.xyz, cb0[4].xyzx, v3.xxxx, r2.xyzx
   8: mad r2.xyz, cb0[6].xyzx, v3.zzzz, r2.xyzx
   9: add r2.xyz, r2.xyzx, cb0[7].xyzx
  10: eq r0.w, cb2[0].x, l(1.000000)
  11: if_nz r0.w
  12:   eq r0.w, cb2[0].y, l(1.000000)
  13:   mul r3.xyz, v3.yyyy, cb2[2].xyzx
  14:   mad r3.xyz, cb2[1].xyzx, v3.xxxx, r3.xyzx
  15:   mad r3.xyz, cb2[3].xyzx, v3.zzzz, r3.xyzx
  16:   add r3.xyz, r3.xyzx, cb2[4].xyzx
  17:   movc r3.xyz, r0.wwww, r3.xyzx, v3.xyzx
  18:   add r3.xyz, r3.xyzx, -cb2[6].xyzx
  19:   mul r3.yzw, r3.xxyz, cb2[5].xxyz
  20:   mad r0.w, r3.y, l(0.250000), l(0.750000)
  21:   mad r1.w, cb2[0].z, l(0.500000), l(0.750000)
  22:   max r3.x, r0.w, r1.w
  23:   sample r3.xyzw, r3.xzwx, t2.xyzw, s0
  24: else 
  25:   mov r3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  26: endif 
  27: dp4_sat r0.w, r3.xyzw, cb1[45].xyzw
  28: dp3 r1.w, r2.xyzx, r2.xyzx
  29: sample r2.xyzw, r1.wwww, t1.xyzw, s1
  30: mul r0.w, r0.w, r2.x
  31: mul r2.xyz, r0.wwww, cb0[2].xyzx
  32: dp3 r0.x, v2.xyzx, r0.xyzx
  33: max r0.x, r0.x, l(0.000000)
  34: mul r0.yzw, r1.xxyz, r2.xxyz
  35: mul o0.xyz, r0.xxxx, r0.yzwy
  36: mov o0.w, l(1.000000)
  37: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 12 math, 2 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  highp vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD2;
  lightCoord_4 = (unity_WorldToLight * tmpvar_9).xyz;
  highp float tmpvar_10;
  tmpvar_10 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_11;
  tmpvar_11 = texture2D (_LightTexture0, vec2(tmpvar_10)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_11);
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8.xyz * tmpvar_1) * diff_14);
  c_13.w = tmpvar_8.w;
  c_12.w = c_13.w;
  c_12.xyz = c_13.xyz;
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             9         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         7  ( FLT, FLT, FLT, FLT)
// c9         cb2            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          def c13, 0, 0, 0, 0
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c3
   2:     mad r0, c2, v0.x, r0
   3:     mad r0, c4, v0.z, r0
   4:     mad oT2.xyz, c5, v0.w, r0
   5:     add r0, r0, c5
   6:     dp3 r1.x, v2, c6
   7:     dp3 r1.y, v2, c7
   8:     dp3 r1.z, v2, c8
   9:     dp3 r1.w, r1, r1
  10:     rsq r1.w, r1.w
  11:     mul oT1.xyz, r1.w, r1
  12:     mul r1, r0.y, c10
  13:     mad r1, c9, r0.x, r1
  14:     mad r1, c11, r0.z, r1
  15:     mad r0, c12, r0.w, r1
  16:     mad oPos.xy, r0.w, c0, r0
  17:     mov oPos.zw, r0
  18:     mov oT0.zw, c13.x

// approximately 19 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  12: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  13: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  14: dp3 r0.w, r0.xyzx, r0.xyzx
  15: rsq r0.w, r0.w
  16: mul o2.xyz, r0.wwww, r0.xyzx
  17: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 15 math, 2 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c1         cb0             4         5  ( FLT, FLT, FLT, FLT)
// c6         cb1             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t1               
// s1             s1              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c7, 0, 1, 0, 0
          dcl t0
          dcl_pp t1.xyz
          dcl t2.xyz
          dcl_2d s0
          dcl_2d s1
   0:     mul r0.xyz, t2.y, c2
   1:     mad r0.xyz, c1, t2.x, r0
   2:     mad r0.xyz, c3, t2.z, r0
   3:     add r0.xyz, r0, c4
   4:     dp3 r0.xy, r0, r0
   5:     texld r1, t0, s1
   5:     texld_pp r0, r0, s0
   5:     mul_pp r0.xyz, r0.x, c0
   6:     mul_pp r1.xyz, r1, c5
   7:     mul_pp r0.xyz, r0, r1
   8:     add r1.xyz, -t2, c6
   9:     nrm_pp r2.xyz, r1
  12:     dp3_pp r0.w, t1, r2
  13:     max_pp r1.x, r0.w, c7.x
  14:     mul_pp r0.xyz, r0, r1.x
  15:     mov_pp r0.w, c7.y
  16:     mov_pp oC0, r0

// approximately 19 instruction slots used (2 texture, 17 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: mul r0.xyz, v3.yyyy, cb0[5].xyzx
   1: mad r0.xyz, cb0[4].xyzx, v3.xxxx, r0.xyzx
   2: mad r0.xyz, cb0[6].xyzx, v3.zzzz, r0.xyzx
   3: add r0.xyz, r0.xyzx, cb0[7].xyzx
   4: dp3 r0.x, r0.xyzx, r0.xyzx
   5: sample r0.xyzw, r0.xxxx, t1.xyzw, s0
   6: mul r0.xyz, r0.xxxx, cb0[2].xyzx
   7: sample r1.xyzw, v1.xyxx, t0.xyzw, s1
   8: mul r1.xyz, r1.xyzx, cb0[8].xyzx
   9: mul r0.xyz, r0.xyzx, r1.xyzx
  10: add r1.xyz, -v3.xyzx, cb1[0].xyzx
  11: dp3 r0.w, r1.xyzx, r1.xyzx
  12: rsq r0.w, r0.w
  13: mul r1.xyz, r0.wwww, r1.xyzx
  14: dp3 r0.w, v2.xyzx, r1.xyzx
  15: max r0.w, r0.w, l(0.000000)
  16: mul o0.xyz, r0.wwww, r0.xyzx
  17: mov o0.w, l(1.000000)
  18: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
float u_xlat6;
mediump float u_xlat16_7;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10_0.x = texture(_LightTexture0, u_xlat0.xx).w;
    u_xlat16_1.xyz = u_xlat10_0.xxx * _LightColor0.xyz;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz;
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat16_7 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_7 = max(u_xlat16_7, 0.0);
    SV_Target0.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    output.TEXCOORD3.xy = float2(0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "Globals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 _LightColor0 at 144
  Vector4 _Color at 224
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * Globals._Color.xyz;
    u_xlat2.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD2.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD2.zzz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb12 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : input.TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat3.y, 0.25, 0.75);
        u_xlat13 = fma(Globals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat3.x = max(u_xlat12, u_xlat13);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat3, Globals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat13)).x;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat2.xyz = float3(u_xlat12) * Globals._LightColor0.xyz;
    u_xlat0.x = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    output.SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat12, u_xlat13);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10_2 = texture(_LightTexture0, vec2(u_xlat13));
    u_xlat12 = u_xlat12 * u_xlat10_2.w;
    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
u_xlatb15", used in: Fragment 

Set 2D Texture "_LightTexture0" to set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 2, used in: Fragment 

Constant Buffer "PGlobals2545525321" (240 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _Color at 224
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals2545525321" (208 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 128
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 159

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 52 85 97 98 109 113 150
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 64
                              MemberDecorate 19 2 Offset 128
                              MemberDecorate 19 3 Offset 192
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 52 Location 2
                              MemberDecorate 83 0 BuiltIn Position
                              MemberDecorate 83 1 BuiltIn PointSize
                              MemberDecorate 83 2 BuiltIn ClipDistance
                              Decorate 83 Block
                              Decorate 97 Location 0
                              Decorate 98 Location 2
                              Decorate 109 Location 3
                              Decorate 113 Location 1
                              Decorate 150 RelaxedPrecision
                              Decorate 150 Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              36:     22(int) Constant 2
              44:      8(ptr) Variable Private
              46:     22(int) Constant 3
              50:             TypeVector 6(float) 3
              51:             TypePointer Output 50(fvec3)
              52:     51(ptr) Variable Output
              81:     14(int) Constant 1
              82:             TypeArray 6(float) 81
              83:             TypeStruct 7(fvec4) 6(float) 82
              84:             TypePointer Output 83(struct)
              85:     84(ptr) Variable Output
              93:             TypePointer Output 7(fvec4)
              95:             TypeVector 6(float) 2
              96:             TypePointer Output 95(fvec2)
              97:     96(ptr) Variable Output
              98:     10(ptr) Variable Input
             109:     96(ptr) Variable Output
             110:    6(float) Constant 0
             111:   95(fvec2) ConstantComposite 110 110
             112:             TypePointer Input 50(fvec3)
             113:    112(ptr) Variable Input
             119:     14(int) Constant 0
             120:             TypePointer Private 6(float)
             133:     14(int) Constant 2
             135:    120(ptr) Variable Private
             150:     51(ptr) Variable Output
             153:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              29:     25(ptr) AccessChain 21 23 23
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     25(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              45:    7(fvec4) Load 9
              47:     25(ptr) AccessChain 21 23 46
              48:    7(fvec4) Load 47
              49:    7(fvec4) FAdd 45 48
                              Store 44 49
              53:     25(ptr) AccessChain 21 23 46
              54:    7(fvec4) Load 53
              55:   50(fvec3) VectorShuffle 54 54 0 1 2
              56:    7(fvec4) Load 11
              57:   50(fvec3) VectorShuffle 56 56 3 3 3
              58:   50(fvec3) FMul 55 57
              59:    7(fvec4) Load 9
              60:   50(fvec3) VectorShuffle 59 59 0 1 2
              61:   50(fvec3) FAdd 58 60
                              Store 52 61
              62:    7(fvec4) Load 44
              63:    7(fvec4) VectorShuffle 62 62 1 1 1 1
              64:     25(ptr) AccessChain 21 36 24
              65:    7(fvec4) Load 64
              66:    7(fvec4) FMul 63 65
                              Store 9 66
              67:     25(ptr) AccessChain 21 36 23
              68:    7(fvec4) Load 67
              69:    7(fvec4) Load 44
              70:    7(fvec4) VectorShuffle 69 69 0 0 0 0
              71:    7(fvec4) FMul 68 70
              72:    7(fvec4) Load 9
              73:    7(fvec4) FAdd 71 72
                              Store 9 73
              74:     25(ptr) AccessChain 21 36 36
              75:    7(fvec4) Load 74
              76:    7(fvec4) Load 44
              77:    7(fvec4) VectorShuffle 76 76 2 2 2 2
              78:    7(fvec4) FMul 75 77
              79:    7(fvec4) Load 9
              80:    7(fvec4) FAdd 78 79
                              Store 9 80
              86:     25(ptr) AccessChain 21 36 46
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 44
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 9
              92:    7(fvec4) FAdd 90 91
              94:     93(ptr) AccessChain 85 23
                              Store 94 92
              99:    7(fvec4) Load 98
             100:   95(fvec2) VectorShuffle 99 99 0 1
             101:     25(ptr) AccessChain 21 46
             102:    7(fvec4) Load 101
             103:   95(fvec2) VectorShuffle 102 102 0 1
             104:   95(fvec2) FMul 100 103
             105:     25(ptr) AccessChain 21 46
             106:    7(fvec4) Load 105
             107:   95(fvec2) VectorShuffle 106 106 2 3
             108:   95(fvec2) FAdd 104 107
                              Store 97 108
                              Store 109 111
             114:   50(fvec3) Load 113
             115:     25(ptr) AccessChain 21 24 23
             116:    7(fvec4) Load 115
             117:   50(fvec3) VectorShuffle 116 116 0 1 2
             118:    6(float) Dot 114 117
             121:    120(ptr) AccessChain 9 119
                              Store 121 118
             122:   50(fvec3) Load 113
             123:     25(ptr) AccessChain 21 24 24
             124:    7(fvec4) Load 123
             125:   50(fvec3) VectorShuffle 124 124 0 1 2
             126:    6(float) Dot 122 125
             127:    120(ptr) AccessChain 9 81
                              Store 127 126
             128:   50(fvec3) Load 113
             129:     25(ptr) AccessChain 21 24 36
             130:    7(fvec4) Load 129
             131:   50(fvec3) VectorShuffle 130 130 0 1 2
             132:    6(float) Dot 128 131
             134:    120(ptr) AccessChain 9 133
                              Store 134 132
             136:    7(fvec4) Load 9
             137:   50(fvec3) VectorShuffle 136 136 0 1 2
             138:    7(fvec4) Load 9
             139:   50(fvec3) VectorShuffle 138 138 0 1 2
             140:    6(float) Dot 137 139
                              Store 135 140
             141:    6(float) Load 135
             142:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 141
                              Store 135 142
             143:    6(float) Load 135
             144:   50(fvec3) CompositeConstruct 143 143 143
             145:    7(fvec4) Load 9
             146:   50(fvec3) VectorShuffle 145 145 0 1 2
             147:   50(fvec3) FMul 144 146
             148:    7(fvec4) Load 9
             149:    7(fvec4) VectorShuffle 148 147 4 5 6 3
                              Store 9 149
             151:    7(fvec4) Load 9
             152:   50(fvec3) VectorShuffle 151 151 0 1 2
                              Store 150 152
             154:    153(ptr) AccessChain 85 23 81
             155:    6(float) Load 154
             156:    6(float) FNegate 155
             157:    153(ptr) AccessChain 85 23 81
                              Store 157 156
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 270

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 11 48 250 260
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 11 Location 2
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 RelaxedPrecision
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 Offset 48
                              MemberDecorate 19 4 Offset 112
                              MemberDecorate 19 5 Offset 128
                              MemberDecorate 19 6 RelaxedPrecision
                              MemberDecorate 19 6 Offset 144
                              MemberDecorate 19 7 Offset 160
                              MemberDecorate 19 8 RelaxedPrecision
                              MemberDecorate 19 8 Offset 224
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 0
                              Decorate 40 RelaxedPrecision
                              Decorate 44 RelaxedPrecision
                              Decorate 44 DescriptorSet 0
                              Decorate 44 Binding 0
                              Decorate 45 RelaxedPrecision
                              Decorate 48 Location 0
                              Decorate 51 RelaxedPrecision
                              Decorate 52 RelaxedPrecision
                              Decorate 53 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 57 RelaxedPrecision
                              Decorate 58 RelaxedPrecision
                              Decorate 106 SpecId 0
                              Decorate 203 DescriptorSet 0
                              Decorate 203 Binding 2
                              Decorate 208 RelaxedPrecision
                              Decorate 216 RelaxedPrecision
                              Decorate 217 RelaxedPrecision
                              Decorate 219 RelaxedPrecision
                              Decorate 220 RelaxedPrecision
                              Decorate 223 RelaxedPrecision
                              Decorate 225 RelaxedPrecision
                              Decorate 230 RelaxedPrecision
                              Decorate 231 RelaxedPrecision
                              Decorate 231 DescriptorSet 0
                              Decorate 231 Binding 1
                              Decorate 232 RelaxedPrecision
                              Decorate 236 RelaxedPrecision
                              Decorate 237 RelaxedPrecision
                              Decorate 239 RelaxedPrecision
                              Decorate 240 RelaxedPrecision
                              Decorate 241 RelaxedPrecision
                              Decorate 242 RelaxedPrecision
                              Decorate 243 RelaxedPrecision
                              Decorate 246 RelaxedPrecision
                              Decorate 247 RelaxedPrecision
                              Decorate 248 RelaxedPrecision
                              Decorate 249 RelaxedPrecision
                              Decorate 250 RelaxedPrecision
                              Decorate 250 Location 1
                              Decorate 251 RelaxedPrecision
                              Decorate 254 RelaxedPrecision
                              Decorate 255 RelaxedPrecision
                              Decorate 256 RelaxedPrecision
                              Decorate 257 RelaxedPrecision
                              Decorate 258 RelaxedPrecision
                              Decorate 260 RelaxedPrecision
                              Decorate 260 Location 0
                              Decorate 261 RelaxedPrecision
                              Decorate 262 RelaxedPrecision
                              Decorate 263 RelaxedPrecision
                              Decorate 264 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec3)
              11:     10(ptr) Variable Input
              14:             TypeVector 6(float) 4
              15:             TypeInt 32 0
              16:     15(int) Constant 4
              17:             TypeArray 14(fvec4) 16
              18:             TypeArray 14(fvec4) 16
              19:             TypeStruct 14(fvec4) 14(fvec4) 14(fvec4) 17 7(fvec3) 7(fvec3) 14(fvec4) 18 14(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:             TypePointer Uniform 14(fvec4)
              29:             TypePointer Private 6(float)
              30:     29(ptr) Variable Private
              40:      8(ptr) Variable Private
              41:             TypeImage 6(float) 2D sampled format:Unknown
              42:             TypeSampledImage 41
              43:             TypePointer UniformConstant 42
              44:     43(ptr) Variable UniformConstant
              46:             TypeVector 6(float) 2
              47:             TypePointer Input 46(fvec2)
              48:     47(ptr) Variable Input
              52:      8(ptr) Variable Private
              54:     22(int) Constant 8
              59:      8(ptr) Variable Private
              62:     22(int) Constant 7
              63:     22(int) Constant 1
              76:     22(int) Constant 2
              86:     22(int) Constant 3
              91:             TypeBool
              92:             TypePointer Private 91(bool)
              93:     92(ptr) Variable Private
              94:     15(int) Constant 0
              95:             TypePointer Uniform 6(float)
              98:    6(float) Constant 1065353216
             100:    91(bool) ConstantFalse
             106:    91(bool) SpecConstantFalse
             109:     15(int) Constant 1
             113:             TypePointer Private 14(fvec4)
             114:    113(ptr) Variable Private
             153:             TypePointer Function 7(fvec3)
             167:     22(int) Constant 5
             168:             TypePointer Uniform 7(fvec3)
             177:     22(int) Constant 4
             185:    6(float) Constant 1048576000
             187:    6(float) Constant 1061158912
             189:     29(ptr) Variable Private
             190:     15(int) Constant 2
             193:    6(float) Constant 1056964608
             200:             TypeImage 6(float) 3D sampled format:Unknown
             201:             TypeSampledImage 200
             202:             TypePointer UniformConstant 201
             203:    202(ptr) Variable UniformConstant
             208:    113(ptr) Variable Private
             214:     15(int) Constant 3
             216:      8(ptr) Variable Private
             224:    6(float) Constant 0
             230:     29(ptr) Variable Private
             231:     43(ptr) Variable UniformConstant
             237:     29(ptr) Variable Private
             244:     22(int) Constant 6
             249:     29(ptr) Variable Private
             250:     10(ptr) Variable Input
             259:             TypePointer Output 14(fvec4)
             260:    259(ptr) Variable Output
             267:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             154:    153(ptr) Variable Function
              12:    7(fvec3) Load 11
              13:    7(fvec3) FNegate 12
              25:     24(ptr) AccessChain 21 23
              26:   14(fvec4) Load 25
              27:    7(fvec3) VectorShuffle 26 26 0 1 2
              28:    7(fvec3) FAdd 13 27
                              Store 9 28
              31:    7(fvec3) Load 9
              32:    7(fvec3) Load 9
              33:    6(float) Dot 31 32
                              Store 30 33
              34:    6(float) Load 30
              35:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 34
                              Store 30 35
              36:    6(float) Load 30
              37:    7(fvec3) CompositeConstruct 36 36 36
              38:    7(fvec3) Load 9
              39:    7(fvec3) FMul 37 38
                              Store 9 39
              45:          42 Load 44
              49:   46(fvec2) Load 48
              50:   14(fvec4) ImageSampleImplicitLod 45 49
              51:    7(fvec3) VectorShuffle 50 50 0 1 2
                              Store 40 51
              53:    7(fvec3) Load 40
              55:     24(ptr) AccessChain 21 54
              56:   14(fvec4) Load 55
              57:    7(fvec3) VectorShuffle 56 56 0 1 2
              58:    7(fvec3) FMul 53 57
                              Store 52 58
              60:    7(fvec3) Load 11
              61:    7(fvec3) VectorShuffle 60 60 1 1 1
              64:     24(ptr) AccessChain 21 62 63
              65:   14(fvec4) Load 64
              66:    7(fvec3) VectorShuffle 65 65 0 1 2
              67:    7(fvec3) FMul 61 66
                              Store 59 67
              68:     24(ptr) AccessChain 21 62 23
              69:   14(fvec4) Load 68
              70:    7(fvec3) VectorShuffle 69 69 0 1 2
              71:    7(fvec3) Load 11
              72:    7(fvec3) VectorShuffle 71 71 0 0 0
              73:    7(fvec3) FMul 70 72
              74:    7(fvec3) Load 59
              75:    7(fvec3) FAdd 73 74
                              Store 59 75
              77:     24(ptr) AccessChain 21 62 76
              78:   14(fvec4) Load 77
              79:    7(fvec3) VectorShuffle 78 78 0 1 2
              80:    7(fvec3) Load 11
              81:    7(fvec3) VectorShuffle 80 80 2 2 2
              82:    7(fvec3) FMul 79 81
              83:    7(fvec3) Load 59
              84:    7(fvec3) FAdd 82 83
                              Store 59 84
              85:    7(fvec3) Load 59
              87:     24(ptr) AccessChain 21 62 86
              88:   14(fvec4) Load 87
              89:    7(fvec3) VectorShuffle 88 88 0 1 2
              90:    7(fvec3) FAdd 85 89
                              Store 59 90
              96:     95(ptr) AccessChain 21 76 94
              97:    6(float) Load 96
              99:    91(bool) FOrdEqual 97 98
                              Store 93 99
                              SelectionMerge 102 None
                              BranchConditional 100 101 102
             101:               Label
             103:    91(bool)   Load 93
                                SelectionMerge 105 None
                                BranchConditional 103 104 105
             104:                 Label
                                  Branch 105
             105:               Label
                                Branch 102
             102:             Label
                              SelectionMerge 108 None
                              BranchConditional 106 107 210
             107:               Label
             110:     95(ptr)   AccessChain 21 76 109
             111:    6(float)   Load 110
             112:    91(bool)   FOrdEqual 111 98
                                Store 93 112
             115:    7(fvec3)   Load 11
             116:    7(fvec3)   VectorShuffle 115 115 1 1 1
             117:     24(ptr)   AccessChain 21 86 63
             118:   14(fvec4)   Load 117
             119:    7(fvec3)   VectorShuffle 118 118 0 1 2
             120:    7(fvec3)   FMul 116 119
             121:   14(fvec4)   Load 114
             122:   14(fvec4)   VectorShuffle 121 120 4 5 6 3
                                Store 114 122
             123:     24(ptr)   AccessChain 21 86 23
             124:   14(fvec4)   Load 123
             125:    7(fvec3)   VectorShuffle 124 124 0 1 2
             126:    7(fvec3)   Load 11
             127:    7(fvec3)   VectorShuffle 126 126 0 0 0
             128:    7(fvec3)   FMul 125 127
             129:   14(fvec4)   Load 114
             130:    7(fvec3)   VectorShuffle 129 129 0 1 2
             131:    7(fvec3)   FAdd 128 130
             132:   14(fvec4)   Load 114
             133:   14(fvec4)   VectorShuffle 132 131 4 5 6 3
                                Store 114 133
             134:     24(ptr)   AccessChain 21 86 76
             135:   14(fvec4)   Load 134
             136:    7(fvec3)   VectorShuffle 135 135 0 1 2
             137:    7(fvec3)   Load 11
             138:    7(fvec3)   VectorShuffle 137 137 2 2 2
             139:    7(fvec3)   FMul 136 138
             140:   14(fvec4)   Load 114
             141:    7(fvec3)   VectorShuffle 140 140 0 1 2
             142:    7(fvec3)   FAdd 139 141
             143:   14(fvec4)   Load 114
             144:   14(fvec4)   VectorShuffle 143 142 4 5 6 3
                                Store 114 144
             145:   14(fvec4)   Load 114
             146:    7(fvec3)   VectorShuffle 145 145 0 1 2
             147:     24(ptr)   AccessChain 21 86 86
             148:   14(fvec4)   Load 147
             149:    7(fvec3)   VectorShuffle 148 148 0 1 2
             150:    7(fvec3)   FAdd 146 149
             151:   14(fvec4)   Load 114
             152:   14(fvec4)   VectorShuffle 151 150 4 5 6 3
                                Store 114 152
             155:    91(bool)   Load 93
                                SelectionMerge 157 None
                                BranchConditional 155 156 160
             156:                 Label
             158:   14(fvec4)     Load 114
             159:    7(fvec3)     VectorShuffle 158 158 0 1 2
                                  Store 154 159
                                  Branch 157
             160:                 Label
             161:    7(fvec3)     Load 11
                                  Store 154 161
                                  Branch 157
             157:               Label
             162:    7(fvec3)   Load 154
             163:   14(fvec4)   Load 114
             164:   14(fvec4)   VectorShuffle 163 162 4 5 6 3
                                Store 114 164
             165:   14(fvec4)   Load 114
             166:    7(fvec3)   VectorShuffle 165 165 0 1 2
             169:    168(ptr)   AccessChain 21 167
             170:    7(fvec3)   Load 169
             171:    7(fvec3)   FNegate 170
             172:    7(fvec3)   FAdd 166 171
             173:   14(fvec4)   Load 114
             174:   14(fvec4)   VectorShuffle 173 172 4 5 6 3
                                Store 114 174
             175:   14(fvec4)   Load 114
             176:    7(fvec3)   VectorShuffle 175 175 0 1 2
             178:    168(ptr)   AccessChain 21 177
             179:    7(fvec3)   Load 178
             180:    7(fvec3)   FMul 176 179
             181:   14(fvec4)   Load 114
             182:   14(fvec4)   VectorShuffle 181 180 0 4 5 6
                                Store 114 182
             183:     29(ptr)   AccessChain 114 109
             184:    6(float)   Load 183
             186:    6(float)   FMul 184 185
             188:    6(float)   FAdd 186 187
                                Store 30 188
             191:     95(ptr)   AccessChain 21 76 190
             192:    6(float)   Load 191
             194:    6(float)   FMul 192 193
             195:    6(float)   FAdd 194 187
                                Store 189 195
             196:    6(float)   Load 30
             197:    6(float)   Load 189
             198:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 196 197
             199:     29(ptr)   AccessChain 114 94
                                Store 199 198
             204:         201   Load 203
             205:   14(fvec4)   Load 114
             206:    7(fvec3)   VectorShuffle 205 205 0 2 3
             207:   14(fvec4)   ImageSampleImplicitLod 204 206
                                Store 114 207
             209:   14(fvec4)   Load 114
                                Store 208 209
                                Branch 108
             210:               Label
             211:     29(ptr)   AccessChain 208 94
                                Store 211 98
             212:     29(ptr)   AccessChain 208 109
                                Store 212 98
             213:     29(ptr)   AccessChain 208 190
                                Store 213 98
             215:     29(ptr)   AccessChain 208 214
                                Store 215 98
                                Branch 108
             108:             Label
             217:   14(fvec4) Load 208
             218:     24(ptr) AccessChain 21 63
             219:   14(fvec4) Load 218
             220:    6(float) Dot 217 219
             221:     29(ptr) AccessChain 216 94
                              Store 221 220
             222:     29(ptr) AccessChain 216 94
             223:    6(float) Load 222
             225:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 223 224 98
             226:     29(ptr) AccessChain 216 94
                              Store 226 225
             227:    7(fvec3) Load 59
             228:    7(fvec3) Load 59
             229:    6(float) Dot 227 228
                              Store 30 229
             232:          42 Load 231
             233:    6(float) Load 30
             234:   46(fvec2) CompositeConstruct 233 233
             235:   14(fvec4) ImageSampleImplicitLod 232 234
             236:    6(float) CompositeExtract 235 3
                              Store 230 236
             238:     29(ptr) AccessChain 216 94
             239:    6(float) Load 238
             240:    6(float) Load 230
             241:    6(float) FMul 239 240
                              Store 237 241
             242:    6(float) Load 237
             243:    7(fvec3) CompositeConstruct 242 242 242
             245:     24(ptr) AccessChain 21 244
             246:   14(fvec4) Load 245
             247:    7(fvec3) VectorShuffle 246 246 0 1 2
             248:    7(fvec3) FMul 243 247
                              Store 216 248
             251:    7(fvec3) Load 250
             252:    7(fvec3) Load 9
             253:    6(float) Dot 251 252
                              Store 249 253
             254:    6(float) Load 249
             255:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 254 224
                              Store 249 255
             256:    7(fvec3) Load 52
             257:    7(fvec3) Load 216
             258:    7(fvec3) FMul 256 257
                              Store 216 258
             261:    6(float) Load 249
             262:    7(fvec3) CompositeConstruct 261 261 261
             263:    7(fvec3) Load 216
             264:    7(fvec3) FMul 262 263
             265:   14(fvec4) Load 260
             266:   14(fvec4) VectorShuffle 265 264 4 5 6 3
                              Store 260 266
             268:    267(ptr) AccessChain 260 214
                              Store 268 98
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

-- Vertex shader for "d3d9":
// Stats: 20 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 11

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   _MainTex_ST         c11      1
//

    vs_3_0
    def c12, 1, 0, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4.xy
    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r2.x, c4, r1
    dp4 r2.y, c5, r1
    dp4 r2.z, c6, r1
    dp4 r2.w, c7, r1
    mad o1.xy, v2, c11, c11.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul o2.xyz, r0.w, r0
    mov o4.xy, c12.y
    mad o0.xy, r2.w, c255, r2
    mov o0.zw, r2

// approximately 22 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 6 math, 1 textures
Vector4 _Color at 2
Vector4 _LightColor0 at 1
Vector4 _WorldSpaceLightPos0 at 0

Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _LightColor0;
//   sampler2D _MainTex;
//   float4 _WorldSpaceLightPos0;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   _WorldSpaceLightPos0 c0       1
//   _LightColor0         c1       1
//   _Color               c2       1
//   _MainTex             s0       1
//

    ps_3_0
    def c3, 0, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_2d s0
    texld r0, v0, s0
    mul_pp r0.xyz, r0, c2
    mul_pp r0.xyz, r0, c1
    dp3_pp r0.w, v1, c0
    max_pp r1.x, r0.w, c3.x
    mul_pp oC0.xyz, r0, r1.x
    mov_pp oC0.w, c3.y

// approximately 7 instruction slots used (1 texture, 6 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  12: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  13: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  14: dp3 r0.w, r0.xyzx, r0.xyzx
  15: rsq r0.w, r0.w
  16: mul o2.xyz, r0.wwww, r0.xyzx
  17: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 18 math, 2 temp registers, 2 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _LightColor0 at 32
  Vector4 _Color at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 720
}
Constant Buffer "UnityProbeVolume" (112 bytes) on slot 2 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 16
  Vector4 unity_ProbeVolumeParams at 0
  Vector3 unity_ProbeVolumeSizeInv at 80
  Vector3 unity_ProbeVolumeMin at 96
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[46], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture3d (float,float,float,float) t1
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s1
   1: mul r0.xyz, r0.xyzx, cb0[4].xyzx
   2: eq r0.w, cb2[0].x, l(1.000000)
   3: if_nz r0.w
   4:   eq r0.w, cb2[0].y, l(1.000000)
   5:   mul r1.xyz, v3.yyyy, cb2[2].xyzx
   6:   mad r1.xyz, cb2[1].xyzx, v3.xxxx, r1.xyzx
   7:   mad r1.xyz, cb2[3].xyzx, v3.zzzz, r1.xyzx
   8:   add r1.xyz, r1.xyzx, cb2[4].xyzx
   9:   movc r1.xyz, r0.wwww, r1.xyzx, v3.xyzx
  10:   add r1.xyz, r1.xyzx, -cb2[6].xyzx
  11:   mul r1.yzw, r1.xxyz, cb2[5].xxyz
  12:   mad r0.w, r1.y, l(0.250000), l(0.750000)
  13:   mad r1.y, cb2[0].z, l(0.500000), l(0.750000)
  14:   max r1.x, r0.w, r1.y
  15:   sample r1.xyzw, r1.xzwx, t1.xyzw, s0
  16: else 
  17:   mov r1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  18: endif 
  19: dp4_sat r0.w, r1.xyzw, cb1[45].xyzw
  20: mul r1.xyz, r0.wwww, cb0[2].xyzx
  21: dp3 r0.w, v2.xyzx, cb1[0].xyzx
  22: max r0.w, r0.w, l(0.000000)
  23: mul r0.xyz, r0.xyzx, r1.xyzx
  24: mul o0.xyz, r0.wwww, r0.xyzx
  25: mov o0.w, l(1.000000)
  26: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 6 math, 1 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_8;
  lowp vec4 c_9;
  lowp float diff_10;
  mediump float tmpvar_11;
  tmpvar_11 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_10 = tmpvar_11;
  c_9.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_10);
  c_9.w = tmpvar_7.w;
  c_8.w = c_9.w;
  c_8.xyz = c_9.xyz;
  c_3.xyz = c_8.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             5         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         7  ( FLT, FLT, FLT, FLT)
// c9         cb2            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          def c13, 0, 0, 0, 0
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c3
   2:     mad r0, c2, v0.x, r0
   3:     mad r0, c4, v0.z, r0
   4:     mad oT2.xyz, c5, v0.w, r0
   5:     add r0, r0, c5
   6:     dp3 r1.x, v2, c6
   7:     dp3 r1.y, v2, c7
   8:     dp3 r1.z, v2, c8
   9:     dp3 r1.w, r1, r1
  10:     rsq r1.w, r1.w
  11:     mul oT1.xyz, r1.w, r1
  12:     mul r1, r0.y, c10
  13:     mad r1, c9, r0.x, r1
  14:     mad r1, c11, r0.z, r1
  15:     mad r0, c12, r0.w, r1
  16:     mad oPos.xy, r0.w, c0, r0
  17:     mov oPos.zw, r0
  18:     mov oT0.zw, c13.x

// approximately 19 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  12: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  13: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  14: dp3 r0.w, r0.xyzx, r0.xyzx
  15: rsq r0.w, r0.w
  16: mul o2.xyz, r0.wwww, r0.xyzx
  17: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 5 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _LightColor0 at 32
  Vector4 _Color at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c1         cb0             4         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c3, 0, 1, 0, 0
          dcl t0
          dcl_pp t1.xyz
          dcl_2d s0
   0:     texld r0, t0, s0
   0:     mul_pp r0.xyz, r0, c1
   1:     mul_pp r0.xyz, r0, c0
   2:     dp3_pp r0.w, t1, c2
   3:     max_pp r1.w, r0.w, c3.x
   4:     mul_pp r0.xyz, r0, r1.w
   5:     mov_pp r0.w, c3.y
   6:     mov_pp oC0, r0

// approximately 8 instruction slots used (1 texture, 7 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, cb0[4].xyzx
   2: mul r0.xyz, r0.xyzx, cb0[2].xyzx
   3: dp3 r0.w, v2.xyzx, cb1[0].xyzx
   4: max r0.w, r0.w, l(0.000000)
   5: mul o0.xyz, r0.wwww, r0.xyzx
   6: mov o0.w, l(1.000000)
   7: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump float u_xlat16_7;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * _LightColor0.xyz;
    u_xlat16_7 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_7 = max(u_xlat16_7, 0.0);
    SV_Target0.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    output.TEXCOORD3.xy = float2(0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "Globals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 _LightColor0 at 144
  Vector4 _Color at 160
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float4 u_xlat1;
    float u_xlat3;
    float u_xlat6;
    bool u_xlatb6;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * Globals._Color.xyz;
    u_xlatb6 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb6){
        u_xlatb6 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat1.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat1.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : input.TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat1.yzw = u_xlat1.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat6 = fma(u_xlat1.y, 0.25, 0.75);
        u_xlat3 = fma(Globals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat1.x = max(u_xlat6, u_xlat3);
        u_xlat1 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    }
    u_xlat6 = dot(u_xlat1, Globals.unity_OcclusionMaskSelector);
    u_xlat6 = clamp(u_xlat6, 0.0f, 1.0f);
    u_xlat1.xyz = float3(u_xlat6) * Globals._LightColor0.xyz;
    u_xlat6 = dot(input.TEXCOORD1.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    output.SV_Target0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlatb6 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb6){
        u_xlatb6 = unity_ProbeVolumeParams.y==1.0;
        u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;
        u_xlat1.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;
        u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat6 = u_xlat1.y * 0.25 + 0.75;
        u_xlat3 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat6, u_xlat3);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat6 = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
    u_xlat1.xyz = vec3(u_xlat6) * _LightColor0.xyz;
    u_xlat6 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
u_xlatb9", used in: Fragment 

Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 1, used in: Fragment 

Constant Buffer "PGlobals844380970" (176 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Vector4 _Color at 160
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals844380970" (208 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 128
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 159

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 52 85 97 98 109 113 150
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 64
                              MemberDecorate 19 2 Offset 128
                              MemberDecorate 19 3 Offset 192
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 52 Location 2
                              MemberDecorate 83 0 BuiltIn Position
                              MemberDecorate 83 1 BuiltIn PointSize
                              MemberDecorate 83 2 BuiltIn ClipDistance
                              Decorate 83 Block
                              Decorate 97 Location 0
                              Decorate 98 Location 2
                              Decorate 109 Location 3
                              Decorate 113 Location 1
                              Decorate 150 RelaxedPrecision
                              Decorate 150 Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              36:     22(int) Constant 2
              44:      8(ptr) Variable Private
              46:     22(int) Constant 3
              50:             TypeVector 6(float) 3
              51:             TypePointer Output 50(fvec3)
              52:     51(ptr) Variable Output
              81:     14(int) Constant 1
              82:             TypeArray 6(float) 81
              83:             TypeStruct 7(fvec4) 6(float) 82
              84:             TypePointer Output 83(struct)
              85:     84(ptr) Variable Output
              93:             TypePointer Output 7(fvec4)
              95:             TypeVector 6(float) 2
              96:             TypePointer Output 95(fvec2)
              97:     96(ptr) Variable Output
              98:     10(ptr) Variable Input
             109:     96(ptr) Variable Output
             110:    6(float) Constant 0
             111:   95(fvec2) ConstantComposite 110 110
             112:             TypePointer Input 50(fvec3)
             113:    112(ptr) Variable Input
             119:     14(int) Constant 0
             120:             TypePointer Private 6(float)
             133:     14(int) Constant 2
             135:    120(ptr) Variable Private
             150:     51(ptr) Variable Output
             153:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              29:     25(ptr) AccessChain 21 23 23
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     25(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              45:    7(fvec4) Load 9
              47:     25(ptr) AccessChain 21 23 46
              48:    7(fvec4) Load 47
              49:    7(fvec4) FAdd 45 48
                              Store 44 49
              53:     25(ptr) AccessChain 21 23 46
              54:    7(fvec4) Load 53
              55:   50(fvec3) VectorShuffle 54 54 0 1 2
              56:    7(fvec4) Load 11
              57:   50(fvec3) VectorShuffle 56 56 3 3 3
              58:   50(fvec3) FMul 55 57
              59:    7(fvec4) Load 9
              60:   50(fvec3) VectorShuffle 59 59 0 1 2
              61:   50(fvec3) FAdd 58 60
                              Store 52 61
              62:    7(fvec4) Load 44
              63:    7(fvec4) VectorShuffle 62 62 1 1 1 1
              64:     25(ptr) AccessChain 21 36 24
              65:    7(fvec4) Load 64
              66:    7(fvec4) FMul 63 65
                              Store 9 66
              67:     25(ptr) AccessChain 21 36 23
              68:    7(fvec4) Load 67
              69:    7(fvec4) Load 44
              70:    7(fvec4) VectorShuffle 69 69 0 0 0 0
              71:    7(fvec4) FMul 68 70
              72:    7(fvec4) Load 9
              73:    7(fvec4) FAdd 71 72
                              Store 9 73
              74:     25(ptr) AccessChain 21 36 36
              75:    7(fvec4) Load 74
              76:    7(fvec4) Load 44
              77:    7(fvec4) VectorShuffle 76 76 2 2 2 2
              78:    7(fvec4) FMul 75 77
              79:    7(fvec4) Load 9
              80:    7(fvec4) FAdd 78 79
                              Store 9 80
              86:     25(ptr) AccessChain 21 36 46
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 44
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 9
              92:    7(fvec4) FAdd 90 91
              94:     93(ptr) AccessChain 85 23
                              Store 94 92
              99:    7(fvec4) Load 98
             100:   95(fvec2) VectorShuffle 99 99 0 1
             101:     25(ptr) AccessChain 21 46
             102:    7(fvec4) Load 101
             103:   95(fvec2) VectorShuffle 102 102 0 1
             104:   95(fvec2) FMul 100 103
             105:     25(ptr) AccessChain 21 46
             106:    7(fvec4) Load 105
             107:   95(fvec2) VectorShuffle 106 106 2 3
             108:   95(fvec2) FAdd 104 107
                              Store 97 108
                              Store 109 111
             114:   50(fvec3) Load 113
             115:     25(ptr) AccessChain 21 24 23
             116:    7(fvec4) Load 115
             117:   50(fvec3) VectorShuffle 116 116 0 1 2
             118:    6(float) Dot 114 117
             121:    120(ptr) AccessChain 9 119
                              Store 121 118
             122:   50(fvec3) Load 113
             123:     25(ptr) AccessChain 21 24 24
             124:    7(fvec4) Load 123
             125:   50(fvec3) VectorShuffle 124 124 0 1 2
             126:    6(float) Dot 122 125
             127:    120(ptr) AccessChain 9 81
                              Store 127 126
             128:   50(fvec3) Load 113
             129:     25(ptr) AccessChain 21 24 36
             130:    7(fvec4) Load 129
             131:   50(fvec3) VectorShuffle 130 130 0 1 2
             132:    6(float) Dot 128 131
             134:    120(ptr) AccessChain 9 133
                              Store 134 132
             136:    7(fvec4) Load 9
             137:   50(fvec3) VectorShuffle 136 136 0 1 2
             138:    7(fvec4) Load 9
             139:   50(fvec3) VectorShuffle 138 138 0 1 2
             140:    6(float) Dot 137 139
                              Store 135 140
             141:    6(float) Load 135
             142:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 141
                              Store 135 142
             143:    6(float) Load 135
             144:   50(fvec3) CompositeConstruct 143 143 143
             145:    7(fvec4) Load 9
             146:   50(fvec3) VectorShuffle 145 145 0 1 2
             147:   50(fvec3) FMul 144 146
             148:    7(fvec4) Load 9
             149:    7(fvec4) VectorShuffle 148 147 4 5 6 3
                              Store 9 149
             151:    7(fvec4) Load 9
             152:   50(fvec3) VectorShuffle 151 151 0 1 2
                              Store 150 152
             154:    153(ptr) AccessChain 85 23 81
             155:    6(float) Load 154
             156:    6(float) FNegate 155
             157:    153(ptr) AccessChain 85 23 81
                              Store 157 156
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 211

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 63 189 201
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 0
                              Decorate 21 RelaxedPrecision
                              Decorate 22 RelaxedPrecision
                              Decorate 23 RelaxedPrecision
                              Decorate 26 ArrayStride 16
                              MemberDecorate 27 0 RelaxedPrecision
                              MemberDecorate 27 0 Offset 0
                              MemberDecorate 27 1 RelaxedPrecision
                              MemberDecorate 27 1 Offset 16
                              MemberDecorate 27 2 Offset 32
                              MemberDecorate 27 3 Offset 48
                              MemberDecorate 27 4 Offset 112
                              MemberDecorate 27 5 Offset 128
                              MemberDecorate 27 6 RelaxedPrecision
                              MemberDecorate 27 6 Offset 144
                              MemberDecorate 27 7 RelaxedPrecision
                              MemberDecorate 27 7 Offset 160
                              Decorate 27 Block
                              Decorate 29 DescriptorSet 1
                              Decorate 29 Binding 0
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 36 RelaxedPrecision
                              Decorate 53 SpecId 0
                              Decorate 63 Location 2
                              Decorate 157 DescriptorSet 0
                              Decorate 157 Binding 1
                              Decorate 162 RelaxedPrecision
                              Decorate 170 RelaxedPrecision
                              Decorate 171 RelaxedPrecision
                              Decorate 173 RelaxedPrecision
                              Decorate 174 RelaxedPrecision
                              Decorate 177 RelaxedPrecision
                              Decorate 179 RelaxedPrecision
                              Decorate 181 RelaxedPrecision
                              Decorate 182 RelaxedPrecision
                              Decorate 185 RelaxedPrecision
                              Decorate 186 RelaxedPrecision
                              Decorate 187 RelaxedPrecision
                              Decorate 188 RelaxedPrecision
                              Decorate 189 RelaxedPrecision
                              Decorate 189 Location 1
                              Decorate 190 RelaxedPrecision
                              Decorate 192 RelaxedPrecision
                              Decorate 193 RelaxedPrecision
                              Decorate 194 RelaxedPrecision
                              Decorate 195 RelaxedPrecision
                              Decorate 196 RelaxedPrecision
                              Decorate 197 RelaxedPrecision
                              Decorate 198 RelaxedPrecision
                              Decorate 199 RelaxedPrecision
                              Decorate 201 RelaxedPrecision
                              Decorate 201 Location 0
                              Decorate 202 RelaxedPrecision
                              Decorate 203 RelaxedPrecision
                              Decorate 204 RelaxedPrecision
                              Decorate 205 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              19:             TypeVector 6(float) 4
              22:      8(ptr) Variable Private
              24:             TypeInt 32 0
              25:     24(int) Constant 4
              26:             TypeArray 19(fvec4) 25
              27:             TypeStruct 19(fvec4) 19(fvec4) 19(fvec4) 26 7(fvec3) 7(fvec3) 19(fvec4) 19(fvec4)
              28:             TypePointer Uniform 27(struct)
              29:     28(ptr) Variable Uniform
              30:             TypeInt 32 1
              31:     30(int) Constant 7
              32:             TypePointer Uniform 19(fvec4)
              37:             TypeBool
              38:             TypePointer Private 37(bool)
              39:     38(ptr) Variable Private
              40:     30(int) Constant 2
              41:     24(int) Constant 0
              42:             TypePointer Uniform 6(float)
              45:    6(float) Constant 1065353216
              47:    37(bool) ConstantFalse
              53:    37(bool) SpecConstantFalse
              56:     24(int) Constant 1
              60:             TypePointer Private 19(fvec4)
              61:     60(ptr) Variable Private
              62:             TypePointer Input 7(fvec3)
              63:     62(ptr) Variable Input
              66:     30(int) Constant 3
              67:     30(int) Constant 1
              74:     30(int) Constant 0
             105:             TypePointer Function 7(fvec3)
             119:     30(int) Constant 5
             120:             TypePointer Uniform 7(fvec3)
             129:     30(int) Constant 4
             135:             TypePointer Private 6(float)
             136:    135(ptr) Variable Private
             139:    6(float) Constant 1048576000
             141:    6(float) Constant 1061158912
             143:    135(ptr) Variable Private
             144:     24(int) Constant 2
             147:    6(float) Constant 1056964608
             154:             TypeImage 6(float) 3D sampled format:Unknown
             155:             TypeSampledImage 154
             156:             TypePointer UniformConstant 155
             157:    156(ptr) Variable UniformConstant
             162:     60(ptr) Variable Private
             168:     24(int) Constant 3
             170:      8(ptr) Variable Private
             178:    6(float) Constant 0
             183:     30(int) Constant 6
             188:    135(ptr) Variable Private
             189:     62(ptr) Variable Input
             200:             TypePointer Output 19(fvec4)
             201:    200(ptr) Variable Output
             208:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             106:    105(ptr) Variable Function
              14:          11 Load 13
              18:   15(fvec2) Load 17
              20:   19(fvec4) ImageSampleImplicitLod 14 18
              21:    7(fvec3) VectorShuffle 20 20 0 1 2
                              Store 9 21
              23:    7(fvec3) Load 9
              33:     32(ptr) AccessChain 29 31
              34:   19(fvec4) Load 33
              35:    7(fvec3) VectorShuffle 34 34 0 1 2
              36:    7(fvec3) FMul 23 35
                              Store 22 36
              43:     42(ptr) AccessChain 29 40 41
              44:    6(float) Load 43
              46:    37(bool) FOrdEqual 44 45
                              Store 39 46
                              SelectionMerge 49 None
                              BranchConditional 47 48 49
              48:               Label
              50:    37(bool)   Load 39
                                SelectionMerge 52 None
                                BranchConditional 50 51 52
              51:                 Label
                                  Branch 52
              52:               Label
                                Branch 49
              49:             Label
                              SelectionMerge 55 None
                              BranchConditional 53 54 164
              54:               Label
              57:     42(ptr)   AccessChain 29 40 56
              58:    6(float)   Load 57
              59:    37(bool)   FOrdEqual 58 45
                                Store 39 59
              64:    7(fvec3)   Load 63
              65:    7(fvec3)   VectorShuffle 64 64 1 1 1
              68:     32(ptr)   AccessChain 29 66 67
              69:   19(fvec4)   Load 68
              70:    7(fvec3)   VectorShuffle 69 69 0 1 2
              71:    7(fvec3)   FMul 65 70
              72:   19(fvec4)   Load 61
              73:   19(fvec4)   VectorShuffle 72 71 4 5 6 3
                                Store 61 73
              75:     32(ptr)   AccessChain 29 66 74
              76:   19(fvec4)   Load 75
              77:    7(fvec3)   VectorShuffle 76 76 0 1 2
              78:    7(fvec3)   Load 63
              79:    7(fvec3)   VectorShuffle 78 78 0 0 0
              80:    7(fvec3)   FMul 77 79
              81:   19(fvec4)   Load 61
              82:    7(fvec3)   VectorShuffle 81 81 0 1 2
              83:    7(fvec3)   FAdd 80 82
              84:   19(fvec4)   Load 61
              85:   19(fvec4)   VectorShuffle 84 83 4 5 6 3
                                Store 61 85
              86:     32(ptr)   AccessChain 29 66 40
              87:   19(fvec4)   Load 86
              88:    7(fvec3)   VectorShuffle 87 87 0 1 2
              89:    7(fvec3)   Load 63
              90:    7(fvec3)   VectorShuffle 89 89 2 2 2
              91:    7(fvec3)   FMul 88 90
              92:   19(fvec4)   Load 61
              93:    7(fvec3)   VectorShuffle 92 92 0 1 2
              94:    7(fvec3)   FAdd 91 93
              95:   19(fvec4)   Load 61
              96:   19(fvec4)   VectorShuffle 95 94 4 5 6 3
                                Store 61 96
              97:   19(fvec4)   Load 61
              98:    7(fvec3)   VectorShuffle 97 97 0 1 2
              99:     32(ptr)   AccessChain 29 66 66
             100:   19(fvec4)   Load 99
             101:    7(fvec3)   VectorShuffle 100 100 0 1 2
             102:    7(fvec3)   FAdd 98 101
             103:   19(fvec4)   Load 61
             104:   19(fvec4)   VectorShuffle 103 102 4 5 6 3
                                Store 61 104
             107:    37(bool)   Load 39
                                SelectionMerge 109 None
                                BranchConditional 107 108 112
             108:                 Label
             110:   19(fvec4)     Load 61
             111:    7(fvec3)     VectorShuffle 110 110 0 1 2
                                  Store 106 111
                                  Branch 109
             112:                 Label
             113:    7(fvec3)     Load 63
                                  Store 106 113
                                  Branch 109
             109:               Label
             114:    7(fvec3)   Load 106
             115:   19(fvec4)   Load 61
             116:   19(fvec4)   VectorShuffle 115 114 4 5 6 3
                                Store 61 116
             117:   19(fvec4)   Load 61
             118:    7(fvec3)   VectorShuffle 117 117 0 1 2
             121:    120(ptr)   AccessChain 29 119
             122:    7(fvec3)   Load 121
             123:    7(fvec3)   FNegate 122
             124:    7(fvec3)   FAdd 118 123
             125:   19(fvec4)   Load 61
             126:   19(fvec4)   VectorShuffle 125 124 4 5 6 3
                                Store 61 126
             127:   19(fvec4)   Load 61
             128:    7(fvec3)   VectorShuffle 127 127 0 1 2
             130:    120(ptr)   AccessChain 29 129
             131:    7(fvec3)   Load 130
             132:    7(fvec3)   FMul 128 131
             133:   19(fvec4)   Load 61
             134:   19(fvec4)   VectorShuffle 133 132 0 4 5 6
                                Store 61 134
             137:    135(ptr)   AccessChain 61 56
             138:    6(float)   Load 137
             140:    6(float)   FMul 138 139
             142:    6(float)   FAdd 140 141
                                Store 136 142
             145:     42(ptr)   AccessChain 29 40 144
             146:    6(float)   Load 145
             148:    6(float)   FMul 146 147
             149:    6(float)   FAdd 148 141
                                Store 143 149
             150:    6(float)   Load 136
             151:    6(float)   Load 143
             152:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 150 151
             153:    135(ptr)   AccessChain 61 41
                                Store 153 152
             158:         155   Load 157
             159:   19(fvec4)   Load 61
             160:    7(fvec3)   VectorShuffle 159 159 0 2 3
             161:   19(fvec4)   ImageSampleImplicitLod 158 160
                                Store 61 161
             163:   19(fvec4)   Load 61
                                Store 162 163
                                Branch 55
             164:               Label
             165:    135(ptr)   AccessChain 162 41
                                Store 165 45
             166:    135(ptr)   AccessChain 162 56
                                Store 166 45
             167:    135(ptr)   AccessChain 162 144
                                Store 167 45
             169:    135(ptr)   AccessChain 162 168
                                Store 169 45
                                Branch 55
              55:             Label
             171:   19(fvec4) Load 162
             172:     32(ptr) AccessChain 29 67
             173:   19(fvec4) Load 172
             174:    6(float) Dot 171 173
             175:    135(ptr) AccessChain 170 41
                              Store 175 174
             176:    135(ptr) AccessChain 170 41
             177:    6(float) Load 176
             179:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 177 178 45
             180:    135(ptr) AccessChain 170 41
                              Store 180 179
             181:    7(fvec3) Load 170
             182:    7(fvec3) VectorShuffle 181 181 0 0 0
             184:     32(ptr) AccessChain 29 183
             185:   19(fvec4) Load 184
             186:    7(fvec3) VectorShuffle 185 185 0 1 2
             187:    7(fvec3) FMul 182 186
                              Store 170 187
             190:    7(fvec3) Load 189
             191:     32(ptr) AccessChain 29 74
             192:   19(fvec4) Load 191
             193:    7(fvec3) VectorShuffle 192 192 0 1 2
             194:    6(float) Dot 190 193
                              Store 188 194
             195:    6(float) Load 188
             196:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 195 178
                              Store 188 196
             197:    7(fvec3) Load 22
             198:    7(fvec3) Load 170
             199:    7(fvec3) FMul 197 198
                              Store 170 199
             202:    6(float) Load 188
             203:    7(fvec3) CompositeConstruct 202 202 202
             204:    7(fvec3) Load 170
             205:    7(fvec3) FMul 203 204
             206:   19(fvec4) Load 201
             207:   19(fvec4) VectorShuffle 206 205 4 5 6 3
                              Store 201 207
             209:    208(ptr) AccessChain 201 168
                              Store 209 45
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

-- Vertex shader for "d3d9":
// Stats: 20 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 11

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   _MainTex_ST         c11      1
//

    vs_3_0
    def c12, 1, 0, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4.xy
    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r2.x, c4, r1
    dp4 r2.y, c5, r1
    dp4 r2.z, c6, r1
    dp4 r2.w, c7, r1
    mad o1.xy, v2, c11, c11.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul o2.xyz, r0.w, r0
    mov o4.xy, c12.y
    mad o0.xy, r2.w, c255, r2
    mov o0.zw, r2

// approximately 22 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 21 math, 3 textures
Matrix4x4 unity_WorldToLight at 0
Vector4 _Color at 6
Vector4 _LightColor0 at 5
Vector4 _WorldSpaceLightPos0 at 4

Set 2D Texture "_LightTexture0" to slot 0
Set 2D Texture "_LightTextureB0" to slot 1
Set 2D Texture "_MainTex" to slot 2

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _LightColor0;
//   sampler2D _LightTexture0;
//   sampler2D _LightTextureB0;
//   sampler2D _MainTex;
//   float4 _WorldSpaceLightPos0;
//   row_major float4x4 unity_WorldToLight;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   unity_WorldToLight   c0       4
//   _WorldSpaceLightPos0 c4       1
//   _LightColor0         c5       1
//   _Color               c6       1
//   _LightTexture0       s0       1
//   _LightTextureB0      s1       1
//   _MainTex             s2       1
//

    ps_3_0
    def c7, 1, 0, 0.5, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_texcoord2 v2.xyz
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    mad r0, v2.xyzx, c7.xxxy, c7.yyyx
    dp4 r1.x, c3, r0
    rcp r1.x, r1.x
    dp4 r2.x, c0, r0
    dp4 r2.y, c1, r0
    dp4 r2.z, c2, r0
    mad r0.xy, r2, r1.x, c7.z
    dp3 r0.z, r2, r2
    texld_pp r1, r0.z, s1
    texld_pp r0, r0, s0
    mul r0.x, r1.x, r0.w
    mul_pp r0.xyz, r0.x, c5
    cmp_pp r0.xyz, -r2.z, c7.y, r0
    texld r1, v0, s2
    mul_pp r1.xyz, r1, c6
    mul_pp r0.xyz, r0, r1
    add r1.xyz, c4, -v2
    nrm_pp r2.xyz, r1
    dp3_pp r0.w, v1, r2
    max_pp r1.x, r0.w, c7.y
    mul_pp oC0.xyz, r0, r1.x
    mov_pp oC0.w, c7.x

// approximately 24 instruction slots used (3 texture, 21 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  12: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  13: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  14: dp3 r0.w, r0.xyzx, r0.xyzx
  15: rsq r0.w, r0.w
  16: mul o2.xyz, r0.wwww, r0.xyzx
  17: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 34 math, 4 temp registers, 4 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_LightTexture0" to slot 1
Set 2D Texture "_LightTextureB0" to slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 720
}
Constant Buffer "UnityProbeVolume" (112 bytes) on slot 2 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 16
  Vector4 unity_ProbeVolumeParams at 0
  Vector3 unity_ProbeVolumeSizeInv at 80
  Vector3 unity_ProbeVolumeMin at 96
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[46], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_sampler s3, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture2d (float,float,float,float) t2
      dcl_resource_texture3d (float,float,float,float) t3
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 4
   0: add r0.xyz, -v3.xyzx, cb1[0].xyzx
   1: dp3 r0.w, r0.xyzx, r0.xyzx
   2: rsq r0.w, r0.w
   3: mul r0.xyz, r0.wwww, r0.xyzx
   4: sample r1.xyzw, v1.xyxx, t0.xyzw, s3
   5: mul r1.xyz, r1.xyzx, cb0[8].xyzx
   6: mul r2.xyzw, v3.yyyy, cb0[5].xyzw
   7: mad r2.xyzw, cb0[4].xyzw, v3.xxxx, r2.xyzw
   8: mad r2.xyzw, cb0[6].xyzw, v3.zzzz, r2.xyzw
   9: add r2.xyzw, r2.xyzw, cb0[7].xyzw
  10: eq r0.w, cb2[0].x, l(1.000000)
  11: if_nz r0.w
  12:   eq r0.w, cb2[0].y, l(1.000000)
  13:   mul r3.xyz, v3.yyyy, cb2[2].xyzx
  14:   mad r3.xyz, cb2[1].xyzx, v3.xxxx, r3.xyzx
  15:   mad r3.xyz, cb2[3].xyzx, v3.zzzz, r3.xyzx
  16:   add r3.xyz, r3.xyzx, cb2[4].xyzx
  17:   movc r3.xyz, r0.wwww, r3.xyzx, v3.xyzx
  18:   add r3.xyz, r3.xyzx, -cb2[6].xyzx
  19:   mul r3.yzw, r3.xxyz, cb2[5].xxyz
  20:   mad r0.w, r3.y, l(0.250000), l(0.750000)
  21:   mad r1.w, cb2[0].z, l(0.500000), l(0.750000)
  22:   max r3.x, r0.w, r1.w
  23:   sample r3.xyzw, r3.xzwx, t3.xyzw, s0
  24: else 
  25:   mov r3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  26: endif 
  27: dp4_sat r0.w, r3.xyzw, cb1[45].xyzw
  28: lt r1.w, l(0.000000), r2.z
  29: and r1.w, r1.w, l(0x3f800000)
  30: div r3.xy, r2.xyxx, r2.wwww
  31: add r3.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  32: sample r3.xyzw, r3.xyxx, t1.xyzw, s1
  33: mul r1.w, r1.w, r3.w
  34: dp3 r2.x, r2.xyzx, r2.xyzx
  35: sample r2.xyzw, r2.xxxx, t2.xyzw, s2
  36: mul r1.w, r1.w, r2.x
  37: mul r0.w, r0.w, r1.w
  38: mul r2.xyz, r0.wwww, cb0[2].xyzx
  39: dp3 r0.x, v2.xyzx, r0.xyzx
  40: max r0.x, r0.x, l(0.000000)
  41: mul r0.yzw, r1.xxyz, r2.xxyz
  42: mul o0.xyz, r0.xxxx, r0.yzwy
  43: mov o0.w, l(1.000000)
  44: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 18 math, 3 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  highp vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_7 = tmpvar_8;
  tmpvar_6 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_9;
  tmpvar_9 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  highp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = xlv_TEXCOORD2;
  lightCoord_5 = (unity_WorldToLight * tmpvar_10);
  lowp vec4 tmpvar_11;
  highp vec2 P_12;
  P_12 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_11 = texture2D (_LightTexture0, P_12);
  highp float tmpvar_13;
  tmpvar_13 = dot (lightCoord_5.xyz, lightCoord_5.xyz);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_LightTextureB0, vec2(tmpvar_13));
  highp float tmpvar_15;
  tmpvar_15 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_11.w) * tmpvar_14.w);
  atten_4 = tmpvar_15;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_9.xyz * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9.w;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             9         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         7  ( FLT, FLT, FLT, FLT)
// c9         cb2            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          def c13, 0, 0, 0, 0
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c3
   2:     mad r0, c2, v0.x, r0
   3:     mad r0, c4, v0.z, r0
   4:     mad oT2.xyz, c5, v0.w, r0
   5:     add r0, r0, c5
   6:     dp3 r1.x, v2, c6
   7:     dp3 r1.y, v2, c7
   8:     dp3 r1.z, v2, c8
   9:     dp3 r1.w, r1, r1
  10:     rsq r1.w, r1.w
  11:     mul oT1.xyz, r1.w, r1
  12:     mul r1, r0.y, c10
  13:     mad r1, c9, r0.x, r1
  14:     mad r1, c11, r0.z, r1
  15:     mad r0, c12, r0.w, r1
  16:     mad oPos.xy, r0.w, c0, r0
  17:     mov oPos.zw, r0
  18:     mov oT0.zw, c13.x

// approximately 19 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  12: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  13: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  14: dp3 r0.w, r0.xyzx, r0.xyzx
  15: rsq r0.w, r0.w
  16: mul o2.xyz, r0.wwww, r0.xyzx
  17: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 21 math, 3 temp registers, 3 textures
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 0
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 1

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c1         cb0             4         5  ( FLT, FLT, FLT, FLT)
// c6         cb1             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t1               
// s1             s1              t2               
// s2             s2              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c7, 0.5, 0, 1, 0
          dcl t0
          dcl_pp t1.xyz
          dcl t2.xyz
          dcl_2d s0
          dcl_2d s1
          dcl_2d s2
   0:     mul r0, t2.y, c2
   1:     mad r0, c1, t2.x, r0
   2:     mad r0, c3, t2.z, r0
   3:     add r0, r0, c4
   4:     rcp r0.w, r0.w
   5:     mad r1.xy, r0, r0.w, c7.x
   6:     dp3 r0.xy, r0, r0
   7:     texld_pp r1, r1, s0
   7:     texld_pp r2, r0, s1
   7:     mul r0.x, r1.w, r2.x
   8:     mul_pp r0.xyw, r0.x, c0.xyzz
   9:     cmp_pp r0.xyz, -r0.z, c7.y, r0.xyww
  10:     texld r1, t0, s2
  10:     mul_pp r1.xyz, r1, c5
  11:     mul_pp r0.xyz, r0, r1
  12:     add r1.xyz, -t2, c6
  13:     nrm_pp r2.xyz, r1
  16:     dp3_pp r0.w, t1, r2
  17:     max_pp r1.x, r0.w, c7.y
  18:     mul_pp r0.xyz, r0, r1.x
  19:     mov r0.w, c7.z
  20:     mov_pp oC0, r0

// approximately 24 instruction slots used (3 texture, 21 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture2d (float,float,float,float) t2
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 3
   0: mul r0.xyzw, v3.yyyy, cb0[5].xyzw
   1: mad r0.xyzw, cb0[4].xyzw, v3.xxxx, r0.xyzw
   2: mad r0.xyzw, cb0[6].xyzw, v3.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb0[7].xyzw
   4: div r1.xy, r0.xyxx, r0.wwww
   5: add r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
   6: sample r1.xyzw, r1.xyxx, t1.xyzw, s0
   7: lt r0.w, l(0.000000), r0.z
   8: dp3 r0.x, r0.xyzx, r0.xyzx
   9: sample r2.xyzw, r0.xxxx, t2.xyzw, s1
  10: and r0.x, r0.w, l(0x3f800000)
  11: mul r0.x, r1.w, r0.x
  12: mul r0.x, r2.x, r0.x
  13: mul r0.xyz, r0.xxxx, cb0[2].xyzx
  14: sample r1.xyzw, v1.xyxx, t0.xyzw, s2
  15: mul r1.xyz, r1.xyzx, cb0[8].xyzx
  16: mul r0.xyz, r0.xyzx, r1.xyzx
  17: add r1.xyz, -v3.xyzx, cb1[0].xyzx
  18: dp3 r0.w, r1.xyzx, r1.xyzx
  19: rsq r0.w, r0.w
  20: mul r1.xyz, r0.wwww, r1.xyzx
  21: dp3 r0.w, v2.xyzx, r1.xyzx
  22: max r0.w, r0.w, l(0.000000)
  23: mul o0.xyz, r0.wwww, r0.xyzx
  24: mov o0.w, l(1.000000)
  25: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec2 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
float u_xlat9;
lowp float u_xlat10_9;
mediump float u_xlat16_11;
void main()
{
    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat10_9 = texture(_LightTexture0, u_xlat1.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat0.z);
#else
    u_xlatb1 = 0.0<u_xlat0.z;
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10_0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat10_0.x * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat16_11 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_11 = max(u_xlat16_11, 0.0);
    SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    output.TEXCOORD3.xy = float2(0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_LightTexture0" to slot 1
Set 2D Texture "_LightTextureB0" to slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 0

Constant Buffer "Globals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 _LightColor0 at 144
  Vector4 _Color at 224
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    bool u_xlatb13;
    float u_xlat14;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * Globals._Color.xyz;
    u_xlat2 = input.TEXCOORD2.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat2 = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD2.xxxx, u_xlat2);
    u_xlat2 = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD2.zzzz, u_xlat2);
    u_xlat2 = u_xlat2 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb12 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : input.TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat3.y, 0.25, 0.75);
        u_xlat13 = fma(Globals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat3.x = max(u_xlat12, u_xlat13);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat3, Globals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb13 = 0.0<u_xlat2.z;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat3.xy = u_xlat2.xy / u_xlat2.ww;
    u_xlat3.xy = u_xlat3.xy + float2(0.5, 0.5);
    u_xlat14 = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xy).w;
    u_xlat13 = u_xlat13 * u_xlat14;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat2.xx).x;
    u_xlat13 = u_xlat13 * u_xlat2.x;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat2.xyz = float3(u_xlat12) * Globals._LightColor0.xyz;
    u_xlat0.x = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    output.SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat12, u_xlat13);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlatb13 = 0.0<u_xlat2.z;
    u_xlat13 = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat3.xy = u_xlat2.xy / u_xlat2.ww;
    u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
    u_xlat10_3 = texture(_LightTexture0, u_xlat3.xy);
    u_xlat13 = u_xlat13 * u_xlat10_3.w;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10_2 = texture(_LightTextureB0, u_xlat2.xx);
    u_xlat13 = u_xlat13 * u_xlat10_2.w;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
u_xlatb18", used in: Fragment 

Set 2D Texture "_LightTexture0" to set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_LightTextureB0" to set: 0, binding: 2, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 3, used in: Fragment 

Constant Buffer "PGlobals1585714322" (240 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _Color at 224
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals1585714322" (208 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 128
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 159

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 52 85 97 98 109 113 150
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 64
                              MemberDecorate 19 2 Offset 128
                              MemberDecorate 19 3 Offset 192
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 52 Location 2
                              MemberDecorate 83 0 BuiltIn Position
                              MemberDecorate 83 1 BuiltIn PointSize
                              MemberDecorate 83 2 BuiltIn ClipDistance
                              Decorate 83 Block
                              Decorate 97 Location 0
                              Decorate 98 Location 2
                              Decorate 109 Location 3
                              Decorate 113 Location 1
                              Decorate 150 RelaxedPrecision
                              Decorate 150 Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              36:     22(int) Constant 2
              44:      8(ptr) Variable Private
              46:     22(int) Constant 3
              50:             TypeVector 6(float) 3
              51:             TypePointer Output 50(fvec3)
              52:     51(ptr) Variable Output
              81:     14(int) Constant 1
              82:             TypeArray 6(float) 81
              83:             TypeStruct 7(fvec4) 6(float) 82
              84:             TypePointer Output 83(struct)
              85:     84(ptr) Variable Output
              93:             TypePointer Output 7(fvec4)
              95:             TypeVector 6(float) 2
              96:             TypePointer Output 95(fvec2)
              97:     96(ptr) Variable Output
              98:     10(ptr) Variable Input
             109:     96(ptr) Variable Output
             110:    6(float) Constant 0
             111:   95(fvec2) ConstantComposite 110 110
             112:             TypePointer Input 50(fvec3)
             113:    112(ptr) Variable Input
             119:     14(int) Constant 0
             120:             TypePointer Private 6(float)
             133:     14(int) Constant 2
             135:    120(ptr) Variable Private
             150:     51(ptr) Variable Output
             153:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              29:     25(ptr) AccessChain 21 23 23
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     25(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              45:    7(fvec4) Load 9
              47:     25(ptr) AccessChain 21 23 46
              48:    7(fvec4) Load 47
              49:    7(fvec4) FAdd 45 48
                              Store 44 49
              53:     25(ptr) AccessChain 21 23 46
              54:    7(fvec4) Load 53
              55:   50(fvec3) VectorShuffle 54 54 0 1 2
              56:    7(fvec4) Load 11
              57:   50(fvec3) VectorShuffle 56 56 3 3 3
              58:   50(fvec3) FMul 55 57
              59:    7(fvec4) Load 9
              60:   50(fvec3) VectorShuffle 59 59 0 1 2
              61:   50(fvec3) FAdd 58 60
                              Store 52 61
              62:    7(fvec4) Load 44
              63:    7(fvec4) VectorShuffle 62 62 1 1 1 1
              64:     25(ptr) AccessChain 21 36 24
              65:    7(fvec4) Load 64
              66:    7(fvec4) FMul 63 65
                              Store 9 66
              67:     25(ptr) AccessChain 21 36 23
              68:    7(fvec4) Load 67
              69:    7(fvec4) Load 44
              70:    7(fvec4) VectorShuffle 69 69 0 0 0 0
              71:    7(fvec4) FMul 68 70
              72:    7(fvec4) Load 9
              73:    7(fvec4) FAdd 71 72
                              Store 9 73
              74:     25(ptr) AccessChain 21 36 36
              75:    7(fvec4) Load 74
              76:    7(fvec4) Load 44
              77:    7(fvec4) VectorShuffle 76 76 2 2 2 2
              78:    7(fvec4) FMul 75 77
              79:    7(fvec4) Load 9
              80:    7(fvec4) FAdd 78 79
                              Store 9 80
              86:     25(ptr) AccessChain 21 36 46
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 44
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 9
              92:    7(fvec4) FAdd 90 91
              94:     93(ptr) AccessChain 85 23
                              Store 94 92
              99:    7(fvec4) Load 98
             100:   95(fvec2) VectorShuffle 99 99 0 1
             101:     25(ptr) AccessChain 21 46
             102:    7(fvec4) Load 101
             103:   95(fvec2) VectorShuffle 102 102 0 1
             104:   95(fvec2) FMul 100 103
             105:     25(ptr) AccessChain 21 46
             106:    7(fvec4) Load 105
             107:   95(fvec2) VectorShuffle 106 106 2 3
             108:   95(fvec2) FAdd 104 107
                              Store 97 108
                              Store 109 111
             114:   50(fvec3) Load 113
             115:     25(ptr) AccessChain 21 24 23
             116:    7(fvec4) Load 115
             117:   50(fvec3) VectorShuffle 116 116 0 1 2
             118:    6(float) Dot 114 117
             121:    120(ptr) AccessChain 9 119
                              Store 121 118
             122:   50(fvec3) Load 113
             123:     25(ptr) AccessChain 21 24 24
             124:    7(fvec4) Load 123
             125:   50(fvec3) VectorShuffle 124 124 0 1 2
             126:    6(float) Dot 122 125
             127:    120(ptr) AccessChain 9 81
                              Store 127 126
             128:   50(fvec3) Load 113
             129:     25(ptr) AccessChain 21 24 36
             130:    7(fvec4) Load 129
             131:   50(fvec3) VectorShuffle 130 130 0 1 2
             132:    6(float) Dot 128 131
             134:    120(ptr) AccessChain 9 133
                              Store 134 132
             136:    7(fvec4) Load 9
             137:   50(fvec3) VectorShuffle 136 136 0 1 2
             138:    7(fvec4) Load 9
             139:   50(fvec3) VectorShuffle 138 138 0 1 2
             140:    6(float) Dot 137 139
                              Store 135 140
             141:    6(float) Load 135
             142:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 141
                              Store 135 142
             143:    6(float) Load 135
             144:   50(fvec3) CompositeConstruct 143 143 143
             145:    7(fvec4) Load 9
             146:   50(fvec3) VectorShuffle 145 145 0 1 2
             147:   50(fvec3) FMul 144 146
             148:    7(fvec4) Load 9
             149:    7(fvec4) VectorShuffle 148 147 4 5 6 3
                              Store 9 149
             151:    7(fvec4) Load 9
             152:   50(fvec3) VectorShuffle 151 151 0 1 2
                              Store 150 152
             154:    153(ptr) AccessChain 85 23 81
             155:    6(float) Load 154
             156:    6(float) FNegate 155
             157:    153(ptr) AccessChain 85 23 81
                              Store 157 156
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 300

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 11 48 280 290
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 11 Location 2
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 RelaxedPrecision
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 Offset 48
                              MemberDecorate 19 4 Offset 112
                              MemberDecorate 19 5 Offset 128
                              MemberDecorate 19 6 RelaxedPrecision
                              MemberDecorate 19 6 Offset 144
                              MemberDecorate 19 7 Offset 160
                              MemberDecorate 19 8 RelaxedPrecision
                              MemberDecorate 19 8 Offset 224
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 0
                              Decorate 40 RelaxedPrecision
                              Decorate 44 RelaxedPrecision
                              Decorate 44 DescriptorSet 0
                              Decorate 44 Binding 0
                              Decorate 45 RelaxedPrecision
                              Decorate 48 Location 0
                              Decorate 51 RelaxedPrecision
                              Decorate 52 RelaxedPrecision
                              Decorate 53 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 57 RelaxedPrecision
                              Decorate 58 RelaxedPrecision
                              Decorate 103 SpecId 0
                              Decorate 199 DescriptorSet 0
                              Decorate 199 Binding 3
                              Decorate 204 RelaxedPrecision
                              Decorate 212 RelaxedPrecision
                              Decorate 213 RelaxedPrecision
                              Decorate 215 RelaxedPrecision
                              Decorate 216 RelaxedPrecision
                              Decorate 219 RelaxedPrecision
                              Decorate 221 RelaxedPrecision
                              Decorate 226 RelaxedPrecision
                              Decorate 233 RelaxedPrecision
                              Decorate 244 RelaxedPrecision
                              Decorate 245 RelaxedPrecision
                              Decorate 245 DescriptorSet 0
                              Decorate 245 Binding 1
                              Decorate 246 RelaxedPrecision
                              Decorate 249 RelaxedPrecision
                              Decorate 250 RelaxedPrecision
                              Decorate 251 RelaxedPrecision
                              Decorate 252 RelaxedPrecision
                              Decorate 258 RelaxedPrecision
                              Decorate 258 DescriptorSet 0
                              Decorate 258 Binding 2
                              Decorate 259 RelaxedPrecision
                              Decorate 263 RelaxedPrecision
                              Decorate 264 RelaxedPrecision
                              Decorate 265 RelaxedPrecision
                              Decorate 266 RelaxedPrecision
                              Decorate 268 RelaxedPrecision
                              Decorate 269 RelaxedPrecision
                              Decorate 270 RelaxedPrecision
                              Decorate 272 RelaxedPrecision
                              Decorate 273 RelaxedPrecision
                              Decorate 276 RelaxedPrecision
                              Decorate 277 RelaxedPrecision
                              Decorate 278 RelaxedPrecision
                              Decorate 279 RelaxedPrecision
                              Decorate 280 RelaxedPrecision
                              Decorate 280 Location 1
                              Decorate 281 RelaxedPrecision
                              Decorate 284 RelaxedPrecision
                              Decorate 285 RelaxedPrecision
                              Decorate 286 RelaxedPrecision
                              Decorate 287 RelaxedPrecision
                              Decorate 288 RelaxedPrecision
                              Decorate 290 RelaxedPrecision
                              Decorate 290 Location 0
                              Decorate 291 RelaxedPrecision
                              Decorate 292 RelaxedPrecision
                              Decorate 293 RelaxedPrecision
                              Decorate 294 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec3)
              11:     10(ptr) Variable Input
              14:             TypeVector 6(float) 4
              15:             TypeInt 32 0
              16:     15(int) Constant 4
              17:             TypeArray 14(fvec4) 16
              18:             TypeArray 14(fvec4) 16
              19:             TypeStruct 14(fvec4) 14(fvec4) 14(fvec4) 17 7(fvec3) 7(fvec3) 14(fvec4) 18 14(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:             TypePointer Uniform 14(fvec4)
              29:             TypePointer Private 6(float)
              30:     29(ptr) Variable Private
              40:      8(ptr) Variable Private
              41:             TypeImage 6(float) 2D sampled format:Unknown
              42:             TypeSampledImage 41
              43:             TypePointer UniformConstant 42
              44:     43(ptr) Variable UniformConstant
              46:             TypeVector 6(float) 2
              47:             TypePointer Input 46(fvec2)
              48:     47(ptr) Variable Input
              52:      8(ptr) Variable Private
              54:     22(int) Constant 8
              59:             TypePointer Private 14(fvec4)
              60:     59(ptr) Variable Private
              63:     22(int) Constant 7
              64:     22(int) Constant 1
              75:     22(int) Constant 2
              84:     22(int) Constant 3
              88:             TypeBool
              89:             TypePointer Private 88(bool)
              90:     89(ptr) Variable Private
              91:     15(int) Constant 0
              92:             TypePointer Uniform 6(float)
              95:    6(float) Constant 1065353216
              97:    88(bool) ConstantFalse
             103:    88(bool) SpecConstantFalse
             106:     15(int) Constant 1
             110:     59(ptr) Variable Private
             149:             TypePointer Function 7(fvec3)
             163:     22(int) Constant 5
             164:             TypePointer Uniform 7(fvec3)
             173:     22(int) Constant 4
             181:    6(float) Constant 1048576000
             183:    6(float) Constant 1061158912
             185:     29(ptr) Variable Private
             186:     15(int) Constant 2
             189:    6(float) Constant 1056964608
             196:             TypeImage 6(float) 3D sampled format:Unknown
             197:             TypeSampledImage 196
             198:             TypePointer UniformConstant 197
             199:    198(ptr) Variable UniformConstant
             204:     59(ptr) Variable Private
             210:     15(int) Constant 3
             212:      8(ptr) Variable Private
             220:    6(float) Constant 0
             226:     29(ptr) Variable Private
             227:             TypePointer Function 6(float)
             234:             TypePointer Private 46(fvec2)
             235:    234(ptr) Variable Private
             242:   46(fvec2) ConstantComposite 189 189
             244:     29(ptr) Variable Private
             245:     43(ptr) Variable UniformConstant
             258:     43(ptr) Variable UniformConstant
             274:     22(int) Constant 6
             279:     29(ptr) Variable Private
             280:     10(ptr) Variable Input
             289:             TypePointer Output 14(fvec4)
             290:    289(ptr) Variable Output
             297:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             150:    149(ptr) Variable Function
             228:    227(ptr) Variable Function
              12:    7(fvec3) Load 11
              13:    7(fvec3) FNegate 12
              25:     24(ptr) AccessChain 21 23
              26:   14(fvec4) Load 25
              27:    7(fvec3) VectorShuffle 26 26 0 1 2
              28:    7(fvec3) FAdd 13 27
                              Store 9 28
              31:    7(fvec3) Load 9
              32:    7(fvec3) Load 9
              33:    6(float) Dot 31 32
                              Store 30 33
              34:    6(float) Load 30
              35:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 34
                              Store 30 35
              36:    6(float) Load 30
              37:    7(fvec3) CompositeConstruct 36 36 36
              38:    7(fvec3) Load 9
              39:    7(fvec3) FMul 37 38
                              Store 9 39
              45:          42 Load 44
              49:   46(fvec2) Load 48
              50:   14(fvec4) ImageSampleImplicitLod 45 49
              51:    7(fvec3) VectorShuffle 50 50 0 1 2
                              Store 40 51
              53:    7(fvec3) Load 40
              55:     24(ptr) AccessChain 21 54
              56:   14(fvec4) Load 55
              57:    7(fvec3) VectorShuffle 56 56 0 1 2
              58:    7(fvec3) FMul 53 57
                              Store 52 58
              61:    7(fvec3) Load 11
              62:   14(fvec4) VectorShuffle 61 61 1 1 1 1
              65:     24(ptr) AccessChain 21 63 64
              66:   14(fvec4) Load 65
              67:   14(fvec4) FMul 62 66
                              Store 60 67
              68:     24(ptr) AccessChain 21 63 23
              69:   14(fvec4) Load 68
              70:    7(fvec3) Load 11
              71:   14(fvec4) VectorShuffle 70 70 0 0 0 0
              72:   14(fvec4) FMul 69 71
              73:   14(fvec4) Load 60
              74:   14(fvec4) FAdd 72 73
                              Store 60 74
              76:     24(ptr) AccessChain 21 63 75
              77:   14(fvec4) Load 76
              78:    7(fvec3) Load 11
              79:   14(fvec4) VectorShuffle 78 78 2 2 2 2
              80:   14(fvec4) FMul 77 79
              81:   14(fvec4) Load 60
              82:   14(fvec4) FAdd 80 81
                              Store 60 82
              83:   14(fvec4) Load 60
              85:     24(ptr) AccessChain 21 63 84
              86:   14(fvec4) Load 85
              87:   14(fvec4) FAdd 83 86
                              Store 60 87
              93:     92(ptr) AccessChain 21 75 91
              94:    6(float) Load 93
              96:    88(bool) FOrdEqual 94 95
                              Store 90 96
                              SelectionMerge 99 None
                              BranchConditional 97 98 99
              98:               Label
             100:    88(bool)   Load 90
                                SelectionMerge 102 None
                                BranchConditional 100 101 102
             101:                 Label
                                  Branch 102
             102:               Label
                                Branch 99
              99:             Label
                              SelectionMerge 105 None
                              BranchConditional 103 104 206
             104:               Label
             107:     92(ptr)   AccessChain 21 75 106
             108:    6(float)   Load 107
             109:    88(bool)   FOrdEqual 108 95
                                Store 90 109
             111:    7(fvec3)   Load 11
             112:    7(fvec3)   VectorShuffle 111 111 1 1 1
             113:     24(ptr)   AccessChain 21 84 64
             114:   14(fvec4)   Load 113
             115:    7(fvec3)   VectorShuffle 114 114 0 1 2
             116:    7(fvec3)   FMul 112 115
             117:   14(fvec4)   Load 110
             118:   14(fvec4)   VectorShuffle 117 116 4 5 6 3
                                Store 110 118
             119:     24(ptr)   AccessChain 21 84 23
             120:   14(fvec4)   Load 119
             121:    7(fvec3)   VectorShuffle 120 120 0 1 2
             122:    7(fvec3)   Load 11
             123:    7(fvec3)   VectorShuffle 122 122 0 0 0
             124:    7(fvec3)   FMul 121 123
             125:   14(fvec4)   Load 110
             126:    7(fvec3)   VectorShuffle 125 125 0 1 2
             127:    7(fvec3)   FAdd 124 126
             128:   14(fvec4)   Load 110
             129:   14(fvec4)   VectorShuffle 128 127 4 5 6 3
                                Store 110 129
             130:     24(ptr)   AccessChain 21 84 75
             131:   14(fvec4)   Load 130
             132:    7(fvec3)   VectorShuffle 131 131 0 1 2
             133:    7(fvec3)   Load 11
             134:    7(fvec3)   VectorShuffle 133 133 2 2 2
             135:    7(fvec3)   FMul 132 134
             136:   14(fvec4)   Load 110
             137:    7(fvec3)   VectorShuffle 136 136 0 1 2
             138:    7(fvec3)   FAdd 135 137
             139:   14(fvec4)   Load 110
             140:   14(fvec4)   VectorShuffle 139 138 4 5 6 3
                                Store 110 140
             141:   14(fvec4)   Load 110
             142:    7(fvec3)   VectorShuffle 141 141 0 1 2
             143:     24(ptr)   AccessChain 21 84 84
             144:   14(fvec4)   Load 143
             145:    7(fvec3)   VectorShuffle 144 144 0 1 2
             146:    7(fvec3)   FAdd 142 145
             147:   14(fvec4)   Load 110
             148:   14(fvec4)   VectorShuffle 147 146 4 5 6 3
                                Store 110 148
             151:    88(bool)   Load 90
                                SelectionMerge 153 None
                                BranchConditional 151 152 156
             152:                 Label
             154:   14(fvec4)     Load 110
             155:    7(fvec3)     VectorShuffle 154 154 0 1 2
                                  Store 150 155
                                  Branch 153
             156:                 Label
             157:    7(fvec3)     Load 11
                                  Store 150 157
                                  Branch 153
             153:               Label
             158:    7(fvec3)   Load 150
             159:   14(fvec4)   Load 110
             160:   14(fvec4)   VectorShuffle 159 158 4 5 6 3
                                Store 110 160
             161:   14(fvec4)   Load 110
             162:    7(fvec3)   VectorShuffle 161 161 0 1 2
             165:    164(ptr)   AccessChain 21 163
             166:    7(fvec3)   Load 165
             167:    7(fvec3)   FNegate 166
             168:    7(fvec3)   FAdd 162 167
             169:   14(fvec4)   Load 110
             170:   14(fvec4)   VectorShuffle 169 168 4 5 6 3
                                Store 110 170
             171:   14(fvec4)   Load 110
             172:    7(fvec3)   VectorShuffle 171 171 0 1 2
             174:    164(ptr)   AccessChain 21 173
             175:    7(fvec3)   Load 174
             176:    7(fvec3)   FMul 172 175
             177:   14(fvec4)   Load 110
             178:   14(fvec4)   VectorShuffle 177 176 0 4 5 6
                                Store 110 178
             179:     29(ptr)   AccessChain 110 106
             180:    6(float)   Load 179
             182:    6(float)   FMul 180 181
             184:    6(float)   FAdd 182 183
                                Store 30 184
             187:     92(ptr)   AccessChain 21 75 186
             188:    6(float)   Load 187
             190:    6(float)   FMul 188 189
             191:    6(float)   FAdd 190 183
                                Store 185 191
             192:    6(float)   Load 30
             193:    6(float)   Load 185
             194:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 192 193
             195:     29(ptr)   AccessChain 110 91
                                Store 195 194
             200:         197   Load 199
             201:   14(fvec4)   Load 110
             202:    7(fvec3)   VectorShuffle 201 201 0 2 3
             203:   14(fvec4)   ImageSampleImplicitLod 200 202
                                Store 110 203
             205:   14(fvec4)   Load 110
                                Store 204 205
                                Branch 105
             206:               Label
             207:     29(ptr)   AccessChain 204 91
                                Store 207 95
             208:     29(ptr)   AccessChain 204 106
                                Store 208 95
             209:     29(ptr)   AccessChain 204 186
                                Store 209 95
             211:     29(ptr)   AccessChain 204 210
                                Store 211 95
                                Branch 105
             105:             Label
             213:   14(fvec4) Load 204
             214:     24(ptr) AccessChain 21 64
             215:   14(fvec4) Load 214
             216:    6(float) Dot 213 215
             217:     29(ptr) AccessChain 212 91
                              Store 217 216
             218:     29(ptr) AccessChain 212 91
             219:    6(float) Load 218
             221:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 219 220 95
             222:     29(ptr) AccessChain 212 91
                              Store 222 221
             223:     29(ptr) AccessChain 60 186
             224:    6(float) Load 223
             225:    88(bool) FOrdLessThan 220 224
                              Store 90 225
             229:    88(bool) Load 90
                              SelectionMerge 231 None
                              BranchConditional 229 230 232
             230:               Label
                                Store 228 95
                                Branch 231
             232:               Label
                                Store 228 220
                                Branch 231
             231:             Label
             233:    6(float) Load 228
                              Store 226 233
             236:   14(fvec4) Load 60
             237:   46(fvec2) VectorShuffle 236 236 0 1
             238:   14(fvec4) Load 60
             239:   46(fvec2) VectorShuffle 238 238 3 3
             240:   46(fvec2) FDiv 237 239
                              Store 235 240
             241:   46(fvec2) Load 235
             243:   46(fvec2) FAdd 241 242
                              Store 235 243
             246:          42 Load 245
             247:   46(fvec2) Load 235
             248:   14(fvec4) ImageSampleImplicitLod 246 247
             249:    6(float) CompositeExtract 248 3
                              Store 244 249
             250:    6(float) Load 244
             251:    6(float) Load 226
             252:    6(float) FMul 250 251
                              Store 226 252
             253:   14(fvec4) Load 60
             254:    7(fvec3) VectorShuffle 253 253 0 1 2
             255:   14(fvec4) Load 60
             256:    7(fvec3) VectorShuffle 255 255 0 1 2
             257:    6(float) Dot 254 256
                              Store 30 257
             259:          42 Load 258
             260:    6(float) Load 30
             261:   46(fvec2) CompositeConstruct 260 260
             262:   14(fvec4) ImageSampleImplicitLod 259 261
             263:    6(float) CompositeExtract 262 3
                              Store 244 263
             264:    6(float) Load 244
             265:    6(float) Load 226
             266:    6(float) FMul 264 265
                              Store 226 266
             267:     29(ptr) AccessChain 212 91
             268:    6(float) Load 267
             269:    6(float) Load 226
             270:    6(float) FMul 268 269
             271:     29(ptr) AccessChain 212 91
                              Store 271 270
             272:    7(fvec3) Load 212
             273:    7(fvec3) VectorShuffle 272 272 0 0 0
             275:     24(ptr) AccessChain 21 274
             276:   14(fvec4) Load 275
             277:    7(fvec3) VectorShuffle 276 276 0 1 2
             278:    7(fvec3) FMul 273 277
                              Store 212 278
             281:    7(fvec3) Load 280
             282:    7(fvec3) Load 9
             283:    6(float) Dot 281 282
                              Store 279 283
             284:    6(float) Load 279
             285:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 284 220
                              Store 279 285
             286:    7(fvec3) Load 52
             287:    7(fvec3) Load 212
             288:    7(fvec3) FMul 286 287
                              Store 212 288
             291:    6(float) Load 279
             292:    7(fvec3) CompositeConstruct 291 291 291
             293:    7(fvec3) Load 212
             294:    7(fvec3) FMul 292 293
             295:   14(fvec4) Load 290
             296:   14(fvec4) VectorShuffle 295 294 4 5 6 3
                              Store 290 296
             298:    297(ptr) AccessChain 290 210
                              Store 298 95
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE 
-- Vertex shader for "d3d9":
// Stats: 20 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 11

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   _MainTex_ST         c11      1
//

    vs_3_0
    def c12, 1, 0, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4.xy
    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r2.x, c4, r1
    dp4 r2.y, c5, r1
    dp4 r2.z, c6, r1
    dp4 r2.w, c7, r1
    mad o1.xy, v2, c11, c11.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul o2.xyz, r0.w, r0
    mov o4.xy, c12.y
    mad o0.xy, r2.w, c255, r2
    mov o0.zw, r2

// approximately 22 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 17 math, 3 textures
Matrix4x3 unity_WorldToLight at 0
Vector4 _Color at 5
Vector4 _LightColor0 at 4
Vector4 _WorldSpaceLightPos0 at 3

Set CUBE Texture "_LightTexture0" to slot 0
Set 2D Texture "_LightTextureB0" to slot 1
Set 2D Texture "_MainTex" to slot 2

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _LightColor0;
//   samplerCUBE _LightTexture0;
//   sampler2D _LightTextureB0;
//   sampler2D _MainTex;
//   float4 _WorldSpaceLightPos0;
//   row_major float4x4 unity_WorldToLight;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   unity_WorldToLight   c0       3
//   _WorldSpaceLightPos0 c3       1
//   _LightColor0         c4       1
//   _Color               c5       1
//   _LightTexture0       s0       1
//   _LightTextureB0      s1       1
//   _MainTex             s2       1
//

    ps_3_0
    def c6, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_texcoord2 v2.xyz
    dcl_cube s0
    dcl_2d s1
    dcl_2d s2
    mad r0, v2.xyzx, c6.xxxy, c6.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp3 r0.x, r1, r1
    texld r1, r1, s0
    texld r0, r0.x, s1
    mul_pp r0.x, r1.w, r0.x
    mul_pp r0.xyz, r0.x, c4
    texld r1, v0, s2
    mul_pp r1.xyz, r1, c5
    mul_pp r0.xyz, r0, r1
    add r1.xyz, c3, -v2
    nrm_pp r2.xyz, r1
    dp3_pp r0.w, v1, r2
    max_pp r1.x, r0.w, c6.y
    mul_pp oC0.xyz, r0, r1.x
    mov_pp oC0.w, c6.x

// approximately 20 instruction slots used (3 texture, 17 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  12: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  13: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  14: dp3 r0.w, r0.xyzx, r0.xyzx
  15: rsq r0.w, r0.w
  16: mul o2.xyz, r0.wwww, r0.xyzx
  17: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 29 math, 4 temp registers, 4 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_LightTextureB0" to slot 1 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 2 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 720
}
Constant Buffer "UnityProbeVolume" (112 bytes) on slot 2 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 16
  Vector4 unity_ProbeVolumeParams at 0
  Vector3 unity_ProbeVolumeSizeInv at 80
  Vector3 unity_ProbeVolumeMin at 96
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[46], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_sampler s3, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texturecube (float,float,float,float) t2
      dcl_resource_texture3d (float,float,float,float) t3
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 4
   0: add r0.xyz, -v3.xyzx, cb1[0].xyzx
   1: dp3 r0.w, r0.xyzx, r0.xyzx
   2: rsq r0.w, r0.w
   3: mul r0.xyz, r0.wwww, r0.xyzx
   4: sample r1.xyzw, v1.xyxx, t0.xyzw, s3
   5: mul r1.xyz, r1.xyzx, cb0[8].xyzx
   6: mul r2.xyz, v3.yyyy, cb0[5].xyzx
   7: mad r2.xyz, cb0[4].xyzx, v3.xxxx, r2.xyzx
   8: mad r2.xyz, cb0[6].xyzx, v3.zzzz, r2.xyzx
   9: add r2.xyz, r2.xyzx, cb0[7].xyzx
  10: eq r0.w, cb2[0].x, l(1.000000)
  11: if_nz r0.w
  12:   eq r0.w, cb2[0].y, l(1.000000)
  13:   mul r3.xyz, v3.yyyy, cb2[2].xyzx
  14:   mad r3.xyz, cb2[1].xyzx, v3.xxxx, r3.xyzx
  15:   mad r3.xyz, cb2[3].xyzx, v3.zzzz, r3.xyzx
  16:   add r3.xyz, r3.xyzx, cb2[4].xyzx
  17:   movc r3.xyz, r0.wwww, r3.xyzx, v3.xyzx
  18:   add r3.xyz, r3.xyzx, -cb2[6].xyzx
  19:   mul r3.yzw, r3.xxyz, cb2[5].xxyz
  20:   mad r0.w, r3.y, l(0.250000), l(0.750000)
  21:   mad r1.w, cb2[0].z, l(0.500000), l(0.750000)
  22:   max r3.x, r0.w, r1.w
  23:   sample r3.xyzw, r3.xzwx, t3.xyzw, s0
  24: else 
  25:   mov r3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  26: endif 
  27: dp4_sat r0.w, r3.xyzw, cb1[45].xyzw
  28: dp3 r1.w, r2.xyzx, r2.xyzx
  29: sample r3.xyzw, r1.wwww, t1.xyzw, s2
  30: sample r2.xyzw, r2.xyzx, t2.xyzw, s1
  31: mul r1.w, r2.w, r3.x
  32: mul r0.w, r0.w, r1.w
  33: mul r2.xyz, r0.wwww, cb0[2].xyzx
  34: dp3 r0.x, v2.xyzx, r0.xyzx
  35: max r0.x, r0.x, l(0.000000)
  36: mul r0.yzw, r1.xxyz, r2.xxyz
  37: mul o0.xyz, r0.xxxx, r0.yzwy
  38: mov o0.w, l(1.000000)
  39: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 13 math, 3 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  highp vec3 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD2;
  lightCoord_4 = (unity_WorldToLight * tmpvar_9).xyz;
  highp float tmpvar_10;
  tmpvar_10 = dot (lightCoord_4, lightCoord_4);
  lowp float tmpvar_11;
  tmpvar_11 = (texture2D (_LightTextureB0, vec2(tmpvar_10)).w * textureCube (_LightTexture0, lightCoord_4).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_11);
  lowp vec4 c_12;
  lowp vec4 c_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_14 = tmpvar_15;
  c_13.xyz = ((tmpvar_8.xyz * tmpvar_1) * diff_14);
  c_13.w = tmpvar_8.w;
  c_12.w = c_13.w;
  c_12.xyz = c_13.xyz;
  c_3.xyz = c_12.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             9         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         7  ( FLT, FLT, FLT, FLT)
// c9         cb2            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          def c13, 0, 0, 0, 0
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c3
   2:     mad r0, c2, v0.x, r0
   3:     mad r0, c4, v0.z, r0
   4:     mad oT2.xyz, c5, v0.w, r0
   5:     add r0, r0, c5
   6:     dp3 r1.x, v2, c6
   7:     dp3 r1.y, v2, c7
   8:     dp3 r1.z, v2, c8
   9:     dp3 r1.w, r1, r1
  10:     rsq r1.w, r1.w
  11:     mul oT1.xyz, r1.w, r1
  12:     mul r1, r0.y, c10
  13:     mad r1, c9, r0.x, r1
  14:     mad r1, c11, r0.z, r1
  15:     mad r0, c12, r0.w, r1
  16:     mad oPos.xy, r0.w, c0, r0
  17:     mov oPos.zw, r0
  18:     mov oT0.zw, c13.x

// approximately 19 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  12: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  13: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  14: dp3 r0.w, r0.xyzx, r0.xyzx
  15: rsq r0.w, r0.w
  16: mul o2.xyz, r0.wwww, r0.xyzx
  17: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 16 math, 2 temp registers, 3 textures
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 1
Set CUBE Texture "_LightTexture0" to slot 2 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c1         cb0             4         5  ( FLT, FLT, FLT, FLT)
// c6         cb1             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t2               
// s1             s1              t1               
// s2             s2              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c7, 0, 1, 0, 0
          dcl t0
          dcl_pp t1.xyz
          dcl t2.xyz
          dcl_cube s0
          dcl_2d s1
          dcl_2d s2
   0:     mul r0.xyz, t2.y, c2
   1:     mad r0.xyz, c1, t2.x, r0
   2:     mad r0.xyz, c3, t2.z, r0
   3:     add r0.xyz, r0, c4
   4:     dp3 r0.w, r0, r0
   5:     mov r1.xy, r0.w
   6:     texld r0, r0, s0
   6:     texld r1, r1, s1
   6:     mul_pp r0.x, r0.w, r1.x
   7:     mul_pp r0.xyz, r0.x, c0
   8:     texld r1, t0, s2
   8:     mul_pp r1.xyz, r1, c5
   9:     mul_pp r0.xyz, r0, r1
  10:     add r1.xyz, -t2, c6
  11:     nrm_pp r2.xyz, r1
  14:     dp3_pp r0.w, t1, r2
  15:     max_pp r1.x, r0.w, c7.x
  16:     mul_pp r0.xyz, r0, r1.x
  17:     mov_pp r0.w, c7.y
  18:     mov_pp oC0, r0

// approximately 22 instruction slots used (3 texture, 19 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texturecube (float,float,float,float) t2
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: mul r0.xyz, v3.yyyy, cb0[5].xyzx
   1: mad r0.xyz, cb0[4].xyzx, v3.xxxx, r0.xyzx
   2: mad r0.xyz, cb0[6].xyzx, v3.zzzz, r0.xyzx
   3: add r0.xyz, r0.xyzx, cb0[7].xyzx
   4: dp3 r0.w, r0.xyzx, r0.xyzx
   5: sample r1.xyzw, r0.xyzx, t2.xyzw, s0
   6: sample r0.xyzw, r0.wwww, t1.xyzw, s1
   7: mul r0.x, r1.w, r0.x
   8: mul r0.xyz, r0.xxxx, cb0[2].xyzx
   9: sample r1.xyzw, v1.xyxx, t0.xyzw, s2
  10: mul r1.xyz, r1.xyzx, cb0[8].xyzx
  11: mul r0.xyz, r0.xyzx, r1.xyzx
  12: add r1.xyz, -v3.xyzx, cb1[0].xyzx
  13: dp3 r0.w, r1.xyzx, r1.xyzx
  14: rsq r0.w, r0.w
  15: mul r1.xyz, r0.wwww, r1.xyzx
  16: dp3 r0.w, v2.xyzx, r1.xyzx
  17: max r0.w, r0.w, l(0.000000)
  18: mul o0.xyz, r0.wwww, r0.xyzx
  19: mov o0.w, l(1.000000)
  20: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_2;
float u_xlat6;
mediump float u_xlat16_7;
void main()
{
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10_0.x = texture(_LightTexture0, u_xlat0.xyz).w;
    u_xlat10_2 = texture(_LightTextureB0, vec2(u_xlat6)).w;
    u_xlat16_0.x = u_xlat10_0.x * u_xlat10_2;
    u_xlat16_1.xyz = u_xlat16_0.xxx * _LightColor0.xyz;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz;
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat16_7 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_7 = max(u_xlat16_7, 0.0);
    SV_Target0.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    output.TEXCOORD3.xy = float2(0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_LightTextureB0" to slot 1 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 2 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 0

Constant Buffer "Globals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 _LightColor0 at 144
  Vector4 _Color at 224
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (1) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture (2) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * Globals._Color.xyz;
    u_xlat2.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD2.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD2.zzz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb12 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : input.TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat3.y, 0.25, 0.75);
        u_xlat13 = fma(Globals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat3.x = max(u_xlat12, u_xlat13);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat3, Globals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat13)).x;
    u_xlat2.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat2.xyz).w;
    u_xlat13 = u_xlat13 * u_xlat2.x;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat2.xyz = float3(u_xlat12) * Globals._LightColor0.xyz;
    u_xlat0.x = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    output.SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat16_13;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
        u_xlat13 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat12, u_xlat13);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10_3 = texture(_LightTextureB0, vec2(u_xlat13));
    u_xlat10_2 = texture(_LightTexture0, u_xlat2.xyz);
    u_xlat16_13 = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat12 = u_xlat12 * u_xlat16_13;
    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
u_xlatb15", used in: Fragment 

Set CUBE Texture "_LightTexture0" to set: 0, binding: 2, used in: Fragment 
Set 2D Texture "_LightTextureB0" to set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 3, used in: Fragment 

Constant Buffer "PGlobals2804361442" (240 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _Color at 224
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals2804361442" (208 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 128
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 159

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 52 85 97 98 109 113 150
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 64
                              MemberDecorate 19 2 Offset 128
                              MemberDecorate 19 3 Offset 192
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 52 Location 2
                              MemberDecorate 83 0 BuiltIn Position
                              MemberDecorate 83 1 BuiltIn PointSize
                              MemberDecorate 83 2 BuiltIn ClipDistance
                              Decorate 83 Block
                              Decorate 97 Location 0
                              Decorate 98 Location 2
                              Decorate 109 Location 3
                              Decorate 113 Location 1
                              Decorate 150 RelaxedPrecision
                              Decorate 150 Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              36:     22(int) Constant 2
              44:      8(ptr) Variable Private
              46:     22(int) Constant 3
              50:             TypeVector 6(float) 3
              51:             TypePointer Output 50(fvec3)
              52:     51(ptr) Variable Output
              81:     14(int) Constant 1
              82:             TypeArray 6(float) 81
              83:             TypeStruct 7(fvec4) 6(float) 82
              84:             TypePointer Output 83(struct)
              85:     84(ptr) Variable Output
              93:             TypePointer Output 7(fvec4)
              95:             TypeVector 6(float) 2
              96:             TypePointer Output 95(fvec2)
              97:     96(ptr) Variable Output
              98:     10(ptr) Variable Input
             109:     96(ptr) Variable Output
             110:    6(float) Constant 0
             111:   95(fvec2) ConstantComposite 110 110
             112:             TypePointer Input 50(fvec3)
             113:    112(ptr) Variable Input
             119:     14(int) Constant 0
             120:             TypePointer Private 6(float)
             133:     14(int) Constant 2
             135:    120(ptr) Variable Private
             150:     51(ptr) Variable Output
             153:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              29:     25(ptr) AccessChain 21 23 23
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     25(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              45:    7(fvec4) Load 9
              47:     25(ptr) AccessChain 21 23 46
              48:    7(fvec4) Load 47
              49:    7(fvec4) FAdd 45 48
                              Store 44 49
              53:     25(ptr) AccessChain 21 23 46
              54:    7(fvec4) Load 53
              55:   50(fvec3) VectorShuffle 54 54 0 1 2
              56:    7(fvec4) Load 11
              57:   50(fvec3) VectorShuffle 56 56 3 3 3
              58:   50(fvec3) FMul 55 57
              59:    7(fvec4) Load 9
              60:   50(fvec3) VectorShuffle 59 59 0 1 2
              61:   50(fvec3) FAdd 58 60
                              Store 52 61
              62:    7(fvec4) Load 44
              63:    7(fvec4) VectorShuffle 62 62 1 1 1 1
              64:     25(ptr) AccessChain 21 36 24
              65:    7(fvec4) Load 64
              66:    7(fvec4) FMul 63 65
                              Store 9 66
              67:     25(ptr) AccessChain 21 36 23
              68:    7(fvec4) Load 67
              69:    7(fvec4) Load 44
              70:    7(fvec4) VectorShuffle 69 69 0 0 0 0
              71:    7(fvec4) FMul 68 70
              72:    7(fvec4) Load 9
              73:    7(fvec4) FAdd 71 72
                              Store 9 73
              74:     25(ptr) AccessChain 21 36 36
              75:    7(fvec4) Load 74
              76:    7(fvec4) Load 44
              77:    7(fvec4) VectorShuffle 76 76 2 2 2 2
              78:    7(fvec4) FMul 75 77
              79:    7(fvec4) Load 9
              80:    7(fvec4) FAdd 78 79
                              Store 9 80
              86:     25(ptr) AccessChain 21 36 46
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 44
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 9
              92:    7(fvec4) FAdd 90 91
              94:     93(ptr) AccessChain 85 23
                              Store 94 92
              99:    7(fvec4) Load 98
             100:   95(fvec2) VectorShuffle 99 99 0 1
             101:     25(ptr) AccessChain 21 46
             102:    7(fvec4) Load 101
             103:   95(fvec2) VectorShuffle 102 102 0 1
             104:   95(fvec2) FMul 100 103
             105:     25(ptr) AccessChain 21 46
             106:    7(fvec4) Load 105
             107:   95(fvec2) VectorShuffle 106 106 2 3
             108:   95(fvec2) FAdd 104 107
                              Store 97 108
                              Store 109 111
             114:   50(fvec3) Load 113
             115:     25(ptr) AccessChain 21 24 23
             116:    7(fvec4) Load 115
             117:   50(fvec3) VectorShuffle 116 116 0 1 2
             118:    6(float) Dot 114 117
             121:    120(ptr) AccessChain 9 119
                              Store 121 118
             122:   50(fvec3) Load 113
             123:     25(ptr) AccessChain 21 24 24
             124:    7(fvec4) Load 123
             125:   50(fvec3) VectorShuffle 124 124 0 1 2
             126:    6(float) Dot 122 125
             127:    120(ptr) AccessChain 9 81
                              Store 127 126
             128:   50(fvec3) Load 113
             129:     25(ptr) AccessChain 21 24 36
             130:    7(fvec4) Load 129
             131:   50(fvec3) VectorShuffle 130 130 0 1 2
             132:    6(float) Dot 128 131
             134:    120(ptr) AccessChain 9 133
                              Store 134 132
             136:    7(fvec4) Load 9
             137:   50(fvec3) VectorShuffle 136 136 0 1 2
             138:    7(fvec4) Load 9
             139:   50(fvec3) VectorShuffle 138 138 0 1 2
             140:    6(float) Dot 137 139
                              Store 135 140
             141:    6(float) Load 135
             142:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 141
                              Store 135 142
             143:    6(float) Load 135
             144:   50(fvec3) CompositeConstruct 143 143 143
             145:    7(fvec4) Load 9
             146:   50(fvec3) VectorShuffle 145 145 0 1 2
             147:   50(fvec3) FMul 144 146
             148:    7(fvec4) Load 9
             149:    7(fvec4) VectorShuffle 148 147 4 5 6 3
                              Store 9 149
             151:    7(fvec4) Load 9
             152:   50(fvec3) VectorShuffle 151 151 0 1 2
                              Store 150 152
             154:    153(ptr) AccessChain 85 23 81
             155:    6(float) Load 154
             156:    6(float) FNegate 155
             157:    153(ptr) AccessChain 85 23 81
                              Store 157 156
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 282

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 11 48 262 272
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 11 Location 2
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 RelaxedPrecision
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 Offset 48
                              MemberDecorate 19 4 Offset 112
                              MemberDecorate 19 5 Offset 128
                              MemberDecorate 19 6 RelaxedPrecision
                              MemberDecorate 19 6 Offset 144
                              MemberDecorate 19 7 Offset 160
                              MemberDecorate 19 8 RelaxedPrecision
                              MemberDecorate 19 8 Offset 224
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 0
                              Decorate 40 RelaxedPrecision
                              Decorate 44 RelaxedPrecision
                              Decorate 44 DescriptorSet 0
                              Decorate 44 Binding 0
                              Decorate 45 RelaxedPrecision
                              Decorate 48 Location 0
                              Decorate 51 RelaxedPrecision
                              Decorate 52 RelaxedPrecision
                              Decorate 53 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 57 RelaxedPrecision
                              Decorate 58 RelaxedPrecision
                              Decorate 106 SpecId 0
                              Decorate 203 DescriptorSet 0
                              Decorate 203 Binding 3
                              Decorate 208 RelaxedPrecision
                              Decorate 216 RelaxedPrecision
                              Decorate 217 RelaxedPrecision
                              Decorate 219 RelaxedPrecision
                              Decorate 220 RelaxedPrecision
                              Decorate 223 RelaxedPrecision
                              Decorate 225 RelaxedPrecision
                              Decorate 230 RelaxedPrecision
                              Decorate 231 RelaxedPrecision
                              Decorate 231 DescriptorSet 0
                              Decorate 231 Binding 1
                              Decorate 232 RelaxedPrecision
                              Decorate 236 RelaxedPrecision
                              Decorate 237 RelaxedPrecision
                              Decorate 241 RelaxedPrecision
                              Decorate 241 DescriptorSet 0
                              Decorate 241 Binding 2
                              Decorate 242 RelaxedPrecision
                              Decorate 245 RelaxedPrecision
                              Decorate 246 RelaxedPrecision
                              Decorate 247 RelaxedPrecision
                              Decorate 248 RelaxedPrecision
                              Decorate 249 RelaxedPrecision
                              Decorate 251 RelaxedPrecision
                              Decorate 252 RelaxedPrecision
                              Decorate 253 RelaxedPrecision
                              Decorate 254 RelaxedPrecision
                              Decorate 255 RelaxedPrecision
                              Decorate 258 RelaxedPrecision
                              Decorate 259 RelaxedPrecision
                              Decorate 260 RelaxedPrecision
                              Decorate 261 RelaxedPrecision
                              Decorate 262 RelaxedPrecision
                              Decorate 262 Location 1
                              Decorate 263 RelaxedPrecision
                              Decorate 266 RelaxedPrecision
                              Decorate 267 RelaxedPrecision
                              Decorate 268 RelaxedPrecision
                              Decorate 269 RelaxedPrecision
                              Decorate 270 RelaxedPrecision
                              Decorate 272 RelaxedPrecision
                              Decorate 272 Location 0
                              Decorate 273 RelaxedPrecision
                              Decorate 274 RelaxedPrecision
                              Decorate 275 RelaxedPrecision
                              Decorate 276 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec3)
              11:     10(ptr) Variable Input
              14:             TypeVector 6(float) 4
              15:             TypeInt 32 0
              16:     15(int) Constant 4
              17:             TypeArray 14(fvec4) 16
              18:             TypeArray 14(fvec4) 16
              19:             TypeStruct 14(fvec4) 14(fvec4) 14(fvec4) 17 7(fvec3) 7(fvec3) 14(fvec4) 18 14(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:             TypePointer Uniform 14(fvec4)
              29:             TypePointer Private 6(float)
              30:     29(ptr) Variable Private
              40:      8(ptr) Variable Private
              41:             TypeImage 6(float) 2D sampled format:Unknown
              42:             TypeSampledImage 41
              43:             TypePointer UniformConstant 42
              44:     43(ptr) Variable UniformConstant
              46:             TypeVector 6(float) 2
              47:             TypePointer Input 46(fvec2)
              48:     47(ptr) Variable Input
              52:      8(ptr) Variable Private
              54:     22(int) Constant 8
              59:      8(ptr) Variable Private
              62:     22(int) Constant 7
              63:     22(int) Constant 1
              76:     22(int) Constant 2
              86:     22(int) Constant 3
              91:             TypeBool
              92:             TypePointer Private 91(bool)
              93:     92(ptr) Variable Private
              94:     15(int) Constant 0
              95:             TypePointer Uniform 6(float)
              98:    6(float) Constant 1065353216
             100:    91(bool) ConstantFalse
             106:    91(bool) SpecConstantFalse
             109:     15(int) Constant 1
             113:             TypePointer Private 14(fvec4)
             114:    113(ptr) Variable Private
             153:             TypePointer Function 7(fvec3)
             167:     22(int) Constant 5
             168:             TypePointer Uniform 7(fvec3)
             177:     22(int) Constant 4
             185:    6(float) Constant 1048576000
             187:    6(float) Constant 1061158912
             189:     29(ptr) Variable Private
             190:     15(int) Constant 2
             193:    6(float) Constant 1056964608
             200:             TypeImage 6(float) 3D sampled format:Unknown
             201:             TypeSampledImage 200
             202:             TypePointer UniformConstant 201
             203:    202(ptr) Variable UniformConstant
             208:    113(ptr) Variable Private
             214:     15(int) Constant 3
             216:      8(ptr) Variable Private
             224:    6(float) Constant 0
             230:     29(ptr) Variable Private
             231:     43(ptr) Variable UniformConstant
             237:     29(ptr) Variable Private
             238:             TypeImage 6(float) Cube sampled format:Unknown
             239:             TypeSampledImage 238
             240:             TypePointer UniformConstant 239
             241:    240(ptr) Variable UniformConstant
             246:     29(ptr) Variable Private
             256:     22(int) Constant 6
             261:     29(ptr) Variable Private
             262:     10(ptr) Variable Input
             271:             TypePointer Output 14(fvec4)
             272:    271(ptr) Variable Output
             279:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             154:    153(ptr) Variable Function
              12:    7(fvec3) Load 11
              13:    7(fvec3) FNegate 12
              25:     24(ptr) AccessChain 21 23
              26:   14(fvec4) Load 25
              27:    7(fvec3) VectorShuffle 26 26 0 1 2
              28:    7(fvec3) FAdd 13 27
                              Store 9 28
              31:    7(fvec3) Load 9
              32:    7(fvec3) Load 9
              33:    6(float) Dot 31 32
                              Store 30 33
              34:    6(float) Load 30
              35:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 34
                              Store 30 35
              36:    6(float) Load 30
              37:    7(fvec3) CompositeConstruct 36 36 36
              38:    7(fvec3) Load 9
              39:    7(fvec3) FMul 37 38
                              Store 9 39
              45:          42 Load 44
              49:   46(fvec2) Load 48
              50:   14(fvec4) ImageSampleImplicitLod 45 49
              51:    7(fvec3) VectorShuffle 50 50 0 1 2
                              Store 40 51
              53:    7(fvec3) Load 40
              55:     24(ptr) AccessChain 21 54
              56:   14(fvec4) Load 55
              57:    7(fvec3) VectorShuffle 56 56 0 1 2
              58:    7(fvec3) FMul 53 57
                              Store 52 58
              60:    7(fvec3) Load 11
              61:    7(fvec3) VectorShuffle 60 60 1 1 1
              64:     24(ptr) AccessChain 21 62 63
              65:   14(fvec4) Load 64
              66:    7(fvec3) VectorShuffle 65 65 0 1 2
              67:    7(fvec3) FMul 61 66
                              Store 59 67
              68:     24(ptr) AccessChain 21 62 23
              69:   14(fvec4) Load 68
              70:    7(fvec3) VectorShuffle 69 69 0 1 2
              71:    7(fvec3) Load 11
              72:    7(fvec3) VectorShuffle 71 71 0 0 0
              73:    7(fvec3) FMul 70 72
              74:    7(fvec3) Load 59
              75:    7(fvec3) FAdd 73 74
                              Store 59 75
              77:     24(ptr) AccessChain 21 62 76
              78:   14(fvec4) Load 77
              79:    7(fvec3) VectorShuffle 78 78 0 1 2
              80:    7(fvec3) Load 11
              81:    7(fvec3) VectorShuffle 80 80 2 2 2
              82:    7(fvec3) FMul 79 81
              83:    7(fvec3) Load 59
              84:    7(fvec3) FAdd 82 83
                              Store 59 84
              85:    7(fvec3) Load 59
              87:     24(ptr) AccessChain 21 62 86
              88:   14(fvec4) Load 87
              89:    7(fvec3) VectorShuffle 88 88 0 1 2
              90:    7(fvec3) FAdd 85 89
                              Store 59 90
              96:     95(ptr) AccessChain 21 76 94
              97:    6(float) Load 96
              99:    91(bool) FOrdEqual 97 98
                              Store 93 99
                              SelectionMerge 102 None
                              BranchConditional 100 101 102
             101:               Label
             103:    91(bool)   Load 93
                                SelectionMerge 105 None
                                BranchConditional 103 104 105
             104:                 Label
                                  Branch 105
             105:               Label
                                Branch 102
             102:             Label
                              SelectionMerge 108 None
                              BranchConditional 106 107 210
             107:               Label
             110:     95(ptr)   AccessChain 21 76 109
             111:    6(float)   Load 110
             112:    91(bool)   FOrdEqual 111 98
                                Store 93 112
             115:    7(fvec3)   Load 11
             116:    7(fvec3)   VectorShuffle 115 115 1 1 1
             117:     24(ptr)   AccessChain 21 86 63
             118:   14(fvec4)   Load 117
             119:    7(fvec3)   VectorShuffle 118 118 0 1 2
             120:    7(fvec3)   FMul 116 119
             121:   14(fvec4)   Load 114
             122:   14(fvec4)   VectorShuffle 121 120 4 5 6 3
                                Store 114 122
             123:     24(ptr)   AccessChain 21 86 23
             124:   14(fvec4)   Load 123
             125:    7(fvec3)   VectorShuffle 124 124 0 1 2
             126:    7(fvec3)   Load 11
             127:    7(fvec3)   VectorShuffle 126 126 0 0 0
             128:    7(fvec3)   FMul 125 127
             129:   14(fvec4)   Load 114
             130:    7(fvec3)   VectorShuffle 129 129 0 1 2
             131:    7(fvec3)   FAdd 128 130
             132:   14(fvec4)   Load 114
             133:   14(fvec4)   VectorShuffle 132 131 4 5 6 3
                                Store 114 133
             134:     24(ptr)   AccessChain 21 86 76
             135:   14(fvec4)   Load 134
             136:    7(fvec3)   VectorShuffle 135 135 0 1 2
             137:    7(fvec3)   Load 11
             138:    7(fvec3)   VectorShuffle 137 137 2 2 2
             139:    7(fvec3)   FMul 136 138
             140:   14(fvec4)   Load 114
             141:    7(fvec3)   VectorShuffle 140 140 0 1 2
             142:    7(fvec3)   FAdd 139 141
             143:   14(fvec4)   Load 114
             144:   14(fvec4)   VectorShuffle 143 142 4 5 6 3
                                Store 114 144
             145:   14(fvec4)   Load 114
             146:    7(fvec3)   VectorShuffle 145 145 0 1 2
             147:     24(ptr)   AccessChain 21 86 86
             148:   14(fvec4)   Load 147
             149:    7(fvec3)   VectorShuffle 148 148 0 1 2
             150:    7(fvec3)   FAdd 146 149
             151:   14(fvec4)   Load 114
             152:   14(fvec4)   VectorShuffle 151 150 4 5 6 3
                                Store 114 152
             155:    91(bool)   Load 93
                                SelectionMerge 157 None
                                BranchConditional 155 156 160
             156:                 Label
             158:   14(fvec4)     Load 114
             159:    7(fvec3)     VectorShuffle 158 158 0 1 2
                                  Store 154 159
                                  Branch 157
             160:                 Label
             161:    7(fvec3)     Load 11
                                  Store 154 161
                                  Branch 157
             157:               Label
             162:    7(fvec3)   Load 154
             163:   14(fvec4)   Load 114
             164:   14(fvec4)   VectorShuffle 163 162 4 5 6 3
                                Store 114 164
             165:   14(fvec4)   Load 114
             166:    7(fvec3)   VectorShuffle 165 165 0 1 2
             169:    168(ptr)   AccessChain 21 167
             170:    7(fvec3)   Load 169
             171:    7(fvec3)   FNegate 170
             172:    7(fvec3)   FAdd 166 171
             173:   14(fvec4)   Load 114
             174:   14(fvec4)   VectorShuffle 173 172 4 5 6 3
                                Store 114 174
             175:   14(fvec4)   Load 114
             176:    7(fvec3)   VectorShuffle 175 175 0 1 2
             178:    168(ptr)   AccessChain 21 177
             179:    7(fvec3)   Load 178
             180:    7(fvec3)   FMul 176 179
             181:   14(fvec4)   Load 114
             182:   14(fvec4)   VectorShuffle 181 180 0 4 5 6
                                Store 114 182
             183:     29(ptr)   AccessChain 114 109
             184:    6(float)   Load 183
             186:    6(float)   FMul 184 185
             188:    6(float)   FAdd 186 187
                                Store 30 188
             191:     95(ptr)   AccessChain 21 76 190
             192:    6(float)   Load 191
             194:    6(float)   FMul 192 193
             195:    6(float)   FAdd 194 187
                                Store 189 195
             196:    6(float)   Load 30
             197:    6(float)   Load 189
             198:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 196 197
             199:     29(ptr)   AccessChain 114 94
                                Store 199 198
             204:         201   Load 203
             205:   14(fvec4)   Load 114
             206:    7(fvec3)   VectorShuffle 205 205 0 2 3
             207:   14(fvec4)   ImageSampleImplicitLod 204 206
                                Store 114 207
             209:   14(fvec4)   Load 114
                                Store 208 209
                                Branch 108
             210:               Label
             211:     29(ptr)   AccessChain 208 94
                                Store 211 98
             212:     29(ptr)   AccessChain 208 109
                                Store 212 98
             213:     29(ptr)   AccessChain 208 190
                                Store 213 98
             215:     29(ptr)   AccessChain 208 214
                                Store 215 98
                                Branch 108
             108:             Label
             217:   14(fvec4) Load 208
             218:     24(ptr) AccessChain 21 63
             219:   14(fvec4) Load 218
             220:    6(float) Dot 217 219
             221:     29(ptr) AccessChain 216 94
                              Store 221 220
             222:     29(ptr) AccessChain 216 94
             223:    6(float) Load 222
             225:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 223 224 98
             226:     29(ptr) AccessChain 216 94
                              Store 226 225
             227:    7(fvec3) Load 59
             228:    7(fvec3) Load 59
             229:    6(float) Dot 227 228
                              Store 30 229
             232:          42 Load 231
             233:    6(float) Load 30
             234:   46(fvec2) CompositeConstruct 233 233
             235:   14(fvec4) ImageSampleImplicitLod 232 234
             236:    6(float) CompositeExtract 235 3
                              Store 230 236
             242:         239 Load 241
             243:    7(fvec3) Load 59
             244:   14(fvec4) ImageSampleImplicitLod 242 243
             245:    6(float) CompositeExtract 244 3
                              Store 237 245
             247:    6(float) Load 230
             248:    6(float) Load 237
             249:    6(float) FMul 247 248
                              Store 246 249
             250:     29(ptr) AccessChain 216 94
             251:    6(float) Load 250
             252:    6(float) Load 246
             253:    6(float) FMul 251 252
                              Store 246 253
             254:    6(float) Load 246
             255:    7(fvec3) CompositeConstruct 254 254 254
             257:     24(ptr) AccessChain 21 256
             258:   14(fvec4) Load 257
             259:    7(fvec3) VectorShuffle 258 258 0 1 2
             260:    7(fvec3) FMul 255 259
                              Store 216 260
             263:    7(fvec3) Load 262
             264:    7(fvec3) Load 9
             265:    6(float) Dot 263 264
                              Store 261 265
             266:    6(float) Load 261
             267:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 266 224
                              Store 261 267
             268:    7(fvec3) Load 52
             269:    7(fvec3) Load 216
             270:    7(fvec3) FMul 268 269
                              Store 216 270
             273:    6(float) Load 261
             274:    7(fvec3) CompositeConstruct 273 273 273
             275:    7(fvec3) Load 216
             276:    7(fvec3) FMul 274 275
             277:   14(fvec4) Load 272
             278:   14(fvec4) VectorShuffle 277 276 4 5 6 3
                              Store 272 278
             280:    279(ptr) AccessChain 272 214
                              Store 280 98
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

-- Vertex shader for "d3d9":
// Stats: 20 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 11

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   _MainTex_ST         c11      1
//

    vs_3_0
    def c12, 1, 0, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4.xy
    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r2.x, c4, r1
    dp4 r2.y, c5, r1
    dp4 r2.z, c6, r1
    dp4 r2.w, c7, r1
    mad o1.xy, v2, c11, c11.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul o2.xyz, r0.w, r0
    mov o4.xy, c12.y
    mad o0.xy, r2.w, c255, r2
    mov o0.zw, r2

// approximately 22 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 10 math, 2 textures
Matrix4x2 unity_WorldToLight at 0
Vector4 _Color at 4
Vector4 _LightColor0 at 3
Vector4 _WorldSpaceLightPos0 at 2

Set 2D Texture "_LightTexture0" to slot 0
Set 2D Texture "_MainTex" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _LightColor0;
//   sampler2D _LightTexture0;
//   sampler2D _MainTex;
//   float4 _WorldSpaceLightPos0;
//   row_major float4x4 unity_WorldToLight;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   unity_WorldToLight   c0       2
//   _WorldSpaceLightPos0 c2       1
//   _LightColor0         c3       1
//   _Color               c4       1
//   _LightTexture0       s0       1
//   _MainTex             s1       1
//

    ps_3_0
    def c5, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_texcoord2 v2.xyz
    dcl_2d s0
    dcl_2d s1
    mad r0, v2.xyzx, c5.xxxy, c5.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    texld_pp r0, r1, s0
    mul_pp r0.xyz, r0.w, c3
    texld r1, v0, s1
    mul_pp r1.xyz, r1, c4
    mul_pp r0.xyz, r0, r1
    dp3_pp r0.w, v1, c2
    max_pp r1.x, r0.w, c5.y
    mul_pp oC0.xyz, r0, r1.x
    mov_pp oC0.w, c5.x

// approximately 12 instruction slots used (2 texture, 10 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  12: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  13: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  14: dp3 r0.w, r0.xyzx, r0.xyzx
  15: rsq r0.w, r0.w
  16: mul o2.xyz, r0.wwww, r0.xyzx
  17: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 23 math, 3 temp registers, 3 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 720
}
Constant Buffer "UnityProbeVolume" (112 bytes) on slot 2 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 16
  Vector4 unity_ProbeVolumeParams at 0
  Vector3 unity_ProbeVolumeSizeInv at 80
  Vector3 unity_ProbeVolumeMin at 96
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[46], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture3d (float,float,float,float) t2
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 3
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s2
   1: mul r0.xyz, r0.xyzx, cb0[8].xyzx
   2: mul r1.xy, v3.yyyy, cb0[5].xyxx
   3: mad r1.xy, cb0[4].xyxx, v3.xxxx, r1.xyxx
   4: mad r1.xy, cb0[6].xyxx, v3.zzzz, r1.xyxx
   5: add r1.xy, r1.xyxx, cb0[7].xyxx
   6: eq r0.w, cb2[0].x, l(1.000000)
   7: if_nz r0.w
   8:   eq r0.w, cb2[0].y, l(1.000000)
   9:   mul r2.xyz, v3.yyyy, cb2[2].xyzx
  10:   mad r2.xyz, cb2[1].xyzx, v3.xxxx, r2.xyzx
  11:   mad r2.xyz, cb2[3].xyzx, v3.zzzz, r2.xyzx
  12:   add r2.xyz, r2.xyzx, cb2[4].xyzx
  13:   movc r2.xyz, r0.wwww, r2.xyzx, v3.xyzx
  14:   add r2.xyz, r2.xyzx, -cb2[6].xyzx
  15:   mul r2.yzw, r2.xxyz, cb2[5].xxyz
  16:   mad r0.w, r2.y, l(0.250000), l(0.750000)
  17:   mad r1.z, cb2[0].z, l(0.500000), l(0.750000)
  18:   max r2.x, r0.w, r1.z
  19:   sample r2.xyzw, r2.xzwx, t2.xyzw, s0
  20: else 
  21:   mov r2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  22: endif 
  23: dp4_sat r0.w, r2.xyzw, cb1[45].xyzw
  24: sample r1.xyzw, r1.xyxx, t1.xyzw, s1
  25: mul r0.w, r0.w, r1.w
  26: mul r1.xyz, r0.wwww, cb0[2].xyzx
  27: dp3 r0.w, v2.xyzx, cb1[0].xyzx
  28: max r0.w, r0.w, l(0.000000)
  29: mul r0.xyz, r0.xyzx, r1.xyzx
  30: mul o0.xyz, r0.wwww, r0.xyzx
  31: mov o0.w, l(1.000000)
  32: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 9 math, 2 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec2 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec2 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  highp vec2 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD2;
  lightCoord_4 = (unity_WorldToLight * tmpvar_9).xy;
  lowp float tmpvar_10;
  tmpvar_10 = texture2D (_LightTexture0, lightCoord_4).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * tmpvar_10);
  lowp vec4 c_11;
  lowp vec4 c_12;
  lowp float diff_13;
  mediump float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_13 = tmpvar_14;
  c_12.xyz = ((tmpvar_8.xyz * tmpvar_1) * diff_13);
  c_12.w = tmpvar_8.w;
  c_11.w = c_12.w;
  c_11.xyz = c_12.xyz;
  c_3.xyz = c_11.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float     zw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             9         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         7  ( FLT, FLT, FLT, FLT)
// c9         cb2            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          def c13, 0, 0, 0, 0
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c3
   2:     mad r0, c2, v0.x, r0
   3:     mad r0, c4, v0.z, r0
   4:     mad oT2.xyz, c5, v0.w, r0
   5:     add r0, r0, c5
   6:     dp3 r1.x, v2, c6
   7:     dp3 r1.y, v2, c7
   8:     dp3 r1.z, v2, c8
   9:     dp3 r1.w, r1, r1
  10:     rsq r1.w, r1.w
  11:     mul oT1.xyz, r1.w, r1
  12:     mul r1, r0.y, c10
  13:     mad r1, c9, r0.x, r1
  14:     mad r1, c11, r0.z, r1
  15:     mad r0, c12, r0.w, r1
  16:     mad oPos.xy, r0.w, c0, r0
  17:     mov oPos.zw, r0
  18:     mov oT0.zw, c13.x

// approximately 19 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o1.zw
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: mov o1.zw, l(0,0,0,0)
  11: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  12: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  13: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  14: dp3 r0.w, r0.xyzx, r0.xyzx
  15: rsq r0.w, r0.w
  16: mul o2.xyz, r0.wwww, r0.xyzx
  17: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 10 math, 2 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c1         cb0             4         5  ( FLT, FLT, FLT, FLT)
// c6         cb1             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t1               
// s1             s1              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c7, 0, 1, 0, 0
          dcl t0
          dcl_pp t1.xyz
          dcl t2.xyz
          dcl_2d s0
          dcl_2d s1
   0:     mul r0.xy, t2.y, c2
   1:     mad r0.xy, c1, t2.x, r0
   2:     mad r0.xy, c3, t2.z, r0
   3:     add r0.xy, r0, c4
   4:     texld r1, t0, s1
   4:     texld_pp r0, r0, s0
   4:     mul_pp r0.xyz, r0.w, c0
   5:     mul_pp r1.xyz, r1, c5
   6:     mul_pp r0.xyz, r0, r1
   7:     dp3_pp r0.w, t1, c6
   8:     max_pp r1.x, r0.w, c7.x
   9:     mul_pp r0.xyz, r0, r1.x
  10:     mov_pp r0.w, c7.y
  11:     mov_pp oC0, r0

// approximately 14 instruction slots used (2 texture, 12 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: mul r0.xy, v3.yyyy, cb0[5].xyxx
   1: mad r0.xy, cb0[4].xyxx, v3.xxxx, r0.xyxx
   2: mad r0.xy, cb0[6].xyxx, v3.zzzz, r0.xyxx
   3: add r0.xy, r0.xyxx, cb0[7].xyxx
   4: sample r0.xyzw, r0.xyxx, t1.xyzw, s0
   5: mul r0.xyz, r0.wwww, cb0[2].xyzx
   6: sample r1.xyzw, v1.xyxx, t0.xyzw, s1
   7: mul r1.xyz, r1.xyzx, cb0[8].xyzx
   8: mul r0.xyz, r0.xyzx, r1.xyzx
   9: dp3 r0.w, v2.xyzx, cb1[0].xyzx
  10: max r0.w, r0.w, l(0.000000)
  11: mul o0.xyz, r0.wwww, r0.xyzx
  12: mov o0.w, l(1.000000)
  13: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump float u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat10_0.x = texture(_LightTexture0, u_xlat0.xy).w;
    u_xlat16_1.xyz = u_xlat10_0.xxx * _LightColor0.xyz;
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz;
    u_xlat16_7 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_7 = max(u_xlat16_7, 0.0);
    SV_Target0.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    output.TEXCOORD3.xy = float2(0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "Globals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 _LightColor0 at 144
  Vector4 _Color at 224
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float u_xlat7;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * Globals._Color.xyz;
    u_xlat1.xy = input.TEXCOORD2.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD2.xx, u_xlat1.xy);
    u_xlat1.xy = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD2.zz, u_xlat1.xy);
    u_xlat1.xy = u_xlat1.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb9 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb9 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : input.TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat9 = fma(u_xlat2.y, 0.25, 0.75);
        u_xlat7 = fma(Globals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat2.x = max(u_xlat9, u_xlat7);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    }
    u_xlat9 = dot(u_xlat2, Globals.unity_OcclusionMaskSelector);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat1.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat1.xy).w;
    u_xlat9 = u_xlat9 * u_xlat1.x;
    u_xlat1.xyz = float3(u_xlat9) * Globals._LightColor0.xyz;
    u_xlat9 = dot(input.TEXCOORD1.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    output.SV_Target0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec2 vs_TEXCOORD3;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
float u_xlat7;
float u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb9 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat9 = u_xlat2.y * 0.25 + 0.75;
        u_xlat7 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat9, u_xlat7);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat9 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    u_xlat10_1 = texture(_LightTexture0, u_xlat1.xy);
    u_xlat9 = u_xlat9 * u_xlat10_1.w;
    u_xlat1.xyz = vec3(u_xlat9) * _LightColor0.xyz;
    u_xlat9 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat9 = max(u_xlat9, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
u_xlatb12", used in: Fragment 

Set 2D Texture "_LightTexture0" to set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 2, used in: Fragment 

Constant Buffer "PGlobals3813408423" (240 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _Color at 224
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals3813408423" (208 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 128
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 159

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 52 85 97 98 109 113 150
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 64
                              MemberDecorate 19 2 Offset 128
                              MemberDecorate 19 3 Offset 192
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 52 Location 2
                              MemberDecorate 83 0 BuiltIn Position
                              MemberDecorate 83 1 BuiltIn PointSize
                              MemberDecorate 83 2 BuiltIn ClipDistance
                              Decorate 83 Block
                              Decorate 97 Location 0
                              Decorate 98 Location 2
                              Decorate 109 Location 3
                              Decorate 113 Location 1
                              Decorate 150 RelaxedPrecision
                              Decorate 150 Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              36:     22(int) Constant 2
              44:      8(ptr) Variable Private
              46:     22(int) Constant 3
              50:             TypeVector 6(float) 3
              51:             TypePointer Output 50(fvec3)
              52:     51(ptr) Variable Output
              81:     14(int) Constant 1
              82:             TypeArray 6(float) 81
              83:             TypeStruct 7(fvec4) 6(float) 82
              84:             TypePointer Output 83(struct)
              85:     84(ptr) Variable Output
              93:             TypePointer Output 7(fvec4)
              95:             TypeVector 6(float) 2
              96:             TypePointer Output 95(fvec2)
              97:     96(ptr) Variable Output
              98:     10(ptr) Variable Input
             109:     96(ptr) Variable Output
             110:    6(float) Constant 0
             111:   95(fvec2) ConstantComposite 110 110
             112:             TypePointer Input 50(fvec3)
             113:    112(ptr) Variable Input
             119:     14(int) Constant 0
             120:             TypePointer Private 6(float)
             133:     14(int) Constant 2
             135:    120(ptr) Variable Private
             150:     51(ptr) Variable Output
             153:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              29:     25(ptr) AccessChain 21 23 23
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     25(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              45:    7(fvec4) Load 9
              47:     25(ptr) AccessChain 21 23 46
              48:    7(fvec4) Load 47
              49:    7(fvec4) FAdd 45 48
                              Store 44 49
              53:     25(ptr) AccessChain 21 23 46
              54:    7(fvec4) Load 53
              55:   50(fvec3) VectorShuffle 54 54 0 1 2
              56:    7(fvec4) Load 11
              57:   50(fvec3) VectorShuffle 56 56 3 3 3
              58:   50(fvec3) FMul 55 57
              59:    7(fvec4) Load 9
              60:   50(fvec3) VectorShuffle 59 59 0 1 2
              61:   50(fvec3) FAdd 58 60
                              Store 52 61
              62:    7(fvec4) Load 44
              63:    7(fvec4) VectorShuffle 62 62 1 1 1 1
              64:     25(ptr) AccessChain 21 36 24
              65:    7(fvec4) Load 64
              66:    7(fvec4) FMul 63 65
                              Store 9 66
              67:     25(ptr) AccessChain 21 36 23
              68:    7(fvec4) Load 67
              69:    7(fvec4) Load 44
              70:    7(fvec4) VectorShuffle 69 69 0 0 0 0
              71:    7(fvec4) FMul 68 70
              72:    7(fvec4) Load 9
              73:    7(fvec4) FAdd 71 72
                              Store 9 73
              74:     25(ptr) AccessChain 21 36 36
              75:    7(fvec4) Load 74
              76:    7(fvec4) Load 44
              77:    7(fvec4) VectorShuffle 76 76 2 2 2 2
              78:    7(fvec4) FMul 75 77
              79:    7(fvec4) Load 9
              80:    7(fvec4) FAdd 78 79
                              Store 9 80
              86:     25(ptr) AccessChain 21 36 46
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 44
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 9
              92:    7(fvec4) FAdd 90 91
              94:     93(ptr) AccessChain 85 23
                              Store 94 92
              99:    7(fvec4) Load 98
             100:   95(fvec2) VectorShuffle 99 99 0 1
             101:     25(ptr) AccessChain 21 46
             102:    7(fvec4) Load 101
             103:   95(fvec2) VectorShuffle 102 102 0 1
             104:   95(fvec2) FMul 100 103
             105:     25(ptr) AccessChain 21 46
             106:    7(fvec4) Load 105
             107:   95(fvec2) VectorShuffle 106 106 2 3
             108:   95(fvec2) FAdd 104 107
                              Store 97 108
                              Store 109 111
             114:   50(fvec3) Load 113
             115:     25(ptr) AccessChain 21 24 23
             116:    7(fvec4) Load 115
             117:   50(fvec3) VectorShuffle 116 116 0 1 2
             118:    6(float) Dot 114 117
             121:    120(ptr) AccessChain 9 119
                              Store 121 118
             122:   50(fvec3) Load 113
             123:     25(ptr) AccessChain 21 24 24
             124:    7(fvec4) Load 123
             125:   50(fvec3) VectorShuffle 124 124 0 1 2
             126:    6(float) Dot 122 125
             127:    120(ptr) AccessChain 9 81
                              Store 127 126
             128:   50(fvec3) Load 113
             129:     25(ptr) AccessChain 21 24 36
             130:    7(fvec4) Load 129
             131:   50(fvec3) VectorShuffle 130 130 0 1 2
             132:    6(float) Dot 128 131
             134:    120(ptr) AccessChain 9 133
                              Store 134 132
             136:    7(fvec4) Load 9
             137:   50(fvec3) VectorShuffle 136 136 0 1 2
             138:    7(fvec4) Load 9
             139:   50(fvec3) VectorShuffle 138 138 0 1 2
             140:    6(float) Dot 137 139
                              Store 135 140
             141:    6(float) Load 135
             142:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 141
                              Store 135 142
             143:    6(float) Load 135
             144:   50(fvec3) CompositeConstruct 143 143 143
             145:    7(fvec4) Load 9
             146:   50(fvec3) VectorShuffle 145 145 0 1 2
             147:   50(fvec3) FMul 144 146
             148:    7(fvec4) Load 9
             149:    7(fvec4) VectorShuffle 148 147 4 5 6 3
                              Store 9 149
             151:    7(fvec4) Load 9
             152:   50(fvec3) VectorShuffle 151 151 0 1 2
                              Store 150 152
             154:    153(ptr) AccessChain 85 23 81
             155:    6(float) Load 154
             156:    6(float) FNegate 155
             157:    153(ptr) AccessChain 85 23 81
                              Store 157 156
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 253

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 41 231 243
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 0
                              Decorate 21 RelaxedPrecision
                              Decorate 22 RelaxedPrecision
                              Decorate 23 RelaxedPrecision
                              Decorate 26 ArrayStride 16
                              Decorate 27 ArrayStride 16
                              MemberDecorate 28 0 RelaxedPrecision
                              MemberDecorate 28 0 Offset 0
                              MemberDecorate 28 1 RelaxedPrecision
                              MemberDecorate 28 1 Offset 16
                              MemberDecorate 28 2 Offset 32
                              MemberDecorate 28 3 Offset 48
                              MemberDecorate 28 4 Offset 112
                              MemberDecorate 28 5 Offset 128
                              MemberDecorate 28 6 RelaxedPrecision
                              MemberDecorate 28 6 Offset 144
                              MemberDecorate 28 7 Offset 160
                              MemberDecorate 28 8 RelaxedPrecision
                              MemberDecorate 28 8 Offset 224
                              Decorate 28 Block
                              Decorate 30 DescriptorSet 1
                              Decorate 30 Binding 0
                              Decorate 35 RelaxedPrecision
                              Decorate 36 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 41 Location 2
                              Decorate 89 SpecId 0
                              Decorate 188 DescriptorSet 0
                              Decorate 188 Binding 2
                              Decorate 193 RelaxedPrecision
                              Decorate 201 RelaxedPrecision
                              Decorate 202 RelaxedPrecision
                              Decorate 204 RelaxedPrecision
                              Decorate 205 RelaxedPrecision
                              Decorate 208 RelaxedPrecision
                              Decorate 210 RelaxedPrecision
                              Decorate 212 RelaxedPrecision
                              Decorate 213 RelaxedPrecision
                              Decorate 213 DescriptorSet 0
                              Decorate 213 Binding 1
                              Decorate 214 RelaxedPrecision
                              Decorate 217 RelaxedPrecision
                              Decorate 218 RelaxedPrecision
                              Decorate 220 RelaxedPrecision
                              Decorate 221 RelaxedPrecision
                              Decorate 222 RelaxedPrecision
                              Decorate 223 RelaxedPrecision
                              Decorate 224 RelaxedPrecision
                              Decorate 227 RelaxedPrecision
                              Decorate 228 RelaxedPrecision
                              Decorate 229 RelaxedPrecision
                              Decorate 230 RelaxedPrecision
                              Decorate 231 RelaxedPrecision
                              Decorate 231 Location 1
                              Decorate 232 RelaxedPrecision
                              Decorate 234 RelaxedPrecision
                              Decorate 235 RelaxedPrecision
                              Decorate 236 RelaxedPrecision
                              Decorate 237 RelaxedPrecision
                              Decorate 238 RelaxedPrecision
                              Decorate 239 RelaxedPrecision
                              Decorate 240 RelaxedPrecision
                              Decorate 241 RelaxedPrecision
                              Decorate 243 RelaxedPrecision
                              Decorate 243 Location 0
                              Decorate 244 RelaxedPrecision
                              Decorate 245 RelaxedPrecision
                              Decorate 246 RelaxedPrecision
                              Decorate 247 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              19:             TypeVector 6(float) 4
              22:      8(ptr) Variable Private
              24:             TypeInt 32 0
              25:     24(int) Constant 4
              26:             TypeArray 19(fvec4) 25
              27:             TypeArray 19(fvec4) 25
              28:             TypeStruct 19(fvec4) 19(fvec4) 19(fvec4) 26 7(fvec3) 7(fvec3) 19(fvec4) 27 19(fvec4)
              29:             TypePointer Uniform 28(struct)
              30:     29(ptr) Variable Uniform
              31:             TypeInt 32 1
              32:     31(int) Constant 8
              33:             TypePointer Uniform 19(fvec4)
              38:             TypePointer Private 15(fvec2)
              39:     38(ptr) Variable Private
              40:             TypePointer Input 7(fvec3)
              41:     40(ptr) Variable Input
              44:     31(int) Constant 7
              45:     31(int) Constant 1
              50:     31(int) Constant 0
              59:     31(int) Constant 2
              69:     31(int) Constant 3
              74:             TypeBool
              75:             TypePointer Private 74(bool)
              76:     75(ptr) Variable Private
              77:     24(int) Constant 0
              78:             TypePointer Uniform 6(float)
              81:    6(float) Constant 1065353216
              83:    74(bool) ConstantFalse
              89:    74(bool) SpecConstantFalse
              92:     24(int) Constant 1
              96:             TypePointer Private 19(fvec4)
              97:     96(ptr) Variable Private
             136:             TypePointer Function 7(fvec3)
             150:     31(int) Constant 5
             151:             TypePointer Uniform 7(fvec3)
             160:     31(int) Constant 4
             166:             TypePointer Private 6(float)
             167:    166(ptr) Variable Private
             170:    6(float) Constant 1048576000
             172:    6(float) Constant 1061158912
             174:    166(ptr) Variable Private
             175:     24(int) Constant 2
             178:    6(float) Constant 1056964608
             185:             TypeImage 6(float) 3D sampled format:Unknown
             186:             TypeSampledImage 185
             187:             TypePointer UniformConstant 186
             188:    187(ptr) Variable UniformConstant
             193:     96(ptr) Variable Private
             199:     24(int) Constant 3
             201:      8(ptr) Variable Private
             209:    6(float) Constant 0
             212:    166(ptr) Variable Private
             213:     12(ptr) Variable UniformConstant
             218:    166(ptr) Variable Private
             225:     31(int) Constant 6
             230:    166(ptr) Variable Private
             231:     40(ptr) Variable Input
             242:             TypePointer Output 19(fvec4)
             243:    242(ptr) Variable Output
             250:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             137:    136(ptr) Variable Function
              14:          11 Load 13
              18:   15(fvec2) Load 17
              20:   19(fvec4) ImageSampleImplicitLod 14 18
              21:    7(fvec3) VectorShuffle 20 20 0 1 2
                              Store 9 21
              23:    7(fvec3) Load 9
              34:     33(ptr) AccessChain 30 32
              35:   19(fvec4) Load 34
              36:    7(fvec3) VectorShuffle 35 35 0 1 2
              37:    7(fvec3) FMul 23 36
                              Store 22 37
              42:    7(fvec3) Load 41
              43:   15(fvec2) VectorShuffle 42 42 1 1
              46:     33(ptr) AccessChain 30 44 45
              47:   19(fvec4) Load 46
              48:   15(fvec2) VectorShuffle 47 47 0 1
              49:   15(fvec2) FMul 43 48
                              Store 39 49
              51:     33(ptr) AccessChain 30 44 50
              52:   19(fvec4) Load 51
              53:   15(fvec2) VectorShuffle 52 52 0 1
              54:    7(fvec3) Load 41
              55:   15(fvec2) VectorShuffle 54 54 0 0
              56:   15(fvec2) FMul 53 55
              57:   15(fvec2) Load 39
              58:   15(fvec2) FAdd 56 57
                              Store 39 58
              60:     33(ptr) AccessChain 30 44 59
              61:   19(fvec4) Load 60
              62:   15(fvec2) VectorShuffle 61 61 0 1
              63:    7(fvec3) Load 41
              64:   15(fvec2) VectorShuffle 63 63 2 2
              65:   15(fvec2) FMul 62 64
              66:   15(fvec2) Load 39
              67:   15(fvec2) FAdd 65 66
                              Store 39 67
              68:   15(fvec2) Load 39
              70:     33(ptr) AccessChain 30 44 69
              71:   19(fvec4) Load 70
              72:   15(fvec2) VectorShuffle 71 71 0 1
              73:   15(fvec2) FAdd 68 72
                              Store 39 73
              79:     78(ptr) AccessChain 30 59 77
              80:    6(float) Load 79
              82:    74(bool) FOrdEqual 80 81
                              Store 76 82
                              SelectionMerge 85 None
                              BranchConditional 83 84 85
              84:               Label
              86:    74(bool)   Load 76
                                SelectionMerge 88 None
                                BranchConditional 86 87 88
              87:                 Label
                                  Branch 88
              88:               Label
                                Branch 85
              85:             Label
                              SelectionMerge 91 None
                              BranchConditional 89 90 195
              90:               Label
              93:     78(ptr)   AccessChain 30 59 92
              94:    6(float)   Load 93
              95:    74(bool)   FOrdEqual 94 81
                                Store 76 95
              98:    7(fvec3)   Load 41
              99:    7(fvec3)   VectorShuffle 98 98 1 1 1
             100:     33(ptr)   AccessChain 30 69 45
             101:   19(fvec4)   Load 100
             102:    7(fvec3)   VectorShuffle 101 101 0 1 2
             103:    7(fvec3)   FMul 99 102
             104:   19(fvec4)   Load 97
             105:   19(fvec4)   VectorShuffle 104 103 4 5 6 3
                                Store 97 105
             106:     33(ptr)   AccessChain 30 69 50
             107:   19(fvec4)   Load 106
             108:    7(fvec3)   VectorShuffle 107 107 0 1 2
             109:    7(fvec3)   Load 41
             110:    7(fvec3)   VectorShuffle 109 109 0 0 0
             111:    7(fvec3)   FMul 108 110
             112:   19(fvec4)   Load 97
             113:    7(fvec3)   VectorShuffle 112 112 0 1 2
             114:    7(fvec3)   FAdd 111 113
             115:   19(fvec4)   Load 97
             116:   19(fvec4)   VectorShuffle 115 114 4 5 6 3
                                Store 97 116
             117:     33(ptr)   AccessChain 30 69 59
             118:   19(fvec4)   Load 117
             119:    7(fvec3)   VectorShuffle 118 118 0 1 2
             120:    7(fvec3)   Load 41
             121:    7(fvec3)   VectorShuffle 120 120 2 2 2
             122:    7(fvec3)   FMul 119 121
             123:   19(fvec4)   Load 97
             124:    7(fvec3)   VectorShuffle 123 123 0 1 2
             125:    7(fvec3)   FAdd 122 124
             126:   19(fvec4)   Load 97
             127:   19(fvec4)   VectorShuffle 126 125 4 5 6 3
                                Store 97 127
             128:   19(fvec4)   Load 97
             129:    7(fvec3)   VectorShuffle 128 128 0 1 2
             130:     33(ptr)   AccessChain 30 69 69
             131:   19(fvec4)   Load 130
             132:    7(fvec3)   VectorShuffle 131 131 0 1 2
             133:    7(fvec3)   FAdd 129 132
             134:   19(fvec4)   Load 97
             135:   19(fvec4)   VectorShuffle 134 133 4 5 6 3
                                Store 97 135
             138:    74(bool)   Load 76
                                SelectionMerge 140 None
                                BranchConditional 138 139 143
             139:                 Label
             141:   19(fvec4)     Load 97
             142:    7(fvec3)     VectorShuffle 141 141 0 1 2
                                  Store 137 142
                                  Branch 140
             143:                 Label
             144:    7(fvec3)     Load 41
                                  Store 137 144
                                  Branch 140
             140:               Label
             145:    7(fvec3)   Load 137
             146:   19(fvec4)   Load 97
             147:   19(fvec4)   VectorShuffle 146 145 4 5 6 3
                                Store 97 147
             148:   19(fvec4)   Load 97
             149:    7(fvec3)   VectorShuffle 148 148 0 1 2
             152:    151(ptr)   AccessChain 30 150
             153:    7(fvec3)   Load 152
             154:    7(fvec3)   FNegate 153
             155:    7(fvec3)   FAdd 149 154
             156:   19(fvec4)   Load 97
             157:   19(fvec4)   VectorShuffle 156 155 4 5 6 3
                                Store 97 157
             158:   19(fvec4)   Load 97
             159:    7(fvec3)   VectorShuffle 158 158 0 1 2
             161:    151(ptr)   AccessChain 30 160
             162:    7(fvec3)   Load 161
             163:    7(fvec3)   FMul 159 162
             164:   19(fvec4)   Load 97
             165:   19(fvec4)   VectorShuffle 164 163 0 4 5 6
                                Store 97 165
             168:    166(ptr)   AccessChain 97 92
             169:    6(float)   Load 168
             171:    6(float)   FMul 169 170
             173:    6(float)   FAdd 171 172
                                Store 167 173
             176:     78(ptr)   AccessChain 30 59 175
             177:    6(float)   Load 176
             179:    6(float)   FMul 177 178
             180:    6(float)   FAdd 179 172
                                Store 174 180
             181:    6(float)   Load 167
             182:    6(float)   Load 174
             183:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 181 182
             184:    166(ptr)   AccessChain 97 77
                                Store 184 183
             189:         186   Load 188
             190:   19(fvec4)   Load 97
             191:    7(fvec3)   VectorShuffle 190 190 0 2 3
             192:   19(fvec4)   ImageSampleImplicitLod 189 191
                                Store 97 192
             194:   19(fvec4)   Load 97
                                Store 193 194
                                Branch 91
             195:               Label
             196:    166(ptr)   AccessChain 193 77
                                Store 196 81
             197:    166(ptr)   AccessChain 193 92
                                Store 197 81
             198:    166(ptr)   AccessChain 193 175
                                Store 198 81
             200:    166(ptr)   AccessChain 193 199
                                Store 200 81
                                Branch 91
              91:             Label
             202:   19(fvec4) Load 193
             203:     33(ptr) AccessChain 30 45
             204:   19(fvec4) Load 203
             205:    6(float) Dot 202 204
             206:    166(ptr) AccessChain 201 77
                              Store 206 205
             207:    166(ptr) AccessChain 201 77
             208:    6(float) Load 207
             210:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 208 209 81
             211:    166(ptr) AccessChain 201 77
                              Store 211 210
             214:          11 Load 213
             215:   15(fvec2) Load 39
             216:   19(fvec4) ImageSampleImplicitLod 214 215
             217:    6(float) CompositeExtract 216 3
                              Store 212 217
             219:    166(ptr) AccessChain 201 77
             220:    6(float) Load 219
             221:    6(float) Load 212
             222:    6(float) FMul 220 221
                              Store 218 222
             223:    6(float) Load 218
             224:    7(fvec3) CompositeConstruct 223 223 223
             226:     33(ptr) AccessChain 30 225
             227:   19(fvec4) Load 226
             228:    7(fvec3) VectorShuffle 227 227 0 1 2
             229:    7(fvec3) FMul 224 228
                              Store 201 229
             232:    7(fvec3) Load 231
             233:     33(ptr) AccessChain 30 50
             234:   19(fvec4) Load 233
             235:    7(fvec3) VectorShuffle 234 234 0 1 2
             236:    6(float) Dot 232 235
                              Store 230 236
             237:    6(float) Load 230
             238:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 237 209
                              Store 230 238
             239:    7(fvec3) Load 22
             240:    7(fvec3) Load 201
             241:    7(fvec3) FMul 239 240
                              Store 201 241
             244:    6(float) Load 230
             245:    7(fvec3) CompositeConstruct 244 244 244
             246:    7(fvec3) Load 201
             247:    7(fvec3) FMul 245 246
             248:   19(fvec4) Load 243
             249:   19(fvec4) VectorShuffle 248 247 4 5 6 3
                              Store 243 249
             251:    250(ptr) AccessChain 243 199
                              Store 251 81
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }


 // Stats for Vertex shader:
 //         d3d9: 18 math
 //        d3d11: 15 math
 //         gles: 3 math
 //     d3d11_9x: 15 math
 // Stats for Fragment shader:
 //         d3d9: 1 math
 //        d3d11: 1 math
 //     d3d11_9x: 1 math
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PREPASSBASE" "RenderType"="Opaque" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
No keywords set in this variant.
-- Vertex shader for "d3d9":
// Stats: 18 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//

    vs_3_0
    def c11, 1, 0, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_position o0
    dcl_texcoord o1.xyz
    dcl_texcoord1 o2.xyz
    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r2.x, c4, r1
    dp4 r2.y, c5, r1
    dp4 r2.z, c6, r1
    dp4 r2.w, c7, r1
    dp4 o2.x, c0, v0
    dp4 o2.y, c1, v0
    dp4 o2.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul o1.xyz, r0.w, r0
    mad o0.xy, r2.w, c255, r2
    mov o0.zw, r2

// approximately 20 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 1 math
Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
    ps_3_0
    def c0, 0.5, 0, 0, 0
    dcl_texcoord_pp v0.xyz
    mad_pp oC0, v0.xyzx, c0.xxxy, c0.xxxy

// approximately 1 instruction slot used


-- Vertex shader for "d3d11":
// Stats: 15 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"

Constant Buffer "UnityPerDraw" (160 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 1 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float       
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[7], immediateIndexed
      dcl_constantbuffer CB1[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyz
      dcl_output o2.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb0[1].xyzw
   1: mad r0.xyzw, cb0[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb0[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb0[3].xyzw
   4: mad o2.xyz, cb0[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb1[18].xyzw
   6: mad r0.xyzw, cb1[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb1[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb1[20].xyzw, r1.wwww, r0.xyzw
   9: dp3 r0.x, v2.xyzx, cb0[4].xyzx
  10: dp3 r0.y, v2.xyzx, cb0[5].xyzx
  11: dp3 r0.z, v2.xyzx, cb0[6].xyzx
  12: dp3 r0.w, r0.xyzx, r0.xyzx
  13: rsq r0.w, r0.w
  14: mul o1.xyz, r0.wwww, r0.xyzx
  15: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 1 math
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyz         2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_input_ps linear v1.xyz
      dcl_output o0.xyzw
   0: mad o0.xyz, v1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
   1: mov o0.w, l(0)
   2: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 3 math
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  worldNormal_1 = tmpvar_5;
  tmpvar_2 = worldNormal_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = tmpvar_2;
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
varying mediump vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = 0.0;
  gl_FragData[0] = res_1;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 15 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"

Constant Buffer "UnityPerDraw" (160 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 1 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float       
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             0         7  ( FLT, FLT, FLT, FLT)
// c8         cb1            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          dcl_texcoord v0
          dcl_texcoord2 v2
   0:     mul r0, v0.y, c2
   1:     mad r0, c1, v0.x, r0
   2:     mad r0, c3, v0.z, r0
   3:     mad oT1.xyz, c4, v0.w, r0
   4:     add r0, r0, c4
   5:     dp3 r1.x, v2, c5
   6:     dp3 r1.y, v2, c6
   7:     dp3 r1.z, v2, c7
   8:     dp3 r1.w, r1, r1
   9:     rsq r1.w, r1.w
  10:     mul oT0.xyz, r1.w, r1
  11:     mul r1, r0.y, c9
  12:     mad r1, c8, r0.x, r1
  13:     mad r1, c10, r0.z, r1
  14:     mad r0, c11, r0.w, r1
  15:     mad oPos.xy, r0.w, c0, r0
  16:     mov oPos.zw, r0

// approximately 17 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[7], immediateIndexed
      dcl_constantbuffer CB1[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyz
      dcl_output o2.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb0[1].xyzw
   1: mad r0.xyzw, cb0[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb0[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb0[3].xyzw
   4: mad o2.xyz, cb0[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb1[18].xyzw
   6: mad r0.xyzw, cb1[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb1[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb1[20].xyzw, r1.wwww, r0.xyzw
   9: dp3 r0.x, v2.xyzx, cb0[4].xyzx
  10: dp3 r0.y, v2.xyzx, cb0[5].xyzx
  11: dp3 r0.z, v2.xyzx, cb0[6].xyzx
  12: dp3 r0.w, r0.xyzx, r0.xyzx
  13: rsq r0.w, r0.w
  14: mul o1.xyz, r0.wwww, r0.xyzx
  15: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 1 math
Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyz         2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c0, 0.5, 0, 0, 0
          dcl_pp t0.xyz
   0:     mad_pp r0, t0.xyzx, c0.xxxy, c0.xxxy
   1:     mov_pp oC0, r0

// approximately 2 instruction slots used
      ps_4_0
      dcl_input_ps linear v1.xyz
      dcl_output o0.xyzw
   0: mad o0.xyz, v1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
   1: mov o0.w, l(0)
   2: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
in mediump vec3 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"

Constant Buffer "Globals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}


-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    output.SV_Target0.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target0.w = 0.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec3 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

in  vec3 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"

Constant Buffer "VGlobals1350281386" (192 bytes) on set: 1, binding: 0, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 128
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 142

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 52 85 96 133
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 64
                              MemberDecorate 19 2 Offset 128
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 0
                              Decorate 52 Location 1
                              MemberDecorate 83 0 BuiltIn Position
                              MemberDecorate 83 1 BuiltIn PointSize
                              MemberDecorate 83 2 BuiltIn ClipDistance
                              Decorate 83 Block
                              Decorate 96 Location 1
                              Decorate 133 RelaxedPrecision
                              Decorate 133 Location 0
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 16 17 18
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              36:     22(int) Constant 2
              44:      8(ptr) Variable Private
              46:     22(int) Constant 3
              50:             TypeVector 6(float) 3
              51:             TypePointer Output 50(fvec3)
              52:     51(ptr) Variable Output
              81:     14(int) Constant 1
              82:             TypeArray 6(float) 81
              83:             TypeStruct 7(fvec4) 6(float) 82
              84:             TypePointer Output 83(struct)
              85:     84(ptr) Variable Output
              93:             TypePointer Output 7(fvec4)
              95:             TypePointer Input 50(fvec3)
              96:     95(ptr) Variable Input
             102:     14(int) Constant 0
             103:             TypePointer Private 6(float)
             116:     14(int) Constant 2
             118:    103(ptr) Variable Private
             133:     51(ptr) Variable Output
             136:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              29:     25(ptr) AccessChain 21 23 23
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     25(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              45:    7(fvec4) Load 9
              47:     25(ptr) AccessChain 21 23 46
              48:    7(fvec4) Load 47
              49:    7(fvec4) FAdd 45 48
                              Store 44 49
              53:     25(ptr) AccessChain 21 23 46
              54:    7(fvec4) Load 53
              55:   50(fvec3) VectorShuffle 54 54 0 1 2
              56:    7(fvec4) Load 11
              57:   50(fvec3) VectorShuffle 56 56 3 3 3
              58:   50(fvec3) FMul 55 57
              59:    7(fvec4) Load 9
              60:   50(fvec3) VectorShuffle 59 59 0 1 2
              61:   50(fvec3) FAdd 58 60
                              Store 52 61
              62:    7(fvec4) Load 44
              63:    7(fvec4) VectorShuffle 62 62 1 1 1 1
              64:     25(ptr) AccessChain 21 36 24
              65:    7(fvec4) Load 64
              66:    7(fvec4) FMul 63 65
                              Store 9 66
              67:     25(ptr) AccessChain 21 36 23
              68:    7(fvec4) Load 67
              69:    7(fvec4) Load 44
              70:    7(fvec4) VectorShuffle 69 69 0 0 0 0
              71:    7(fvec4) FMul 68 70
              72:    7(fvec4) Load 9
              73:    7(fvec4) FAdd 71 72
                              Store 9 73
              74:     25(ptr) AccessChain 21 36 36
              75:    7(fvec4) Load 74
              76:    7(fvec4) Load 44
              77:    7(fvec4) VectorShuffle 76 76 2 2 2 2
              78:    7(fvec4) FMul 75 77
              79:    7(fvec4) Load 9
              80:    7(fvec4) FAdd 78 79
                              Store 9 80
              86:     25(ptr) AccessChain 21 36 46
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 44
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 9
              92:    7(fvec4) FAdd 90 91
              94:     93(ptr) AccessChain 85 23
                              Store 94 92
              97:   50(fvec3) Load 96
              98:     25(ptr) AccessChain 21 24 23
              99:    7(fvec4) Load 98
             100:   50(fvec3) VectorShuffle 99 99 0 1 2
             101:    6(float) Dot 97 100
             104:    103(ptr) AccessChain 9 102
                              Store 104 101
             105:   50(fvec3) Load 96
             106:     25(ptr) AccessChain 21 24 24
             107:    7(fvec4) Load 106
             108:   50(fvec3) VectorShuffle 107 107 0 1 2
             109:    6(float) Dot 105 108
             110:    103(ptr) AccessChain 9 81
                              Store 110 109
             111:   50(fvec3) Load 96
             112:     25(ptr) AccessChain 21 24 36
             113:    7(fvec4) Load 112
             114:   50(fvec3) VectorShuffle 113 113 0 1 2
             115:    6(float) Dot 111 114
             117:    103(ptr) AccessChain 9 116
                              Store 117 115
             119:    7(fvec4) Load 9
             120:   50(fvec3) VectorShuffle 119 119 0 1 2
             121:    7(fvec4) Load 9
             122:   50(fvec3) VectorShuffle 121 121 0 1 2
             123:    6(float) Dot 120 122
                              Store 118 123
             124:    6(float) Load 118
             125:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 124
                              Store 118 125
             126:    6(float) Load 118
             127:   50(fvec3) CompositeConstruct 126 126 126
             128:    7(fvec4) Load 9
             129:   50(fvec3) VectorShuffle 128 128 0 1 2
             130:   50(fvec3) FMul 127 129
             131:    7(fvec4) Load 9
             132:    7(fvec4) VectorShuffle 131 130 4 5 6 3
                              Store 9 132
             134:    7(fvec4) Load 9
             135:   50(fvec3) VectorShuffle 134 134 0 1 2
                              Store 133 135
             137:    136(ptr) AccessChain 85 23 81
             138:    6(float) Load 137
             139:    6(float) FNegate 138
             140:    136(ptr) AccessChain 85 23 81
                              Store 140 139
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 26

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 9 12
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 9 Location 0
                              Decorate 12 RelaxedPrecision
                              Decorate 12 Location 0
                              Decorate 13 RelaxedPrecision
                              Decorate 16 RelaxedPrecision
                              Decorate 17 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Output 7(fvec4)
               9:      8(ptr) Variable Output
              10:             TypeVector 6(float) 3
              11:             TypePointer Input 10(fvec3)
              12:     11(ptr) Variable Input
              14:    6(float) Constant 1056964608
              15:   10(fvec3) ConstantComposite 14 14 14
              20:    6(float) Constant 0
              21:             TypeInt 32 0
              22:     21(int) Constant 3
              23:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              13:   10(fvec3) Load 12
              16:   10(fvec3) FMul 13 15
              17:   10(fvec3) FAdd 16 15
              18:    7(fvec4) Load 9
              19:    7(fvec4) VectorShuffle 18 17 4 5 6 3
                              Store 9 19
              24:     23(ptr) AccessChain 9 22
                              Store 24 20
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }


 // Stats for Vertex shader:
 //         d3d9: 48 math
 //        d3d11: 36 math
 //         gles: 5 avg math (4..6), 2 texture
 //     d3d11_9x: 36 math
 // Stats for Fragment shader:
 //         d3d9: 5 avg math (4..7), 2 texture
 //        d3d11: 4 avg math (4..5), 2 texture
 //     d3d11_9x: 5 avg math (5..6), 2 texture
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PREPASSFINAL" "RenderType"="Opaque" }
  ZWrite Off
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
No keywords set in this variant.
-- Vertex shader for "d3d9":
// Stats: 48 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 19
Vector4 _ProjectionParams at 11
Vector4 unity_SHAb at 14
Vector4 unity_SHAg at 13
Vector4 unity_SHAr at 12
Vector4 unity_SHBb at 17
Vector4 unity_SHBg at 16
Vector4 unity_SHBr at 15
Vector4 unity_SHC at 18

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   float4 _ProjectionParams;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   float4 unity_SHAb;
//   float4 unity_SHAg;
//   float4 unity_SHAr;
//   float4 unity_SHBb;
//   float4 unity_SHBg;
//   float4 unity_SHBr;
//   float4 unity_SHC;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   _ProjectionParams   c11      1
//   unity_SHAr          c12      1
//   unity_SHAg          c13      1
//   unity_SHAb          c14      1
//   unity_SHBr          c15      1
//   unity_SHBg          c16      1
//   unity_SHBb          c17      1
//   unity_SHC           c18      1
//   _MainTex_ST         c19      1
//

    vs_3_0
    def c20, 1.05499995, -0.0549999997, 0, 0
    def c21, 1, 0, 0.5, 0.416666657
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3
    dcl_texcoord3 o4
    dcl_texcoord4 o5.xyz
    mad o1.xy, v2, c19, c19.zwzw
    dp4 o2.x, c0, v0
    dp4 o2.y, c1, v0
    dp4 o2.z, c2, v0
    mad r0, v0.xyzx, c21.xxxy, c21.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r0.x, c4, r1
    dp4 r0.w, c7, r1
    mul r2.xz, r0.xyww, c21.z
    dp4 r0.y, c5, r1
    dp4 r0.z, c6, r1
    mul r1.x, r0.y, c11.x
    mov r4, r0
    mov o3.zw, r0
    mul r2.w, r1.x, c21.z
    add o3.xy, r2.z, r2.xwzw
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    nrm r1.xyz, r0
    mul r0.x, r1.y, r1.y
    mad r0.x, r1.x, r1.x, -r0.x
    mul r2, r1.yzzx, r1.xyzz
    dp4 r3.x, c15, r2
    dp4 r3.y, c16, r2
    dp4 r3.z, c17, r2
    mad r0.xyz, c18, r0.x, r3
    mov r1.w, c21.x
    dp4 r2.x, c12, r1
    dp4 r2.y, c13, r1
    dp4 r2.z, c14, r1
    add r0.xyz, r0, r2
    max r0.xyz, r0, c21.y
    log r1.x, r0.x
    log r1.y, r0.y
    log r1.z, r0.z
    mul r0.xyz, r1, c21.w
    exp r1.x, r0.x
    exp r1.y, r0.y
    exp r1.z, r0.z
    mad r0.xyz, r1, c20.x, c20.y
    max o5.xyz, r0, c21.y
    mov o4, c21.y
    mad o0.xy, r4.w, c255, r4
    mov o0.zw, r4

// approximately 50 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 7 math, 2 textures
Vector4 _Color at 0

Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightBuffer" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   sampler2D _LightBuffer;
//   sampler2D _MainTex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   _Color       c0       1
//   _MainTex     s0       1
//   _LightBuffer s1       1
//

    ps_3_0
    def c1, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord2 v1
    dcl_texcoord4 v2.xyz
    dcl_2d s0
    dcl_2d s1
    texldp_pp r0, v1, s1
    log_pp r1.x, r0.x
    log_pp r1.y, r0.y
    log_pp r1.z, r0.z
    add_pp r0.xyz, -r1, v2
    texld r1, v0, s0
    mul_pp r1.xyz, r1, c0
    mul_pp oC0.xyz, r0, r1
    mov_pp oC0.w, c1.x

// approximately 9 instruction slots used (2 texture, 7 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 36 math, 4 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 2 {
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 3 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 4 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[45], immediateIndexed
      dcl_constantbuffer CB3[7], immediateIndexed
      dcl_constantbuffer CB4[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyzw
      dcl_output o4.xyzw
      dcl_output o5.xyz
      dcl_temps 4
   0: mul r0.xyzw, v0.yyyy, cb3[1].xyzw
   1: mad r0.xyzw, cb3[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb3[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb3[3].xyzw
   4: mad o2.xyz, cb3[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb4[18].xyzw
   6: mad r0.xyzw, cb4[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb4[19].xyzw, r1.zzzz, r0.xyzw
   8: mad r0.xyzw, cb4[20].xyzw, r1.wwww, r0.xyzw
   9: mov o0.xyzw, r0.xyzw
  10: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  11: mul r0.y, r0.y, cb1[5].x
  12: mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
  13: mov o3.zw, r0.zzzw
  14: add o3.xy, r1.zzzz, r1.xwxx
  15: mov o4.xyzw, l(0,0,0,0)
  16: dp3 r0.x, v2.xyzx, cb3[4].xyzx
  17: dp3 r0.y, v2.xyzx, cb3[5].xyzx
  18: dp3 r0.z, v2.xyzx, cb3[6].xyzx
  19: dp3 r0.w, r0.xyzx, r0.xyzx
  20: rsq r0.w, r0.w
  21: mul r0.xyz, r0.wwww, r0.xyzx
  22: mul r1.x, r0.y, r0.y
  23: mad r1.x, r0.x, r0.x, -r1.x
  24: mul r2.xyzw, r0.yzzx, r0.xyzz
  25: dp4 r3.x, cb2[41].xyzw, r2.xyzw
  26: dp4 r3.y, cb2[42].xyzw, r2.xyzw
  27: dp4 r3.z, cb2[43].xyzw, r2.xyzw
  28: mad r1.xyz, cb2[44].xyzx, r1.xxxx, r3.xyzx
  29: mov r0.w, l(1.000000)
  30: dp4 r2.x, cb2[38].xyzw, r0.xyzw
  31: dp4 r2.y, cb2[39].xyzw, r0.xyzw
  32: dp4 r2.z, cb2[40].xyzw, r0.xyzw
  33: add r0.xyz, r1.xyzx, r2.xyzx
  34: max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  35: log r0.xyz, r0.xyzx
  36: mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  37: exp r0.xyz, r0.xyzx
  38: mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  39: max o5.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  40: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 5 math, 2 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightBuffer" to slot 1

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _Color at 64
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float       
// TEXCOORD                 2   xyzw        3     NONE   float   xy w
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v3.xyw
      dcl_input_ps linear v5.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: div r0.xy, v3.xyxx, v3.wwww
   1: sample r0.xyzw, r0.xyxx, t1.xyzw, s1
   2: log r0.xyz, r0.xyzx
   3: add r0.xyz, -r0.xyzx, v5.xyzx
   4: sample r1.xyzw, v1.xyxx, t0.xyzw, s0
   5: mul r1.xyz, r1.xyzx, cb0[4].xyzx
   6: mul o0.xyz, r0.xyzx, r1.xyzx
   7: mov o0.w, l(1.000000)
   8: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 6 math, 2 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  mediump vec3 res_11;
  mediump vec3 x_12;
  x_12.x = dot (unity_SHAr, normal_10);
  x_12.y = dot (unity_SHAg, normal_10);
  x_12.z = dot (unity_SHAb, normal_10);
  mediump vec3 x1_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
  x1_13.x = dot (unity_SHBr, tmpvar_14);
  x1_13.y = dot (unity_SHBg, tmpvar_14);
  x1_13.z = dot (unity_SHBb, tmpvar_14);
  res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
    ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
  )));
  mediump vec3 tmpvar_15;
  tmpvar_15 = max (((1.055 * 
    pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_11 = tmpvar_15;
  tmpvar_2 = tmpvar_15;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_5;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_5;
  light_3 = -(log2(light_3));
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_6;
  c_6.xyz = (tmpvar_4.xyz * light_3.xyz);
  c_6.w = tmpvar_4.w;
  c_2.xyz = c_6.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 36 math, 4 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 2 {
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 3 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 4 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             5         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             5         1  ( FLT, FLT, FLT, FLT)
// c3         cb2            38         7  ( FLT, FLT, FLT, FLT)
// c10        cb3             0         7  ( FLT, FLT, FLT, FLT)
// c17        cb4            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          def c21, 0.5, 1, 0, 0.416666657
          def c22, 1.05499995, -0.0549999997, 0, 0
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c11
   2:     mad r0, c10, v0.x, r0
   3:     mad r0, c12, v0.z, r0
   4:     mad oT1.xyz, c13, v0.w, r0
   5:     add r0, r0, c13
   6:     mul r1, r0.y, c18
   7:     mad r1, c17, r0.x, r1
   8:     mad r1, c19, r0.z, r1
   9:     mad r0, c20, r0.w, r1
  10:     mul r1.xz, r0.xyww, c21.x
  11:     mul r1.y, r0.y, c2.x
  12:     mul r1.w, r1.y, c21.x
  13:     add oT2.xy, r1.z, r1.xwzw
  14:     dp3 r1.x, v2, c14
  15:     dp3 r1.y, v2, c15
  16:     dp3 r1.z, v2, c16
  17:     nrm r2.xyz, r1
  20:     mul r1.x, r2.y, r2.y
  21:     mad r1.x, r2.x, r2.x, -r1.x
  22:     mul r3, r2.yzzx, r2.xyzz
  23:     dp4 r4.x, c6, r3
  24:     dp4 r4.y, c7, r3
  25:     dp4 r4.z, c8, r3
  26:     mad r1.xyz, c9, r1.x, r4
  27:     mov r2.w, c21.y
  28:     dp4 r3.x, c3, r2
  29:     dp4 r3.y, c4, r2
  30:     dp4 r3.z, c5, r2
  31:     add r1.xyz, r1, r3
  32:     max r1.xyz, r1, c21.z
  33:     mov r1.w, c21.w
  34:     lit r2, r1.xxww
  35:     mov r2.x, r2.z
  36:     lit r3, r1.yyww
  37:     lit r1, r1.zzww
  38:     mov r2.z, r1.z
  39:     mov r2.y, r3.z
  40:     mad r1.xyz, r2, c22.x, c22.y
  41:     max oT4.xyz, r1, c21.z
  42:     mad oPos.xy, r0.w, c0, r0
  43:     mov oPos.zw, r0
  44:     mov oT2.zw, r0
  45:     mov oT3, c21.z

// approximately 46 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[45], immediateIndexed
      dcl_constantbuffer CB3[7], immediateIndexed
      dcl_constantbuffer CB4[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyzw
      dcl_output o4.xyzw
      dcl_output o5.xyz
      dcl_temps 4
   0: mul r0.xyzw, v0.yyyy, cb3[1].xyzw
   1: mad r0.xyzw, cb3[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb3[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb3[3].xyzw
   4: mad o2.xyz, cb3[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb4[18].xyzw
   6: mad r0.xyzw, cb4[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb4[19].xyzw, r1.zzzz, r0.xyzw
   8: mad r0.xyzw, cb4[20].xyzw, r1.wwww, r0.xyzw
   9: mov o0.xyzw, r0.xyzw
  10: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  11: mul r0.y, r0.y, cb1[5].x
  12: mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
  13: mov o3.zw, r0.zzzw
  14: add o3.xy, r1.zzzz, r1.xwxx
  15: mov o4.xyzw, l(0,0,0,0)
  16: dp3 r0.x, v2.xyzx, cb3[4].xyzx
  17: dp3 r0.y, v2.xyzx, cb3[5].xyzx
  18: dp3 r0.z, v2.xyzx, cb3[6].xyzx
  19: dp3 r0.w, r0.xyzx, r0.xyzx
  20: rsq r0.w, r0.w
  21: mul r0.xyz, r0.wwww, r0.xyzx
  22: mul r1.x, r0.y, r0.y
  23: mad r1.x, r0.x, r0.x, -r1.x
  24: mul r2.xyzw, r0.yzzx, r0.xyzz
  25: dp4 r3.x, cb2[41].xyzw, r2.xyzw
  26: dp4 r3.y, cb2[42].xyzw, r2.xyzw
  27: dp4 r3.z, cb2[43].xyzw, r2.xyzw
  28: mad r1.xyz, cb2[44].xyzx, r1.xxxx, r3.xyzx
  29: mov r0.w, l(1.000000)
  30: dp4 r2.x, cb2[38].xyzw, r0.xyzw
  31: dp4 r2.y, cb2[39].xyzw, r0.xyzw
  32: dp4 r2.z, cb2[40].xyzw, r0.xyzw
  33: add r0.xyz, r1.xyzx, r2.xyzx
  34: max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  35: log r0.xyz, r0.xyzx
  36: mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  37: exp r0.xyz, r0.xyzx
  38: mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  39: max o5.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  40: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 6 math, 2 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightBuffer" to slot 1

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _Color at 64
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float       
// TEXCOORD                 2   xyzw        3     NONE   float   xy w
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             4         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
// s1             s1              t1               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c1, 0.00100000005, 1, 0, 0
          dcl t0.xy
          dcl t2
          dcl t4.xyz
          dcl_2d s0
          dcl_2d s1
   0:     rcp r0.w, t2.w
   1:     mul r0.xy, r0.w, t2
   2:     texld r1, t0, s0
   2:     texld_pp r0, r0, s1
   2:     max_pp r2.xyz, r0, c1.x
   3:     log_pp r0.x, r2.x
   4:     log_pp r0.y, r2.y
   5:     log_pp r0.z, r2.z
   6:     add_pp r0.xyz, -r0, t4
   7:     mul_pp r1.xyz, r1, c0
   8:     mul_pp r0.xyz, r0, r1
   9:     mov_pp r0.w, c1.y
  10:     mov_pp oC0, r0

// approximately 13 instruction slots used (2 texture, 11 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v3.xyw
      dcl_input_ps linear v5.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: div r0.xy, v3.xyxx, v3.wwww
   1: sample r0.xyzw, r0.xyxx, t1.xyzw, s1
   2: max r0.xyz, r0.xyzx, l(0.001000, 0.001000, 0.001000, 0.000000)
   3: log r0.xyz, r0.xyzx
   4: add r0.xyz, -r0.xyzx, v5.xyzx
   5: sample r1.xyzw, v1.xyxx, t0.xyzw, s0
   6: mul r1.xyz, r1.xyzx, cb0[4].xyzx
   7: mul o0.xyz, r0.xyzx, r1.xyzx
   8: mov o0.w, l(1.000000)
   9: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat16_1.xyz = log2(u_xlat16_1.xyz);
    u_xlat0.xyz = (-u_xlat16_1.xyz) + vs_TEXCOORD4.xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (336 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 128
  Matrix4x4 unity_WorldToObject at 192
  Matrix4x4 unity_MatrixVP at 256
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHAr at 16
  Vector4 unity_SHAg at 32
  Vector4 unity_SHAb at 48
  Vector4 unity_SHBr at 64
  Vector4 unity_SHBg at 80
  Vector4 unity_SHBb at 96
  Vector4 unity_SHC at 112
  Vector4 _MainTex_ST at 320
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    u_xlat0.y = u_xlat0.y * Globals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = fma(u_xlat0.x, u_xlat0.x, (-u_xlat1.x));
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(Globals.unity_SHBb, u_xlat2);
    u_xlat1.xyz = fma(Globals.unity_SHC.xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(Globals.unity_SHAr, u_xlat0);
    u_xlat2.y = dot(Globals.unity_SHAg, u_xlat0);
    u_xlat2.z = dot(Globals.unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightBuffer" to slot 1

Constant Buffer "Globals" (16 bytes) on slot 0 {
  Vector4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<float, access::sample > _LightBuffer [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + input.TEXCOORD4.xyz;
    u_xlat1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * Globals._Color.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat16_0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat16_0.xyz = log2(u_xlat10_0.xyz);
    u_xlat0.xyz = (-u_xlat16_0.xyz) + vs_TEXCOORD4.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Set 2D Texture "_LightBuffer" to set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals3648651359" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "VGlobals3648651359" (336 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 256
  Matrix4x4 unity_ObjectToWorld at 128
  Matrix4x4 unity_WorldToObject at 192
  Vector4 _MainTex_ST at 320
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHAb at 48
  Vector4 unity_SHAg at 32
  Vector4 unity_SHAr at 16
  Vector4 unity_SHBb at 96
  Vector4 unity_SHBg at 80
  Vector4 unity_SHBr at 64
  Vector4 unity_SHC at 112
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 293

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 53 94 100 101 129 141 145 283
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 RelaxedPrecision
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 RelaxedPrecision
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 RelaxedPrecision
                              MemberDecorate 19 3 Offset 48
                              MemberDecorate 19 4 RelaxedPrecision
                              MemberDecorate 19 4 Offset 64
                              MemberDecorate 19 5 RelaxedPrecision
                              MemberDecorate 19 5 Offset 80
                              MemberDecorate 19 6 RelaxedPrecision
                              MemberDecorate 19 6 Offset 96
                              MemberDecorate 19 7 RelaxedPrecision
                              MemberDecorate 19 7 Offset 112
                              MemberDecorate 19 8 Offset 128
                              MemberDecorate 19 9 Offset 192
                              MemberDecorate 19 10 Offset 256
                              MemberDecorate 19 11 Offset 320
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 53 Location 3
                              MemberDecorate 92 0 BuiltIn Position
                              MemberDecorate 92 1 BuiltIn PointSize
                              MemberDecorate 92 2 BuiltIn ClipDistance
                              Decorate 92 Block
                              Decorate 100 Location 0
                              Decorate 101 Location 2
                              Decorate 129 Location 1
                              Decorate 141 Location 4
                              Decorate 145 Location 1
                              Decorate 182 RelaxedPrecision
                              Decorate 195 RelaxedPrecision
                              Decorate 196 RelaxedPrecision
                              Decorate 199 RelaxedPrecision
                              Decorate 205 RelaxedPrecision
                              Decorate 208 RelaxedPrecision
                              Decorate 209 RelaxedPrecision
                              Decorate 210 RelaxedPrecision
                              Decorate 214 RelaxedPrecision
                              Decorate 215 RelaxedPrecision
                              Decorate 216 RelaxedPrecision
                              Decorate 220 RelaxedPrecision
                              Decorate 221 RelaxedPrecision
                              Decorate 222 RelaxedPrecision
                              Decorate 226 RelaxedPrecision
                              Decorate 227 RelaxedPrecision
                              Decorate 228 RelaxedPrecision
                              Decorate 229 RelaxedPrecision
                              Decorate 230 RelaxedPrecision
                              Decorate 231 RelaxedPrecision
                              Decorate 232 RelaxedPrecision
                              Decorate 237 RelaxedPrecision
                              Decorate 242 RelaxedPrecision
                              Decorate 247 RelaxedPrecision
                              Decorate 251 RelaxedPrecision
                              Decorate 252 RelaxedPrecision
                              Decorate 253 RelaxedPrecision
                              Decorate 254 RelaxedPrecision
                              Decorate 256 RelaxedPrecision
                              Decorate 257 RelaxedPrecision
                              Decorate 258 RelaxedPrecision
                              Decorate 283 Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 8
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              29:     22(int) Constant 0
              37:     22(int) Constant 2
              45:      8(ptr) Variable Private
              47:     22(int) Constant 3
              51:             TypeVector 6(float) 3
              52:             TypePointer Output 51(fvec3)
              53:     52(ptr) Variable Output
              65:     22(int) Constant 10
              90:     14(int) Constant 1
              91:             TypeArray 6(float) 90
              92:             TypeStruct 7(fvec4) 6(float) 91
              93:             TypePointer Output 92(struct)
              94:     93(ptr) Variable Output
              96:             TypePointer Output 7(fvec4)
              98:             TypeVector 6(float) 2
              99:             TypePointer Output 98(fvec2)
             100:     99(ptr) Variable Output
             101:     10(ptr) Variable Input
             104:     22(int) Constant 11
             113:             TypePointer Private 6(float)
             116:     14(int) Constant 0
             117:             TypePointer Uniform 6(float)
             124:    6(float) Constant 1056964608
             125:   51(fvec3) ConstantComposite 124 124 124
             129:     96(ptr) Variable Output
             141:     96(ptr) Variable Output
             142:    6(float) Constant 0
             143:    7(fvec4) ConstantComposite 142 142 142 142
             144:             TypePointer Input 51(fvec3)
             145:    144(ptr) Variable Input
             147:     22(int) Constant 9
             164:     14(int) Constant 2
             166:    113(ptr) Variable Private
             181:             TypePointer Private 51(fvec3)
             182:    181(ptr) Variable Private
             199:      8(ptr) Variable Private
             205:    181(ptr) Variable Private
             206:     22(int) Constant 4
             212:     22(int) Constant 5
             218:     22(int) Constant 6
             224:     22(int) Constant 7
             233:    6(float) Constant 1065353216
             234:     14(int) Constant 3
             255:   51(fvec3) ConstantComposite 142 142 142
             263:    6(float) Constant 1054168405
             264:   51(fvec3) ConstantComposite 263 263 263
             275:    6(float) Constant 1065814589
             276:   51(fvec3) ConstantComposite 275 275 275
             278:    6(float) Constant 3177269166
             279:   51(fvec3) ConstantComposite 278 278 278
             283:     52(ptr) Variable Output
             287:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              30:     25(ptr) AccessChain 21 23 29
              31:    7(fvec4) Load 30
              32:    7(fvec4) Load 11
              33:    7(fvec4) VectorShuffle 32 32 0 0 0 0
              34:    7(fvec4) FMul 31 33
              35:    7(fvec4) Load 9
              36:    7(fvec4) FAdd 34 35
                              Store 9 36
              38:     25(ptr) AccessChain 21 23 37
              39:    7(fvec4) Load 38
              40:    7(fvec4) Load 11
              41:    7(fvec4) VectorShuffle 40 40 2 2 2 2
              42:    7(fvec4) FMul 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) FAdd 42 43
                              Store 9 44
              46:    7(fvec4) Load 9
              48:     25(ptr) AccessChain 21 23 47
              49:    7(fvec4) Load 48
              50:    7(fvec4) FAdd 46 49
                              Store 45 50
              54:     25(ptr) AccessChain 21 23 47
              55:    7(fvec4) Load 54
              56:   51(fvec3) VectorShuffle 55 55 0 1 2
              57:    7(fvec4) Load 11
              58:   51(fvec3) VectorShuffle 57 57 3 3 3
              59:   51(fvec3) FMul 56 58
              60:    7(fvec4) Load 9
              61:   51(fvec3) VectorShuffle 60 60 0 1 2
              62:   51(fvec3) FAdd 59 61
                              Store 53 62
              63:    7(fvec4) Load 45
              64:    7(fvec4) VectorShuffle 63 63 1 1 1 1
              66:     25(ptr) AccessChain 21 65 24
              67:    7(fvec4) Load 66
              68:    7(fvec4) FMul 64 67
                              Store 9 68
              69:     25(ptr) AccessChain 21 65 29
              70:    7(fvec4) Load 69
              71:    7(fvec4) Load 45
              72:    7(fvec4) VectorShuffle 71 71 0 0 0 0
              73:    7(fvec4) FMul 70 72
              74:    7(fvec4) Load 9
              75:    7(fvec4) FAdd 73 74
                              Store 9 75
              76:     25(ptr) AccessChain 21 65 37
              77:    7(fvec4) Load 76
              78:    7(fvec4) Load 45
              79:    7(fvec4) VectorShuffle 78 78 2 2 2 2
              80:    7(fvec4) FMul 77 79
              81:    7(fvec4) Load 9
              82:    7(fvec4) FAdd 80 81
                              Store 9 82
              83:     25(ptr) AccessChain 21 65 47
              84:    7(fvec4) Load 83
              85:    7(fvec4) Load 45
              86:    7(fvec4) VectorShuffle 85 85 3 3 3 3
              87:    7(fvec4) FMul 84 86
              88:    7(fvec4) Load 9
              89:    7(fvec4) FAdd 87 88
                              Store 9 89
              95:    7(fvec4) Load 9
              97:     96(ptr) AccessChain 94 29
                              Store 97 95
             102:    7(fvec4) Load 101
             103:   98(fvec2) VectorShuffle 102 102 0 1
             105:     25(ptr) AccessChain 21 104
             106:    7(fvec4) Load 105
             107:   98(fvec2) VectorShuffle 106 106 0 1
             108:   98(fvec2) FMul 103 107
             109:     25(ptr) AccessChain 21 104
             110:    7(fvec4) Load 109
             111:   98(fvec2) VectorShuffle 110 110 2 3
             112:   98(fvec2) FAdd 108 111
                              Store 100 112
             114:    113(ptr) AccessChain 9 90
             115:    6(float) Load 114
             118:    117(ptr) AccessChain 21 29 116
             119:    6(float) Load 118
             120:    6(float) FMul 115 119
             121:    113(ptr) AccessChain 9 90
                              Store 121 120
             122:    7(fvec4) Load 9
             123:   51(fvec3) VectorShuffle 122 122 0 3 1
             126:   51(fvec3) FMul 123 125
             127:    7(fvec4) Load 45
             128:    7(fvec4) VectorShuffle 127 126 4 1 5 6
                              Store 45 128
             130:    7(fvec4) Load 9
             131:   98(fvec2) VectorShuffle 130 130 2 3
             132:    7(fvec4) Load 129
             133:    7(fvec4) VectorShuffle 132 131 0 1 4 5
                              Store 129 133
             134:    7(fvec4) Load 45
             135:   98(fvec2) VectorShuffle 134 134 2 2
             136:    7(fvec4) Load 45
             137:   98(fvec2) VectorShuffle 136 136 0 3
             138:   98(fvec2) FAdd 135 137
             139:    7(fvec4) Load 129
             140:    7(fvec4) VectorShuffle 139 138 4 5 2 3
                              Store 129 140
                              Store 141 143
             146:   51(fvec3) Load 145
             148:     25(ptr) AccessChain 21 147 29
             149:    7(fvec4) Load 148
             150:   51(fvec3) VectorShuffle 149 149 0 1 2
             151:    6(float) Dot 146 150
             152:    113(ptr) AccessChain 9 116
                              Store 152 151
             153:   51(fvec3) Load 145
             154:     25(ptr) AccessChain 21 147 24
             155:    7(fvec4) Load 154
             156:   51(fvec3) VectorShuffle 155 155 0 1 2
             157:    6(float) Dot 153 156
             158:    113(ptr) AccessChain 9 90
                              Store 158 157
             159:   51(fvec3) Load 145
             160:     25(ptr) AccessChain 21 147 37
             161:    7(fvec4) Load 160
             162:   51(fvec3) VectorShuffle 161 161 0 1 2
             163:    6(float) Dot 159 162
             165:    113(ptr) AccessChain 9 164
                              Store 165 163
             167:    7(fvec4) Load 9
             168:   51(fvec3) VectorShuffle 167 167 0 1 2
             169:    7(fvec4) Load 9
             170:   51(fvec3) VectorShuffle 169 169 0 1 2
             171:    6(float) Dot 168 170
                              Store 166 171
             172:    6(float) Load 166
             173:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 172
                              Store 166 173
             174:    6(float) Load 166
             175:   51(fvec3) CompositeConstruct 174 174 174
             176:    7(fvec4) Load 9
             177:   51(fvec3) VectorShuffle 176 176 0 1 2
             178:   51(fvec3) FMul 175 177
             179:    7(fvec4) Load 9
             180:    7(fvec4) VectorShuffle 179 178 4 5 6 3
                              Store 9 180
             183:    113(ptr) AccessChain 9 90
             184:    6(float) Load 183
             185:    113(ptr) AccessChain 9 90
             186:    6(float) Load 185
             187:    6(float) FMul 184 186
             188:    113(ptr) AccessChain 182 116
                              Store 188 187
             189:    113(ptr) AccessChain 9 116
             190:    6(float) Load 189
             191:    113(ptr) AccessChain 9 116
             192:    6(float) Load 191
             193:    6(float) FMul 190 192
             194:    113(ptr) AccessChain 182 116
             195:    6(float) Load 194
             196:    6(float) FNegate 195
             197:    6(float) FAdd 193 196
             198:    113(ptr) AccessChain 182 116
                              Store 198 197
             200:    7(fvec4) Load 9
             201:    7(fvec4) VectorShuffle 200 200 1 2 2 0
             202:    7(fvec4) Load 9
             203:    7(fvec4) VectorShuffle 202 202 0 1 2 2
             204:    7(fvec4) FMul 201 203
                              Store 199 204
             207:     25(ptr) AccessChain 21 206
             208:    7(fvec4) Load 207
             209:    7(fvec4) Load 199
             210:    6(float) Dot 208 209
             211:    113(ptr) AccessChain 205 116
                              Store 211 210
             213:     25(ptr) AccessChain 21 212
             214:    7(fvec4) Load 213
             215:    7(fvec4) Load 199
             216:    6(float) Dot 214 215
             217:    113(ptr) AccessChain 205 90
                              Store 217 216
             219:     25(ptr) AccessChain 21 218
             220:    7(fvec4) Load 219
             221:    7(fvec4) Load 199
             222:    6(float) Dot 220 221
             223:    113(ptr) AccessChain 205 164
                              Store 223 222
             225:     25(ptr) AccessChain 21 224
             226:    7(fvec4) Load 225
             227:   51(fvec3) VectorShuffle 226 226 0 1 2
             228:   51(fvec3) Load 182
             229:   51(fvec3) VectorShuffle 228 228 0 0 0
             230:   51(fvec3) FMul 227 229
             231:   51(fvec3) Load 205
             232:   51(fvec3) FAdd 230 231
                              Store 182 232
             235:    113(ptr) AccessChain 9 234
                              Store 235 233
             236:     25(ptr) AccessChain 21 24
             237:    7(fvec4) Load 236
             238:    7(fvec4) Load 9
             239:    6(float) Dot 237 238
             240:    113(ptr) AccessChain 205 116
                              Store 240 239
             241:     25(ptr) AccessChain 21 37
             242:    7(fvec4) Load 241
             243:    7(fvec4) Load 9
             244:    6(float) Dot 242 243
             245:    113(ptr) AccessChain 205 90
                              Store 245 244
             246:     25(ptr) AccessChain 21 47
             247:    7(fvec4) Load 246
             248:    7(fvec4) Load 9
             249:    6(float) Dot 247 248
             250:    113(ptr) AccessChain 205 164
                              Store 250 249
             251:   51(fvec3) Load 182
             252:   51(fvec3) Load 205
             253:   51(fvec3) FAdd 251 252
                              Store 182 253
             254:   51(fvec3) Load 182
             256:   51(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 254 255
                              Store 182 256
             257:   51(fvec3) Load 182
             258:   51(fvec3) ExtInst 1(GLSL.std.450) 30(Log2) 257
             259:    7(fvec4) Load 9
             260:    7(fvec4) VectorShuffle 259 258 4 5 6 3
                              Store 9 260
             261:    7(fvec4) Load 9
             262:   51(fvec3) VectorShuffle 261 261 0 1 2
             265:   51(fvec3) FMul 262 264
             266:    7(fvec4) Load 9
             267:    7(fvec4) VectorShuffle 266 265 4 5 6 3
                              Store 9 267
             268:    7(fvec4) Load 9
             269:   51(fvec3) VectorShuffle 268 268 0 1 2
             270:   51(fvec3) ExtInst 1(GLSL.std.450) 29(Exp2) 269
             271:    7(fvec4) Load 9
             272:    7(fvec4) VectorShuffle 271 270 4 5 6 3
                              Store 9 272
             273:    7(fvec4) Load 9
             274:   51(fvec3) VectorShuffle 273 273 0 1 2
             277:   51(fvec3) FMul 274 276
             280:   51(fvec3) FAdd 277 279
             281:    7(fvec4) Load 9
             282:    7(fvec4) VectorShuffle 281 280 4 5 6 3
                              Store 9 282
             284:    7(fvec4) Load 9
             285:   51(fvec3) VectorShuffle 284 284 0 1 2
             286:   51(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 285 255
                              Store 283 286
             288:    287(ptr) AccessChain 94 29 90
             289:    6(float) Load 288
             290:    6(float) FNegate 289
             291:    287(ptr) AccessChain 94 29 90
                              Store 291 290
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 73

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 12 37 44 61
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 12 Location 1
                              Decorate 21 RelaxedPrecision
                              Decorate 25 RelaxedPrecision
                              Decorate 25 DescriptorSet 0
                              Decorate 25 Binding 1
                              Decorate 26 RelaxedPrecision
                              Decorate 30 RelaxedPrecision
                              Decorate 31 RelaxedPrecision
                              Decorate 32 RelaxedPrecision
                              Decorate 33 RelaxedPrecision
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 37 Location 2
                              Decorate 40 RelaxedPrecision
                              Decorate 41 RelaxedPrecision
                              Decorate 41 DescriptorSet 0
                              Decorate 41 Binding 0
                              Decorate 42 RelaxedPrecision
                              Decorate 44 Location 0
                              Decorate 47 RelaxedPrecision
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              MemberDecorate 50 0 RelaxedPrecision
                              MemberDecorate 50 0 Offset 0
                              Decorate 50 Block
                              Decorate 52 DescriptorSet 1
                              Decorate 52 Binding 0
                              Decorate 57 RelaxedPrecision
                              Decorate 58 RelaxedPrecision
                              Decorate 59 RelaxedPrecision
                              Decorate 61 RelaxedPrecision
                              Decorate 61 Location 0
                              Decorate 63 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 4
              11:             TypePointer Input 10(fvec4)
              12:     11(ptr) Variable Input
              13:             TypeVector 6(float) 2
              21:      8(ptr) Variable Private
              22:             TypeImage 6(float) 2D sampled format:Unknown
              23:             TypeSampledImage 22
              24:             TypePointer UniformConstant 23
              25:     24(ptr) Variable UniformConstant
              31:      8(ptr) Variable Private
              36:             TypePointer Input 7(fvec3)
              37:     36(ptr) Variable Input
              40:      8(ptr) Variable Private
              41:     24(ptr) Variable UniformConstant
              43:             TypePointer Input 13(fvec2)
              44:     43(ptr) Variable Input
              48:      8(ptr) Variable Private
              50:             TypeStruct 10(fvec4)
              51:             TypePointer Uniform 50(struct)
              52:     51(ptr) Variable Uniform
              53:             TypeInt 32 1
              54:     53(int) Constant 0
              55:             TypePointer Uniform 10(fvec4)
              60:             TypePointer Output 10(fvec4)
              61:     60(ptr) Variable Output
              67:    6(float) Constant 1065353216
              68:             TypeInt 32 0
              69:     68(int) Constant 3
              70:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              14:   10(fvec4) Load 12
              15:   13(fvec2) VectorShuffle 14 14 0 1
              16:   10(fvec4) Load 12
              17:   13(fvec2) VectorShuffle 16 16 3 3
              18:   13(fvec2) FDiv 15 17
              19:    7(fvec3) Load 9
              20:    7(fvec3) VectorShuffle 19 18 3 4 2
                              Store 9 20
              26:          23 Load 25
              27:    7(fvec3) Load 9
              28:   13(fvec2) VectorShuffle 27 27 0 1
              29:   10(fvec4) ImageSampleImplicitLod 26 28
              30:    7(fvec3) VectorShuffle 29 29 0 1 2
                              Store 21 30
              32:    7(fvec3) Load 21
              33:    7(fvec3) ExtInst 1(GLSL.std.450) 30(Log2) 32
                              Store 31 33
              34:    7(fvec3) Load 31
              35:    7(fvec3) FNegate 34
              38:    7(fvec3) Load 37
              39:    7(fvec3) FAdd 35 38
                              Store 9 39
              42:          23 Load 41
              45:   13(fvec2) Load 44
              46:   10(fvec4) ImageSampleImplicitLod 42 45
              47:    7(fvec3) VectorShuffle 46 46 0 1 2
                              Store 40 47
              49:    7(fvec3) Load 40
              56:     55(ptr) AccessChain 52 54
              57:   10(fvec4) Load 56
              58:    7(fvec3) VectorShuffle 57 57 0 1 2
              59:    7(fvec3) FMul 49 58
                              Store 48 59
              62:    7(fvec3) Load 9
              63:    7(fvec3) Load 48
              64:    7(fvec3) FMul 62 63
              65:   10(fvec4) Load 61
              66:   10(fvec4) VectorShuffle 65 64 4 5 6 3
                              Store 61 66
              71:     70(ptr) AccessChain 61 69
                              Store 71 67
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Keywords set in this variant: UNITY_HDR_ON 
-- Vertex shader for "d3d9":
// Stats: 48 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 19
Vector4 _ProjectionParams at 11
Vector4 unity_SHAb at 14
Vector4 unity_SHAg at 13
Vector4 unity_SHAr at 12
Vector4 unity_SHBb at 17
Vector4 unity_SHBg at 16
Vector4 unity_SHBr at 15
Vector4 unity_SHC at 18

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   float4 _ProjectionParams;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   float4 unity_SHAb;
//   float4 unity_SHAg;
//   float4 unity_SHAr;
//   float4 unity_SHBb;
//   float4 unity_SHBg;
//   float4 unity_SHBr;
//   float4 unity_SHC;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   _ProjectionParams   c11      1
//   unity_SHAr          c12      1
//   unity_SHAg          c13      1
//   unity_SHAb          c14      1
//   unity_SHBr          c15      1
//   unity_SHBg          c16      1
//   unity_SHBb          c17      1
//   unity_SHC           c18      1
//   _MainTex_ST         c19      1
//

    vs_3_0
    def c20, 1.05499995, -0.0549999997, 0, 0
    def c21, 1, 0, 0.5, 0.416666657
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3
    dcl_texcoord3 o4
    dcl_texcoord4 o5.xyz
    mad o1.xy, v2, c19, c19.zwzw
    dp4 o2.x, c0, v0
    dp4 o2.y, c1, v0
    dp4 o2.z, c2, v0
    mad r0, v0.xyzx, c21.xxxy, c21.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r0.x, c4, r1
    dp4 r0.w, c7, r1
    mul r2.xz, r0.xyww, c21.z
    dp4 r0.y, c5, r1
    dp4 r0.z, c6, r1
    mul r1.x, r0.y, c11.x
    mov r4, r0
    mov o3.zw, r0
    mul r2.w, r1.x, c21.z
    add o3.xy, r2.z, r2.xwzw
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    nrm r1.xyz, r0
    mul r0.x, r1.y, r1.y
    mad r0.x, r1.x, r1.x, -r0.x
    mul r2, r1.yzzx, r1.xyzz
    dp4 r3.x, c15, r2
    dp4 r3.y, c16, r2
    dp4 r3.z, c17, r2
    mad r0.xyz, c18, r0.x, r3
    mov r1.w, c21.x
    dp4 r2.x, c12, r1
    dp4 r2.y, c13, r1
    dp4 r2.z, c14, r1
    add r0.xyz, r0, r2
    max r0.xyz, r0, c21.y
    log r1.x, r0.x
    log r1.y, r0.y
    log r1.z, r0.z
    mul r0.xyz, r1, c21.w
    exp r1.x, r0.x
    exp r1.y, r0.y
    exp r1.z, r0.z
    mad r0.xyz, r1, c20.x, c20.y
    max o5.xyz, r0, c21.y
    mov o4, c21.y
    mad o0.xy, r4.w, c255, r4
    mov o0.zw, r4

// approximately 50 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 4 math, 2 textures
Vector4 _Color at 0

Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightBuffer" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   sampler2D _LightBuffer;
//   sampler2D _MainTex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   _Color       c0       1
//   _MainTex     s0       1
//   _LightBuffer s1       1
//

    ps_3_0
    def c1, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord2 v1
    dcl_texcoord4 v2.xyz
    dcl_2d s0
    dcl_2d s1
    texld r0, v0, s0
    mul_pp r0.xyz, r0, c0
    texldp_pp r1, v1, s1
    add_pp r1.xyz, r1, v2
    mul_pp oC0.xyz, r0, r1
    mov_pp oC0.w, c1.x

// approximately 6 instruction slots used (2 texture, 4 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 36 math, 4 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 2 {
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 3 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 4 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[45], immediateIndexed
      dcl_constantbuffer CB3[7], immediateIndexed
      dcl_constantbuffer CB4[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyzw
      dcl_output o4.xyzw
      dcl_output o5.xyz
      dcl_temps 4
   0: mul r0.xyzw, v0.yyyy, cb3[1].xyzw
   1: mad r0.xyzw, cb3[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb3[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb3[3].xyzw
   4: mad o2.xyz, cb3[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb4[18].xyzw
   6: mad r0.xyzw, cb4[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb4[19].xyzw, r1.zzzz, r0.xyzw
   8: mad r0.xyzw, cb4[20].xyzw, r1.wwww, r0.xyzw
   9: mov o0.xyzw, r0.xyzw
  10: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  11: mul r0.y, r0.y, cb1[5].x
  12: mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
  13: mov o3.zw, r0.zzzw
  14: add o3.xy, r1.zzzz, r1.xwxx
  15: mov o4.xyzw, l(0,0,0,0)
  16: dp3 r0.x, v2.xyzx, cb3[4].xyzx
  17: dp3 r0.y, v2.xyzx, cb3[5].xyzx
  18: dp3 r0.z, v2.xyzx, cb3[6].xyzx
  19: dp3 r0.w, r0.xyzx, r0.xyzx
  20: rsq r0.w, r0.w
  21: mul r0.xyz, r0.wwww, r0.xyzx
  22: mul r1.x, r0.y, r0.y
  23: mad r1.x, r0.x, r0.x, -r1.x
  24: mul r2.xyzw, r0.yzzx, r0.xyzz
  25: dp4 r3.x, cb2[41].xyzw, r2.xyzw
  26: dp4 r3.y, cb2[42].xyzw, r2.xyzw
  27: dp4 r3.z, cb2[43].xyzw, r2.xyzw
  28: mad r1.xyz, cb2[44].xyzx, r1.xxxx, r3.xyzx
  29: mov r0.w, l(1.000000)
  30: dp4 r2.x, cb2[38].xyzw, r0.xyzw
  31: dp4 r2.y, cb2[39].xyzw, r0.xyzw
  32: dp4 r2.z, cb2[40].xyzw, r0.xyzw
  33: add r0.xyz, r1.xyzx, r2.xyzx
  34: max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  35: log r0.xyz, r0.xyzx
  36: mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  37: exp r0.xyz, r0.xyzx
  38: mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  39: max o5.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  40: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 4 math, 2 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightBuffer" to slot 1

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _Color at 64
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float       
// TEXCOORD                 2   xyzw        3     NONE   float   xy w
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v3.xyw
      dcl_input_ps linear v5.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: div r0.xy, v3.xyxx, v3.wwww
   1: sample r0.xyzw, r0.xyxx, t1.xyzw, s1
   2: add r0.xyz, r0.xyzx, v5.xyzx
   3: sample r1.xyzw, v1.xyxx, t0.xyzw, s0
   4: mul r1.xyz, r1.xyzx, cb0[4].xyzx
   5: mul o0.xyz, r0.xyzx, r1.xyzx
   6: mov o0.w, l(1.000000)
   7: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 4 math, 2 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  highp vec4 o_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_3.zw;
  tmpvar_1.zw = vec2(0.0, 0.0);
  tmpvar_1.xy = vec2(0.0, 0.0);
  highp mat3 tmpvar_8;
  tmpvar_8[0] = unity_WorldToObject[0].xyz;
  tmpvar_8[1] = unity_WorldToObject[1].xyz;
  tmpvar_8[2] = unity_WorldToObject[2].xyz;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = normalize((_glesNormal * tmpvar_8));
  mediump vec4 normal_10;
  normal_10 = tmpvar_9;
  mediump vec3 res_11;
  mediump vec3 x_12;
  x_12.x = dot (unity_SHAr, normal_10);
  x_12.y = dot (unity_SHAg, normal_10);
  x_12.z = dot (unity_SHAb, normal_10);
  mediump vec3 x1_13;
  mediump vec4 tmpvar_14;
  tmpvar_14 = (normal_10.xyzz * normal_10.yzzx);
  x1_13.x = dot (unity_SHBr, tmpvar_14);
  x1_13.y = dot (unity_SHBg, tmpvar_14);
  x1_13.z = dot (unity_SHBb, tmpvar_14);
  res_11 = (x_12 + (x1_13 + (unity_SHC.xyz * 
    ((normal_10.x * normal_10.x) - (normal_10.y * normal_10.y))
  )));
  mediump vec3 tmpvar_15;
  tmpvar_15 = max (((1.055 * 
    pow (max (res_11, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_11 = tmpvar_15;
  tmpvar_2 = tmpvar_15;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD2 = o_5;
  xlv_TEXCOORD3 = tmpvar_1;
  xlv_TEXCOORD4 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform sampler2D _LightBuffer;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump vec4 c_2;
  mediump vec4 light_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2DProj (_LightBuffer, xlv_TEXCOORD2);
  light_3 = tmpvar_5;
  light_3.xyz = (light_3.xyz + xlv_TEXCOORD4);
  lowp vec4 c_6;
  c_6.xyz = (tmpvar_4.xyz * light_3.xyz);
  c_6.w = tmpvar_4.w;
  c_2.xyz = c_6.xyz;
  c_2.w = 1.0;
  tmpvar_1 = c_2;
  gl_FragData[0] = tmpvar_1;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 36 math, 4 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ProjectionParams at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 2 {
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 3 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 4 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             5         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             5         1  ( FLT, FLT, FLT, FLT)
// c3         cb2            38         7  ( FLT, FLT, FLT, FLT)
// c10        cb3             0         7  ( FLT, FLT, FLT, FLT)
// c17        cb4            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          def c21, 0.5, 1, 0, 0.416666657
          def c22, 1.05499995, -0.0549999997, 0, 0
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c11
   2:     mad r0, c10, v0.x, r0
   3:     mad r0, c12, v0.z, r0
   4:     mad oT1.xyz, c13, v0.w, r0
   5:     add r0, r0, c13
   6:     mul r1, r0.y, c18
   7:     mad r1, c17, r0.x, r1
   8:     mad r1, c19, r0.z, r1
   9:     mad r0, c20, r0.w, r1
  10:     mul r1.xz, r0.xyww, c21.x
  11:     mul r1.y, r0.y, c2.x
  12:     mul r1.w, r1.y, c21.x
  13:     add oT2.xy, r1.z, r1.xwzw
  14:     dp3 r1.x, v2, c14
  15:     dp3 r1.y, v2, c15
  16:     dp3 r1.z, v2, c16
  17:     nrm r2.xyz, r1
  20:     mul r1.x, r2.y, r2.y
  21:     mad r1.x, r2.x, r2.x, -r1.x
  22:     mul r3, r2.yzzx, r2.xyzz
  23:     dp4 r4.x, c6, r3
  24:     dp4 r4.y, c7, r3
  25:     dp4 r4.z, c8, r3
  26:     mad r1.xyz, c9, r1.x, r4
  27:     mov r2.w, c21.y
  28:     dp4 r3.x, c3, r2
  29:     dp4 r3.y, c4, r2
  30:     dp4 r3.z, c5, r2
  31:     add r1.xyz, r1, r3
  32:     max r1.xyz, r1, c21.z
  33:     mov r1.w, c21.w
  34:     lit r2, r1.xxww
  35:     mov r2.x, r2.z
  36:     lit r3, r1.yyww
  37:     lit r1, r1.zzww
  38:     mov r2.z, r1.z
  39:     mov r2.y, r3.z
  40:     mad r1.xyz, r2, c22.x, c22.y
  41:     max oT4.xyz, r1, c21.z
  42:     mad oPos.xy, r0.w, c0, r0
  43:     mov oPos.zw, r0
  44:     mov oT2.zw, r0
  45:     mov oT3, c21.z

// approximately 46 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[6], immediateIndexed
      dcl_constantbuffer CB2[45], immediateIndexed
      dcl_constantbuffer CB3[7], immediateIndexed
      dcl_constantbuffer CB4[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyzw
      dcl_output o4.xyzw
      dcl_output o5.xyz
      dcl_temps 4
   0: mul r0.xyzw, v0.yyyy, cb3[1].xyzw
   1: mad r0.xyzw, cb3[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb3[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb3[3].xyzw
   4: mad o2.xyz, cb3[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb4[18].xyzw
   6: mad r0.xyzw, cb4[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb4[19].xyzw, r1.zzzz, r0.xyzw
   8: mad r0.xyzw, cb4[20].xyzw, r1.wwww, r0.xyzw
   9: mov o0.xyzw, r0.xyzw
  10: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  11: mul r0.y, r0.y, cb1[5].x
  12: mul r1.xzw, r0.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
  13: mov o3.zw, r0.zzzw
  14: add o3.xy, r1.zzzz, r1.xwxx
  15: mov o4.xyzw, l(0,0,0,0)
  16: dp3 r0.x, v2.xyzx, cb3[4].xyzx
  17: dp3 r0.y, v2.xyzx, cb3[5].xyzx
  18: dp3 r0.z, v2.xyzx, cb3[6].xyzx
  19: dp3 r0.w, r0.xyzx, r0.xyzx
  20: rsq r0.w, r0.w
  21: mul r0.xyz, r0.wwww, r0.xyzx
  22: mul r1.x, r0.y, r0.y
  23: mad r1.x, r0.x, r0.x, -r1.x
  24: mul r2.xyzw, r0.yzzx, r0.xyzz
  25: dp4 r3.x, cb2[41].xyzw, r2.xyzw
  26: dp4 r3.y, cb2[42].xyzw, r2.xyzw
  27: dp4 r3.z, cb2[43].xyzw, r2.xyzw
  28: mad r1.xyz, cb2[44].xyzx, r1.xxxx, r3.xyzx
  29: mov r0.w, l(1.000000)
  30: dp4 r2.x, cb2[38].xyzw, r0.xyzw
  31: dp4 r2.y, cb2[39].xyzw, r0.xyzw
  32: dp4 r2.z, cb2[40].xyzw, r0.xyzw
  33: add r0.xyz, r1.xyzx, r2.xyzx
  34: max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  35: log r0.xyz, r0.xyzx
  36: mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  37: exp r0.xyz, r0.xyzx
  38: mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  39: max o5.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  40: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 5 math, 2 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightBuffer" to slot 1

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _Color at 64
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float       
// TEXCOORD                 2   xyzw        3     NONE   float   xy w
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             4         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
// s1             s1              t1               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c1, 0.00100000005, 1, 0, 0
          dcl t0.xy
          dcl t2
          dcl t4.xyz
          dcl_2d s0
          dcl_2d s1
   0:     rcp r0.w, t2.w
   1:     mul r0.xy, r0.w, t2
   2:     texld r1, t0, s0
   2:     texld_pp r0, r0, s1
   2:     max_pp r2.xyz, r0, c1.x
   3:     add_pp r0.xyz, r2, t4
   4:     mul_pp r1.xyz, r1, c0
   5:     mul_pp r0.xyz, r0, r1
   6:     mov_pp r0.w, c1.y
   7:     mov_pp oC0, r0

// approximately 10 instruction slots used (2 texture, 8 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v3.xyw
      dcl_input_ps linear v5.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: div r0.xy, v3.xyxx, v3.wwww
   1: sample r0.xyzw, r0.xyxx, t1.xyzw, s1
   2: max r0.xyz, r0.xyzx, l(0.001000, 0.001000, 0.001000, 0.000000)
   3: add r0.xyz, r0.xyzx, v5.xyzx
   4: sample r1.xyzw, v1.xyxx, t0.xyzw, s0
   5: mul r1.xyz, r1.xyzx, cb0[4].xyzx
   6: mul o0.xyz, r0.xyzx, r1.xyzx
   7: mov o0.w, l(1.000000)
   8: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightBuffer;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
lowp vec3 u_xlat10_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat10_0.xyz = texture(_LightBuffer, u_xlat0.xy).xyz;
    u_xlat16_1.xyz = max(u_xlat10_0.xyz, vec3(0.00100000005, 0.00100000005, 0.00100000005));
    u_xlat0.xyz = u_xlat16_1.xyz + vs_TEXCOORD4.xyz;
    u_xlat10_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (336 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 128
  Matrix4x4 unity_WorldToObject at 192
  Matrix4x4 unity_MatrixVP at 256
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHAr at 16
  Vector4 unity_SHAg at 32
  Vector4 unity_SHAb at 48
  Vector4 unity_SHBr at 64
  Vector4 unity_SHBg at 80
  Vector4 unity_SHBb at 96
  Vector4 unity_SHC at 112
  Vector4 _MainTex_ST at 320
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    u_xlat0.y = u_xlat0.y * Globals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD2.zw = u_xlat0.zw;
    output.TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = fma(u_xlat0.x, u_xlat0.x, (-u_xlat1.x));
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(Globals.unity_SHBb, u_xlat2);
    u_xlat1.xyz = fma(Globals.unity_SHC.xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(Globals.unity_SHAr, u_xlat0);
    u_xlat2.y = dot(Globals.unity_SHAg, u_xlat0);
    u_xlat2.z = dot(Globals.unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_LightBuffer" to slot 1

Constant Buffer "Globals" (16 bytes) on slot 0 {
  Vector4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    sampler sampler_LightBuffer [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<float, access::sample > _LightBuffer [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    u_xlat0.xy = input.TEXCOORD2.xy / input.TEXCOORD2.ww;
    u_xlat0.xyz = _LightBuffer.sample(sampler_LightBuffer, u_xlat0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz + input.TEXCOORD4.xyz;
    u_xlat1.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * Globals._Color.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD2.zw = u_xlat0.zw;
    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightBuffer;
in  vec2 vs_TEXCOORD0;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat10_1;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.xy / vs_TEXCOORD2.ww;
    u_xlat10_0 = texture(_LightBuffer, u_xlat0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz + vs_TEXCOORD4.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Set 2D Texture "_LightBuffer" to set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals515336137" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "VGlobals515336137" (336 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 256
  Matrix4x4 unity_ObjectToWorld at 128
  Matrix4x4 unity_WorldToObject at 192
  Vector4 _MainTex_ST at 320
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHAb at 48
  Vector4 unity_SHAg at 32
  Vector4 unity_SHAr at 16
  Vector4 unity_SHBb at 96
  Vector4 unity_SHBg at 80
  Vector4 unity_SHBr at 64
  Vector4 unity_SHC at 112
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 293

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 53 94 100 101 129 141 145 283
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 RelaxedPrecision
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 RelaxedPrecision
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 RelaxedPrecision
                              MemberDecorate 19 3 Offset 48
                              MemberDecorate 19 4 RelaxedPrecision
                              MemberDecorate 19 4 Offset 64
                              MemberDecorate 19 5 RelaxedPrecision
                              MemberDecorate 19 5 Offset 80
                              MemberDecorate 19 6 RelaxedPrecision
                              MemberDecorate 19 6 Offset 96
                              MemberDecorate 19 7 RelaxedPrecision
                              MemberDecorate 19 7 Offset 112
                              MemberDecorate 19 8 Offset 128
                              MemberDecorate 19 9 Offset 192
                              MemberDecorate 19 10 Offset 256
                              MemberDecorate 19 11 Offset 320
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 53 Location 3
                              MemberDecorate 92 0 BuiltIn Position
                              MemberDecorate 92 1 BuiltIn PointSize
                              MemberDecorate 92 2 BuiltIn ClipDistance
                              Decorate 92 Block
                              Decorate 100 Location 0
                              Decorate 101 Location 2
                              Decorate 129 Location 1
                              Decorate 141 Location 4
                              Decorate 145 Location 1
                              Decorate 182 RelaxedPrecision
                              Decorate 195 RelaxedPrecision
                              Decorate 196 RelaxedPrecision
                              Decorate 199 RelaxedPrecision
                              Decorate 205 RelaxedPrecision
                              Decorate 208 RelaxedPrecision
                              Decorate 209 RelaxedPrecision
                              Decorate 210 RelaxedPrecision
                              Decorate 214 RelaxedPrecision
                              Decorate 215 RelaxedPrecision
                              Decorate 216 RelaxedPrecision
                              Decorate 220 RelaxedPrecision
                              Decorate 221 RelaxedPrecision
                              Decorate 222 RelaxedPrecision
                              Decorate 226 RelaxedPrecision
                              Decorate 227 RelaxedPrecision
                              Decorate 228 RelaxedPrecision
                              Decorate 229 RelaxedPrecision
                              Decorate 230 RelaxedPrecision
                              Decorate 231 RelaxedPrecision
                              Decorate 232 RelaxedPrecision
                              Decorate 237 RelaxedPrecision
                              Decorate 242 RelaxedPrecision
                              Decorate 247 RelaxedPrecision
                              Decorate 251 RelaxedPrecision
                              Decorate 252 RelaxedPrecision
                              Decorate 253 RelaxedPrecision
                              Decorate 254 RelaxedPrecision
                              Decorate 256 RelaxedPrecision
                              Decorate 257 RelaxedPrecision
                              Decorate 258 RelaxedPrecision
                              Decorate 283 Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 8
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              29:     22(int) Constant 0
              37:     22(int) Constant 2
              45:      8(ptr) Variable Private
              47:     22(int) Constant 3
              51:             TypeVector 6(float) 3
              52:             TypePointer Output 51(fvec3)
              53:     52(ptr) Variable Output
              65:     22(int) Constant 10
              90:     14(int) Constant 1
              91:             TypeArray 6(float) 90
              92:             TypeStruct 7(fvec4) 6(float) 91
              93:             TypePointer Output 92(struct)
              94:     93(ptr) Variable Output
              96:             TypePointer Output 7(fvec4)
              98:             TypeVector 6(float) 2
              99:             TypePointer Output 98(fvec2)
             100:     99(ptr) Variable Output
             101:     10(ptr) Variable Input
             104:     22(int) Constant 11
             113:             TypePointer Private 6(float)
             116:     14(int) Constant 0
             117:             TypePointer Uniform 6(float)
             124:    6(float) Constant 1056964608
             125:   51(fvec3) ConstantComposite 124 124 124
             129:     96(ptr) Variable Output
             141:     96(ptr) Variable Output
             142:    6(float) Constant 0
             143:    7(fvec4) ConstantComposite 142 142 142 142
             144:             TypePointer Input 51(fvec3)
             145:    144(ptr) Variable Input
             147:     22(int) Constant 9
             164:     14(int) Constant 2
             166:    113(ptr) Variable Private
             181:             TypePointer Private 51(fvec3)
             182:    181(ptr) Variable Private
             199:      8(ptr) Variable Private
             205:    181(ptr) Variable Private
             206:     22(int) Constant 4
             212:     22(int) Constant 5
             218:     22(int) Constant 6
             224:     22(int) Constant 7
             233:    6(float) Constant 1065353216
             234:     14(int) Constant 3
             255:   51(fvec3) ConstantComposite 142 142 142
             263:    6(float) Constant 1054168405
             264:   51(fvec3) ConstantComposite 263 263 263
             275:    6(float) Constant 1065814589
             276:   51(fvec3) ConstantComposite 275 275 275
             278:    6(float) Constant 3177269166
             279:   51(fvec3) ConstantComposite 278 278 278
             283:     52(ptr) Variable Output
             287:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              30:     25(ptr) AccessChain 21 23 29
              31:    7(fvec4) Load 30
              32:    7(fvec4) Load 11
              33:    7(fvec4) VectorShuffle 32 32 0 0 0 0
              34:    7(fvec4) FMul 31 33
              35:    7(fvec4) Load 9
              36:    7(fvec4) FAdd 34 35
                              Store 9 36
              38:     25(ptr) AccessChain 21 23 37
              39:    7(fvec4) Load 38
              40:    7(fvec4) Load 11
              41:    7(fvec4) VectorShuffle 40 40 2 2 2 2
              42:    7(fvec4) FMul 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) FAdd 42 43
                              Store 9 44
              46:    7(fvec4) Load 9
              48:     25(ptr) AccessChain 21 23 47
              49:    7(fvec4) Load 48
              50:    7(fvec4) FAdd 46 49
                              Store 45 50
              54:     25(ptr) AccessChain 21 23 47
              55:    7(fvec4) Load 54
              56:   51(fvec3) VectorShuffle 55 55 0 1 2
              57:    7(fvec4) Load 11
              58:   51(fvec3) VectorShuffle 57 57 3 3 3
              59:   51(fvec3) FMul 56 58
              60:    7(fvec4) Load 9
              61:   51(fvec3) VectorShuffle 60 60 0 1 2
              62:   51(fvec3) FAdd 59 61
                              Store 53 62
              63:    7(fvec4) Load 45
              64:    7(fvec4) VectorShuffle 63 63 1 1 1 1
              66:     25(ptr) AccessChain 21 65 24
              67:    7(fvec4) Load 66
              68:    7(fvec4) FMul 64 67
                              Store 9 68
              69:     25(ptr) AccessChain 21 65 29
              70:    7(fvec4) Load 69
              71:    7(fvec4) Load 45
              72:    7(fvec4) VectorShuffle 71 71 0 0 0 0
              73:    7(fvec4) FMul 70 72
              74:    7(fvec4) Load 9
              75:    7(fvec4) FAdd 73 74
                              Store 9 75
              76:     25(ptr) AccessChain 21 65 37
              77:    7(fvec4) Load 76
              78:    7(fvec4) Load 45
              79:    7(fvec4) VectorShuffle 78 78 2 2 2 2
              80:    7(fvec4) FMul 77 79
              81:    7(fvec4) Load 9
              82:    7(fvec4) FAdd 80 81
                              Store 9 82
              83:     25(ptr) AccessChain 21 65 47
              84:    7(fvec4) Load 83
              85:    7(fvec4) Load 45
              86:    7(fvec4) VectorShuffle 85 85 3 3 3 3
              87:    7(fvec4) FMul 84 86
              88:    7(fvec4) Load 9
              89:    7(fvec4) FAdd 87 88
                              Store 9 89
              95:    7(fvec4) Load 9
              97:     96(ptr) AccessChain 94 29
                              Store 97 95
             102:    7(fvec4) Load 101
             103:   98(fvec2) VectorShuffle 102 102 0 1
             105:     25(ptr) AccessChain 21 104
             106:    7(fvec4) Load 105
             107:   98(fvec2) VectorShuffle 106 106 0 1
             108:   98(fvec2) FMul 103 107
             109:     25(ptr) AccessChain 21 104
             110:    7(fvec4) Load 109
             111:   98(fvec2) VectorShuffle 110 110 2 3
             112:   98(fvec2) FAdd 108 111
                              Store 100 112
             114:    113(ptr) AccessChain 9 90
             115:    6(float) Load 114
             118:    117(ptr) AccessChain 21 29 116
             119:    6(float) Load 118
             120:    6(float) FMul 115 119
             121:    113(ptr) AccessChain 9 90
                              Store 121 120
             122:    7(fvec4) Load 9
             123:   51(fvec3) VectorShuffle 122 122 0 3 1
             126:   51(fvec3) FMul 123 125
             127:    7(fvec4) Load 45
             128:    7(fvec4) VectorShuffle 127 126 4 1 5 6
                              Store 45 128
             130:    7(fvec4) Load 9
             131:   98(fvec2) VectorShuffle 130 130 2 3
             132:    7(fvec4) Load 129
             133:    7(fvec4) VectorShuffle 132 131 0 1 4 5
                              Store 129 133
             134:    7(fvec4) Load 45
             135:   98(fvec2) VectorShuffle 134 134 2 2
             136:    7(fvec4) Load 45
             137:   98(fvec2) VectorShuffle 136 136 0 3
             138:   98(fvec2) FAdd 135 137
             139:    7(fvec4) Load 129
             140:    7(fvec4) VectorShuffle 139 138 4 5 2 3
                              Store 129 140
                              Store 141 143
             146:   51(fvec3) Load 145
             148:     25(ptr) AccessChain 21 147 29
             149:    7(fvec4) Load 148
             150:   51(fvec3) VectorShuffle 149 149 0 1 2
             151:    6(float) Dot 146 150
             152:    113(ptr) AccessChain 9 116
                              Store 152 151
             153:   51(fvec3) Load 145
             154:     25(ptr) AccessChain 21 147 24
             155:    7(fvec4) Load 154
             156:   51(fvec3) VectorShuffle 155 155 0 1 2
             157:    6(float) Dot 153 156
             158:    113(ptr) AccessChain 9 90
                              Store 158 157
             159:   51(fvec3) Load 145
             160:     25(ptr) AccessChain 21 147 37
             161:    7(fvec4) Load 160
             162:   51(fvec3) VectorShuffle 161 161 0 1 2
             163:    6(float) Dot 159 162
             165:    113(ptr) AccessChain 9 164
                              Store 165 163
             167:    7(fvec4) Load 9
             168:   51(fvec3) VectorShuffle 167 167 0 1 2
             169:    7(fvec4) Load 9
             170:   51(fvec3) VectorShuffle 169 169 0 1 2
             171:    6(float) Dot 168 170
                              Store 166 171
             172:    6(float) Load 166
             173:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 172
                              Store 166 173
             174:    6(float) Load 166
             175:   51(fvec3) CompositeConstruct 174 174 174
             176:    7(fvec4) Load 9
             177:   51(fvec3) VectorShuffle 176 176 0 1 2
             178:   51(fvec3) FMul 175 177
             179:    7(fvec4) Load 9
             180:    7(fvec4) VectorShuffle 179 178 4 5 6 3
                              Store 9 180
             183:    113(ptr) AccessChain 9 90
             184:    6(float) Load 183
             185:    113(ptr) AccessChain 9 90
             186:    6(float) Load 185
             187:    6(float) FMul 184 186
             188:    113(ptr) AccessChain 182 116
                              Store 188 187
             189:    113(ptr) AccessChain 9 116
             190:    6(float) Load 189
             191:    113(ptr) AccessChain 9 116
             192:    6(float) Load 191
             193:    6(float) FMul 190 192
             194:    113(ptr) AccessChain 182 116
             195:    6(float) Load 194
             196:    6(float) FNegate 195
             197:    6(float) FAdd 193 196
             198:    113(ptr) AccessChain 182 116
                              Store 198 197
             200:    7(fvec4) Load 9
             201:    7(fvec4) VectorShuffle 200 200 1 2 2 0
             202:    7(fvec4) Load 9
             203:    7(fvec4) VectorShuffle 202 202 0 1 2 2
             204:    7(fvec4) FMul 201 203
                              Store 199 204
             207:     25(ptr) AccessChain 21 206
             208:    7(fvec4) Load 207
             209:    7(fvec4) Load 199
             210:    6(float) Dot 208 209
             211:    113(ptr) AccessChain 205 116
                              Store 211 210
             213:     25(ptr) AccessChain 21 212
             214:    7(fvec4) Load 213
             215:    7(fvec4) Load 199
             216:    6(float) Dot 214 215
             217:    113(ptr) AccessChain 205 90
                              Store 217 216
             219:     25(ptr) AccessChain 21 218
             220:    7(fvec4) Load 219
             221:    7(fvec4) Load 199
             222:    6(float) Dot 220 221
             223:    113(ptr) AccessChain 205 164
                              Store 223 222
             225:     25(ptr) AccessChain 21 224
             226:    7(fvec4) Load 225
             227:   51(fvec3) VectorShuffle 226 226 0 1 2
             228:   51(fvec3) Load 182
             229:   51(fvec3) VectorShuffle 228 228 0 0 0
             230:   51(fvec3) FMul 227 229
             231:   51(fvec3) Load 205
             232:   51(fvec3) FAdd 230 231
                              Store 182 232
             235:    113(ptr) AccessChain 9 234
                              Store 235 233
             236:     25(ptr) AccessChain 21 24
             237:    7(fvec4) Load 236
             238:    7(fvec4) Load 9
             239:    6(float) Dot 237 238
             240:    113(ptr) AccessChain 205 116
                              Store 240 239
             241:     25(ptr) AccessChain 21 37
             242:    7(fvec4) Load 241
             243:    7(fvec4) Load 9
             244:    6(float) Dot 242 243
             245:    113(ptr) AccessChain 205 90
                              Store 245 244
             246:     25(ptr) AccessChain 21 47
             247:    7(fvec4) Load 246
             248:    7(fvec4) Load 9
             249:    6(float) Dot 247 248
             250:    113(ptr) AccessChain 205 164
                              Store 250 249
             251:   51(fvec3) Load 182
             252:   51(fvec3) Load 205
             253:   51(fvec3) FAdd 251 252
                              Store 182 253
             254:   51(fvec3) Load 182
             256:   51(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 254 255
                              Store 182 256
             257:   51(fvec3) Load 182
             258:   51(fvec3) ExtInst 1(GLSL.std.450) 30(Log2) 257
             259:    7(fvec4) Load 9
             260:    7(fvec4) VectorShuffle 259 258 4 5 6 3
                              Store 9 260
             261:    7(fvec4) Load 9
             262:   51(fvec3) VectorShuffle 261 261 0 1 2
             265:   51(fvec3) FMul 262 264
             266:    7(fvec4) Load 9
             267:    7(fvec4) VectorShuffle 266 265 4 5 6 3
                              Store 9 267
             268:    7(fvec4) Load 9
             269:   51(fvec3) VectorShuffle 268 268 0 1 2
             270:   51(fvec3) ExtInst 1(GLSL.std.450) 29(Exp2) 269
             271:    7(fvec4) Load 9
             272:    7(fvec4) VectorShuffle 271 270 4 5 6 3
                              Store 9 272
             273:    7(fvec4) Load 9
             274:   51(fvec3) VectorShuffle 273 273 0 1 2
             277:   51(fvec3) FMul 274 276
             280:   51(fvec3) FAdd 277 279
             281:    7(fvec4) Load 9
             282:    7(fvec4) VectorShuffle 281 280 4 5 6 3
                              Store 9 282
             284:    7(fvec4) Load 9
             285:   51(fvec3) VectorShuffle 284 284 0 1 2
             286:   51(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 285 255
                              Store 283 286
             288:    287(ptr) AccessChain 94 29 90
             289:    6(float) Load 288
             290:    6(float) FNegate 289
             291:    287(ptr) AccessChain 94 29 90
                              Store 291 290
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 69

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 12 33 40 57
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 12 Location 1
                              Decorate 21 RelaxedPrecision
                              Decorate 25 RelaxedPrecision
                              Decorate 25 DescriptorSet 0
                              Decorate 25 Binding 1
                              Decorate 26 RelaxedPrecision
                              Decorate 30 RelaxedPrecision
                              Decorate 31 RelaxedPrecision
                              Decorate 33 Location 2
                              Decorate 36 RelaxedPrecision
                              Decorate 37 RelaxedPrecision
                              Decorate 37 DescriptorSet 0
                              Decorate 37 Binding 0
                              Decorate 38 RelaxedPrecision
                              Decorate 40 Location 0
                              Decorate 43 RelaxedPrecision
                              Decorate 44 RelaxedPrecision
                              Decorate 45 RelaxedPrecision
                              MemberDecorate 46 0 RelaxedPrecision
                              MemberDecorate 46 0 Offset 0
                              Decorate 46 Block
                              Decorate 48 DescriptorSet 1
                              Decorate 48 Binding 0
                              Decorate 53 RelaxedPrecision
                              Decorate 54 RelaxedPrecision
                              Decorate 55 RelaxedPrecision
                              Decorate 57 RelaxedPrecision
                              Decorate 57 Location 0
                              Decorate 59 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeVector 6(float) 4
              11:             TypePointer Input 10(fvec4)
              12:     11(ptr) Variable Input
              13:             TypeVector 6(float) 2
              21:      8(ptr) Variable Private
              22:             TypeImage 6(float) 2D sampled format:Unknown
              23:             TypeSampledImage 22
              24:             TypePointer UniformConstant 23
              25:     24(ptr) Variable UniformConstant
              32:             TypePointer Input 7(fvec3)
              33:     32(ptr) Variable Input
              36:      8(ptr) Variable Private
              37:     24(ptr) Variable UniformConstant
              39:             TypePointer Input 13(fvec2)
              40:     39(ptr) Variable Input
              44:      8(ptr) Variable Private
              46:             TypeStruct 10(fvec4)
              47:             TypePointer Uniform 46(struct)
              48:     47(ptr) Variable Uniform
              49:             TypeInt 32 1
              50:     49(int) Constant 0
              51:             TypePointer Uniform 10(fvec4)
              56:             TypePointer Output 10(fvec4)
              57:     56(ptr) Variable Output
              63:    6(float) Constant 1065353216
              64:             TypeInt 32 0
              65:     64(int) Constant 3
              66:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              14:   10(fvec4) Load 12
              15:   13(fvec2) VectorShuffle 14 14 0 1
              16:   10(fvec4) Load 12
              17:   13(fvec2) VectorShuffle 16 16 3 3
              18:   13(fvec2) FDiv 15 17
              19:    7(fvec3) Load 9
              20:    7(fvec3) VectorShuffle 19 18 3 4 2
                              Store 9 20
              26:          23 Load 25
              27:    7(fvec3) Load 9
              28:   13(fvec2) VectorShuffle 27 27 0 1
              29:   10(fvec4) ImageSampleImplicitLod 26 28
              30:    7(fvec3) VectorShuffle 29 29 0 1 2
                              Store 21 30
              31:    7(fvec3) Load 21
              34:    7(fvec3) Load 33
              35:    7(fvec3) FAdd 31 34
                              Store 9 35
              38:          23 Load 37
              41:   13(fvec2) Load 40
              42:   10(fvec4) ImageSampleImplicitLod 38 41
              43:    7(fvec3) VectorShuffle 42 42 0 1 2
                              Store 36 43
              45:    7(fvec3) Load 36
              52:     51(ptr) AccessChain 48 50
              53:   10(fvec4) Load 52
              54:    7(fvec3) VectorShuffle 53 53 0 1 2
              55:    7(fvec3) FMul 45 54
                              Store 44 55
              58:    7(fvec3) Load 9
              59:    7(fvec3) Load 44
              60:    7(fvec3) FMul 58 59
              61:   10(fvec4) Load 57
              62:   10(fvec4) VectorShuffle 61 60 4 5 6 3
                              Store 57 62
              67:     66(ptr) AccessChain 57 65
                              Store 67 63
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }


 // Stats for Vertex shader:
 //         d3d9: 43 math
 //        d3d11: 33 math
 //         gles: 12 avg math (11..13), 1 texture
 //     d3d11_9x: 33 math
 // Stats for Fragment shader:
 //         d3d9: 8 avg math (7..10), 1 texture
 //        d3d11: 3 avg math (3..4), 1 texture
 //     d3d11_9x: 3 avg math (3..4), 1 texture
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="DEFERRED" "RenderType"="Opaque" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
No keywords set in this variant.
-- Vertex shader for "d3d9":
// Stats: 43 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 18
Vector4 unity_SHAb at 13
Vector4 unity_SHAg at 12
Vector4 unity_SHAr at 11
Vector4 unity_SHBb at 16
Vector4 unity_SHBg at 15
Vector4 unity_SHBr at 14
Vector4 unity_SHC at 17

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   float4 unity_SHAb;
//   float4 unity_SHAg;
//   float4 unity_SHAr;
//   float4 unity_SHBb;
//   float4 unity_SHBg;
//   float4 unity_SHBr;
//   float4 unity_SHC;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   unity_SHAr          c11      1
//   unity_SHAg          c12      1
//   unity_SHAb          c13      1
//   unity_SHBr          c14      1
//   unity_SHBg          c15      1
//   unity_SHBb          c16      1
//   unity_SHC           c17      1
//   _MainTex_ST         c18      1
//

    vs_3_0
    def c19, 1.05499995, -0.0549999997, 0, 0
    def c20, 1, 0, 0.416666657, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4
    dcl_texcoord4 o5.xyz
    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r4.x, c4, r1
    dp4 r4.y, c5, r1
    dp4 r4.z, c6, r1
    dp4 r4.w, c7, r1
    mad o1.xy, v2, c18, c18.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    nrm r1.xyz, r0
    mul r0.x, r1.y, r1.y
    mad r0.x, r1.x, r1.x, -r0.x
    mul r2, r1.yzzx, r1.xyzz
    dp4 r3.x, c14, r2
    dp4 r3.y, c15, r2
    dp4 r3.z, c16, r2
    mad r0.xyz, c17, r0.x, r3
    mov r1.w, c20.x
    dp4 r2.x, c11, r1
    dp4 r2.y, c12, r1
    dp4 r2.z, c13, r1
    mov o2.xyz, r1
    add r0.xyz, r0, r2
    max r0.xyz, r0, c20.y
    log r1.x, r0.x
    log r1.y, r0.y
    log r1.z, r0.z
    mul r0.xyz, r1, c20.z
    exp r1.x, r0.x
    exp r1.y, r0.y
    exp r1.z, r0.z
    mad r0.xyz, r1, c19.x, c19.y
    max o5.xyz, r0, c20.y
    mov o4, c20.y
    mad o0.xy, r4.w, c255, r4
    mov o0.zw, r4

// approximately 45 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 10 math, 1 textures
Vector4 _Color at 0

Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   sampler2D _MainTex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   _Color       c0       1
//   _MainTex     s0       1
//

    ps_3_0
    def c1, 1, 0, 0.5, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_texcoord4_pp v2.xyz
    dcl_2d s0
    texld r0, v0, s0
    mul_pp r0.xyz, r0, c0
    mul_pp r1.xyz, r0, v2
    mov_pp oC0.xyz, r0
    exp_pp oC3.x, -r1.x
    exp_pp oC3.y, -r1.y
    exp_pp oC3.z, -r1.z
    mov_pp oC0.w, c1.x
    mov_pp oC1, c1.y
    mad_pp oC2, v1.xyzx, c1.zzzy, c1.zzzx
    mov_pp oC3.w, c1.x

// approximately 11 instruction slots used (1 texture, 10 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 33 math, 4 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyzw
      dcl_output o5.xyz
      dcl_temps 4
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb2[3].xyzw
   4: mad o3.xyz, cb2[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb3[18].xyzw
   6: mad r0.xyzw, cb3[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb3[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb3[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: dp3 r0.x, v2.xyzx, cb2[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb2[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb2[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul r0.xyz, r0.wwww, r0.xyzx
  16: mov o2.xyz, r0.xyzx
  17: mov o4.xyzw, l(0,0,0,0)
  18: mul r1.x, r0.y, r0.y
  19: mad r1.x, r0.x, r0.x, -r1.x
  20: mul r2.xyzw, r0.yzzx, r0.xyzz
  21: dp4 r3.x, cb1[41].xyzw, r2.xyzw
  22: dp4 r3.y, cb1[42].xyzw, r2.xyzw
  23: dp4 r3.z, cb1[43].xyzw, r2.xyzw
  24: mad r1.xyz, cb1[44].xyzx, r1.xxxx, r3.xyzx
  25: mov r0.w, l(1.000000)
  26: dp4 r2.x, cb1[38].xyzw, r0.xyzw
  27: dp4 r2.y, cb1[39].xyzw, r0.xyzw
  28: dp4 r2.z, cb1[40].xyzw, r0.xyzw
  29: add r0.xyz, r1.xyzx, r2.xyzx
  30: max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  31: log r0.xyz, r0.xyzx
  32: mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  33: exp r0.xyz, r0.xyzx
  34: mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  35: max o5.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  36: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 4 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _Color at 64
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float       
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v5.xyz
      dcl_output o0.xyzw
      dcl_output o1.xyzw
      dcl_output o2.xyzw
      dcl_output o3.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, cb0[4].xyzx
   2: mov o0.xyz, r0.xyzx
   3: mul r0.xyz, r0.xyzx, v5.xyzx
   4: exp o3.xyz, -r0.xyzx
   5: mov o0.w, l(1.000000)
   6: mov o1.xyzw, l(0,0,0,0)
   7: mad o2.xyz, v2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
   8: mov o2.w, l(1.000000)
   9: mov o3.w, l(1.000000)
  10: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 13 math, 1 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = worldNormal_1;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec4 outEmission_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  tmpvar_3 = tmpvar_4.xyz;
  mediump vec4 emission_5;
  mediump vec3 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_6 = tmpvar_3;
  tmpvar_7 = tmpvar_2;
  mediump vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_6;
  tmpvar_8.w = 1.0;
  mediump vec4 tmpvar_9;
  tmpvar_9.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_9.w = 0.0;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = ((tmpvar_7 * 0.5) + 0.5);
  lowp vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = vec3(0.0, 0.0, 0.0);
  emission_5 = tmpvar_11;
  emission_5.xyz = (emission_5.xyz + (tmpvar_4.xyz * xlv_TEXCOORD4));
  outEmission_1.w = emission_5.w;
  outEmission_1.xyz = exp2(-(emission_5.xyz));
  gl_FragData[0] = tmpvar_8;
  gl_FragData[1] = tmpvar_9;
  gl_FragData[2] = tmpvar_10;
  gl_FragData[3] = outEmission_1;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 33 math, 4 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             5         1  ( FLT, FLT, FLT, FLT)
// c2         cb1            38         7  ( FLT, FLT, FLT, FLT)
// c9         cb2             0         7  ( FLT, FLT, FLT, FLT)
// c16        cb3            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          def c20, 1, 0, 0.416666657, 0
          def c21, 1.05499995, -0.0549999997, 0, 0
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c10
   2:     mad r0, c9, v0.x, r0
   3:     mad r0, c11, v0.z, r0
   4:     mad oT2.xyz, c12, v0.w, r0
   5:     add r0, r0, c12
   6:     dp3 r1.x, v2, c13
   7:     dp3 r1.y, v2, c14
   8:     dp3 r1.z, v2, c15
   9:     nrm r2.xyz, r1
  12:     mul r1.x, r2.y, r2.y
  13:     mad r1.x, r2.x, r2.x, -r1.x
  14:     mul r3, r2.yzzx, r2.xyzz
  15:     dp4 r4.x, c5, r3
  16:     dp4 r4.y, c6, r3
  17:     dp4 r4.z, c7, r3
  18:     mad r1.xyz, c8, r1.x, r4
  19:     mov r2.w, c20.x
  20:     dp4 r3.x, c2, r2
  21:     dp4 r3.y, c3, r2
  22:     dp4 r3.z, c4, r2
  23:     mov oT1.xyz, r2
  24:     add r1.xyz, r1, r3
  25:     max r1.xyz, r1, c20.y
  26:     mov r1.w, c20.z
  27:     lit r2, r1.xxww
  28:     mov r2.x, r2.z
  29:     lit r3, r1.yyww
  30:     lit r1, r1.zzww
  31:     mov r2.z, r1.z
  32:     mov r2.y, r3.z
  33:     mad r1.xyz, r2, c21.x, c21.y
  34:     max oT4.xyz, r1, c20.y
  35:     mul r1, r0.y, c17
  36:     mad r1, c16, r0.x, r1
  37:     mad r1, c18, r0.z, r1
  38:     mad r0, c19, r0.w, r1
  39:     mad oPos.xy, r0.w, c0, r0
  40:     mov oPos.zw, r0
  41:     mov oT3, c20.y

// approximately 42 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyzw
      dcl_output o5.xyz
      dcl_temps 4
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb2[3].xyzw
   4: mad o3.xyz, cb2[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb3[18].xyzw
   6: mad r0.xyzw, cb3[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb3[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb3[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: dp3 r0.x, v2.xyzx, cb2[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb2[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb2[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul r0.xyz, r0.wwww, r0.xyzx
  16: mov o2.xyz, r0.xyzx
  17: mov o4.xyzw, l(0,0,0,0)
  18: mul r1.x, r0.y, r0.y
  19: mad r1.x, r0.x, r0.x, -r1.x
  20: mul r2.xyzw, r0.yzzx, r0.xyzz
  21: dp4 r3.x, cb1[41].xyzw, r2.xyzw
  22: dp4 r3.y, cb1[42].xyzw, r2.xyzw
  23: dp4 r3.z, cb1[43].xyzw, r2.xyzw
  24: mad r1.xyz, cb1[44].xyzx, r1.xxxx, r3.xyzx
  25: mov r0.w, l(1.000000)
  26: dp4 r2.x, cb1[38].xyzw, r0.xyzw
  27: dp4 r2.y, cb1[39].xyzw, r0.xyzw
  28: dp4 r2.z, cb1[40].xyzw, r0.xyzw
  29: add r0.xyz, r1.xyzx, r2.xyzx
  30: max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  31: log r0.xyz, r0.xyzx
  32: mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  33: exp r0.xyz, r0.xyzx
  34: mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  35: max o5.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  36: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 4 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _Color at 64
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float       
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             4         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c1, 1, 0, 0.5, 0
          dcl t0.xy
          dcl_pp t1.xyz
          dcl_pp t4.xyz
          dcl_2d s0
   0:     mov_pp r0.w, c1.x
   1:     texld r1, t0, s0
   1:     mul_pp r0.xyz, r1, c0
   2:     mov_pp oC0, r0
   3:     mul_pp r0.xyz, r0, t4
   4:     mov_pp r1, c1.y
   5:     mov_pp oC1, r1
   6:     mad_pp r1, t1.xyzx, c1.zzzy, c1.zzzx
   7:     mov_pp oC2, r1
   8:     exp_pp r1.x, -r0.x
   9:     exp_pp r1.y, -r0.y
  10:     exp_pp r1.z, -r0.z
  11:     mov_pp r1.w, c1.x
  12:     mov_pp oC3, r1

// approximately 14 instruction slots used (1 texture, 13 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v5.xyz
      dcl_output o0.xyzw
      dcl_output o1.xyzw
      dcl_output o2.xyzw
      dcl_output o3.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, cb0[4].xyzx
   2: mov o0.xyz, r0.xyzx
   3: mul r0.xyz, r0.xyzx, v5.xyzx
   4: exp o3.xyz, -r0.xyzx
   5: mov o0.w, l(1.000000)
   6: mov o1.xyzw, l(0,0,0,0)
   7: mad o2.xyz, v2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
   8: mov o2.w, l(1.000000)
   9: mov o3.w, l(1.000000)
  10: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
mediump vec3 u_xlat16_1;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * vs_TEXCOORD4.xyz;
    SV_Target3.xyz = exp2((-u_xlat16_1.xyz));
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = u_xlat16_0.xyz;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (320 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 112
  Matrix4x4 unity_WorldToObject at 176
  Matrix4x4 unity_MatrixVP at 240
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_SHBr at 48
  Vector4 unity_SHBg at 64
  Vector4 unity_SHBb at 80
  Vector4 unity_SHC at 96
  Vector4 _MainTex_ST at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = fma(u_xlat0.x, u_xlat0.x, (-u_xlat1.x));
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(Globals.unity_SHBb, u_xlat2);
    u_xlat1.xyz = fma(Globals.unity_SHC.xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(Globals.unity_SHAr, u_xlat0);
    u_xlat2.y = dot(Globals.unity_SHAg, u_xlat0);
    u_xlat2.z = dot(Globals.unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "Globals" (16 bytes) on slot 0 {
  Vector4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
    float4 SV_Target1 [[ color(1) ]];
    float4 SV_Target2 [[ color(2) ]];
    float4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * Globals._Color.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * input.TEXCOORD4.xyz;
    output.SV_Target3.xyz = exp2((-u_xlat0.xyz));
    output.SV_Target0.w = 1.0;
    output.SV_Target1 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_Target2.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec3 u_xlat0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    SV_Target3.xyz = exp2((-u_xlat0.xyz));
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals659834464" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "VGlobals659834464" (320 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 240
  Matrix4x4 unity_ObjectToWorld at 112
  Matrix4x4 unity_WorldToObject at 176
  Vector4 _MainTex_ST at 304
  Vector4 unity_SHAb at 32
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAr at 0
  Vector4 unity_SHBb at 80
  Vector4 unity_SHBg at 64
  Vector4 unity_SHBr at 48
  Vector4 unity_SHC at 96
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 272

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 53 87 99 100 113 151 154 263
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 RelaxedPrecision
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 RelaxedPrecision
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 RelaxedPrecision
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 RelaxedPrecision
                              MemberDecorate 19 3 Offset 48
                              MemberDecorate 19 4 RelaxedPrecision
                              MemberDecorate 19 4 Offset 64
                              MemberDecorate 19 5 RelaxedPrecision
                              MemberDecorate 19 5 Offset 80
                              MemberDecorate 19 6 RelaxedPrecision
                              MemberDecorate 19 6 Offset 96
                              MemberDecorate 19 7 Offset 112
                              MemberDecorate 19 8 Offset 176
                              MemberDecorate 19 9 Offset 240
                              MemberDecorate 19 10 Offset 304
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 53 Location 3
                              MemberDecorate 85 0 BuiltIn Position
                              MemberDecorate 85 1 BuiltIn PointSize
                              MemberDecorate 85 2 BuiltIn ClipDistance
                              Decorate 85 Block
                              Decorate 99 Location 0
                              Decorate 100 Location 2
                              Decorate 113 Location 1
                              Decorate 151 RelaxedPrecision
                              Decorate 151 Location 1
                              Decorate 154 Location 4
                              Decorate 158 RelaxedPrecision
                              Decorate 171 RelaxedPrecision
                              Decorate 172 RelaxedPrecision
                              Decorate 175 RelaxedPrecision
                              Decorate 181 RelaxedPrecision
                              Decorate 183 RelaxedPrecision
                              Decorate 184 RelaxedPrecision
                              Decorate 185 RelaxedPrecision
                              Decorate 189 RelaxedPrecision
                              Decorate 190 RelaxedPrecision
                              Decorate 191 RelaxedPrecision
                              Decorate 195 RelaxedPrecision
                              Decorate 196 RelaxedPrecision
                              Decorate 197 RelaxedPrecision
                              Decorate 201 RelaxedPrecision
                              Decorate 202 RelaxedPrecision
                              Decorate 203 RelaxedPrecision
                              Decorate 204 RelaxedPrecision
                              Decorate 205 RelaxedPrecision
                              Decorate 206 RelaxedPrecision
                              Decorate 207 RelaxedPrecision
                              Decorate 212 RelaxedPrecision
                              Decorate 217 RelaxedPrecision
                              Decorate 222 RelaxedPrecision
                              Decorate 226 RelaxedPrecision
                              Decorate 227 RelaxedPrecision
                              Decorate 228 RelaxedPrecision
                              Decorate 229 RelaxedPrecision
                              Decorate 231 RelaxedPrecision
                              Decorate 232 RelaxedPrecision
                              Decorate 233 RelaxedPrecision
                              Decorate 263 RelaxedPrecision
                              Decorate 263 Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 7
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              29:     22(int) Constant 0
              37:     22(int) Constant 2
              45:      8(ptr) Variable Private
              47:     22(int) Constant 3
              51:             TypeVector 6(float) 3
              52:             TypePointer Output 51(fvec3)
              53:     52(ptr) Variable Output
              65:     22(int) Constant 9
              83:     14(int) Constant 1
              84:             TypeArray 6(float) 83
              85:             TypeStruct 7(fvec4) 6(float) 84
              86:             TypePointer Output 85(struct)
              87:     86(ptr) Variable Output
              95:             TypePointer Output 7(fvec4)
              97:             TypeVector 6(float) 2
              98:             TypePointer Output 97(fvec2)
              99:     98(ptr) Variable Output
             100:     10(ptr) Variable Input
             103:     22(int) Constant 10
             112:             TypePointer Input 51(fvec3)
             113:    112(ptr) Variable Input
             115:     22(int) Constant 8
             120:     14(int) Constant 0
             121:             TypePointer Private 6(float)
             134:     14(int) Constant 2
             136:    121(ptr) Variable Private
             151:     52(ptr) Variable Output
             154:     95(ptr) Variable Output
             155:    6(float) Constant 0
             156:    7(fvec4) ConstantComposite 155 155 155 155
             157:             TypePointer Private 51(fvec3)
             158:    157(ptr) Variable Private
             175:      8(ptr) Variable Private
             181:    157(ptr) Variable Private
             187:     22(int) Constant 4
             193:     22(int) Constant 5
             199:     22(int) Constant 6
             208:    6(float) Constant 1065353216
             209:     14(int) Constant 3
             230:   51(fvec3) ConstantComposite 155 155 155
             238:    6(float) Constant 1054168405
             239:   51(fvec3) ConstantComposite 238 238 238
             250:    6(float) Constant 1065814589
             251:   51(fvec3) ConstantComposite 250 250 250
             253:    6(float) Constant 3177269166
             254:   51(fvec3) ConstantComposite 253 253 253
             263:     52(ptr) Variable Output
             266:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              30:     25(ptr) AccessChain 21 23 29
              31:    7(fvec4) Load 30
              32:    7(fvec4) Load 11
              33:    7(fvec4) VectorShuffle 32 32 0 0 0 0
              34:    7(fvec4) FMul 31 33
              35:    7(fvec4) Load 9
              36:    7(fvec4) FAdd 34 35
                              Store 9 36
              38:     25(ptr) AccessChain 21 23 37
              39:    7(fvec4) Load 38
              40:    7(fvec4) Load 11
              41:    7(fvec4) VectorShuffle 40 40 2 2 2 2
              42:    7(fvec4) FMul 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) FAdd 42 43
                              Store 9 44
              46:    7(fvec4) Load 9
              48:     25(ptr) AccessChain 21 23 47
              49:    7(fvec4) Load 48
              50:    7(fvec4) FAdd 46 49
                              Store 45 50
              54:     25(ptr) AccessChain 21 23 47
              55:    7(fvec4) Load 54
              56:   51(fvec3) VectorShuffle 55 55 0 1 2
              57:    7(fvec4) Load 11
              58:   51(fvec3) VectorShuffle 57 57 3 3 3
              59:   51(fvec3) FMul 56 58
              60:    7(fvec4) Load 9
              61:   51(fvec3) VectorShuffle 60 60 0 1 2
              62:   51(fvec3) FAdd 59 61
                              Store 53 62
              63:    7(fvec4) Load 45
              64:    7(fvec4) VectorShuffle 63 63 1 1 1 1
              66:     25(ptr) AccessChain 21 65 24
              67:    7(fvec4) Load 66
              68:    7(fvec4) FMul 64 67
                              Store 9 68
              69:     25(ptr) AccessChain 21 65 29
              70:    7(fvec4) Load 69
              71:    7(fvec4) Load 45
              72:    7(fvec4) VectorShuffle 71 71 0 0 0 0
              73:    7(fvec4) FMul 70 72
              74:    7(fvec4) Load 9
              75:    7(fvec4) FAdd 73 74
                              Store 9 75
              76:     25(ptr) AccessChain 21 65 37
              77:    7(fvec4) Load 76
              78:    7(fvec4) Load 45
              79:    7(fvec4) VectorShuffle 78 78 2 2 2 2
              80:    7(fvec4) FMul 77 79
              81:    7(fvec4) Load 9
              82:    7(fvec4) FAdd 80 81
                              Store 9 82
              88:     25(ptr) AccessChain 21 65 47
              89:    7(fvec4) Load 88
              90:    7(fvec4) Load 45
              91:    7(fvec4) VectorShuffle 90 90 3 3 3 3
              92:    7(fvec4) FMul 89 91
              93:    7(fvec4) Load 9
              94:    7(fvec4) FAdd 92 93
              96:     95(ptr) AccessChain 87 29
                              Store 96 94
             101:    7(fvec4) Load 100
             102:   97(fvec2) VectorShuffle 101 101 0 1
             104:     25(ptr) AccessChain 21 103
             105:    7(fvec4) Load 104
             106:   97(fvec2) VectorShuffle 105 105 0 1
             107:   97(fvec2) FMul 102 106
             108:     25(ptr) AccessChain 21 103
             109:    7(fvec4) Load 108
             110:   97(fvec2) VectorShuffle 109 109 2 3
             111:   97(fvec2) FAdd 107 110
                              Store 99 111
             114:   51(fvec3) Load 113
             116:     25(ptr) AccessChain 21 115 29
             117:    7(fvec4) Load 116
             118:   51(fvec3) VectorShuffle 117 117 0 1 2
             119:    6(float) Dot 114 118
             122:    121(ptr) AccessChain 9 120
                              Store 122 119
             123:   51(fvec3) Load 113
             124:     25(ptr) AccessChain 21 115 24
             125:    7(fvec4) Load 124
             126:   51(fvec3) VectorShuffle 125 125 0 1 2
             127:    6(float) Dot 123 126
             128:    121(ptr) AccessChain 9 83
                              Store 128 127
             129:   51(fvec3) Load 113
             130:     25(ptr) AccessChain 21 115 37
             131:    7(fvec4) Load 130
             132:   51(fvec3) VectorShuffle 131 131 0 1 2
             133:    6(float) Dot 129 132
             135:    121(ptr) AccessChain 9 134
                              Store 135 133
             137:    7(fvec4) Load 9
             138:   51(fvec3) VectorShuffle 137 137 0 1 2
             139:    7(fvec4) Load 9
             140:   51(fvec3) VectorShuffle 139 139 0 1 2
             141:    6(float) Dot 138 140
                              Store 136 141
             142:    6(float) Load 136
             143:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 142
                              Store 136 143
             144:    6(float) Load 136
             145:   51(fvec3) CompositeConstruct 144 144 144
             146:    7(fvec4) Load 9
             147:   51(fvec3) VectorShuffle 146 146 0 1 2
             148:   51(fvec3) FMul 145 147
             149:    7(fvec4) Load 9
             150:    7(fvec4) VectorShuffle 149 148 4 5 6 3
                              Store 9 150
             152:    7(fvec4) Load 9
             153:   51(fvec3) VectorShuffle 152 152 0 1 2
                              Store 151 153
                              Store 154 156
             159:    121(ptr) AccessChain 9 83
             160:    6(float) Load 159
             161:    121(ptr) AccessChain 9 83
             162:    6(float) Load 161
             163:    6(float) FMul 160 162
             164:    121(ptr) AccessChain 158 120
                              Store 164 163
             165:    121(ptr) AccessChain 9 120
             166:    6(float) Load 165
             167:    121(ptr) AccessChain 9 120
             168:    6(float) Load 167
             169:    6(float) FMul 166 168
             170:    121(ptr) AccessChain 158 120
             171:    6(float) Load 170
             172:    6(float) FNegate 171
             173:    6(float) FAdd 169 172
             174:    121(ptr) AccessChain 158 120
                              Store 174 173
             176:    7(fvec4) Load 9
             177:    7(fvec4) VectorShuffle 176 176 1 2 2 0
             178:    7(fvec4) Load 9
             179:    7(fvec4) VectorShuffle 178 178 0 1 2 2
             180:    7(fvec4) FMul 177 179
                              Store 175 180
             182:     25(ptr) AccessChain 21 47
             183:    7(fvec4) Load 182
             184:    7(fvec4) Load 175
             185:    6(float) Dot 183 184
             186:    121(ptr) AccessChain 181 120
                              Store 186 185
             188:     25(ptr) AccessChain 21 187
             189:    7(fvec4) Load 188
             190:    7(fvec4) Load 175
             191:    6(float) Dot 189 190
             192:    121(ptr) AccessChain 181 83
                              Store 192 191
             194:     25(ptr) AccessChain 21 193
             195:    7(fvec4) Load 194
             196:    7(fvec4) Load 175
             197:    6(float) Dot 195 196
             198:    121(ptr) AccessChain 181 134
                              Store 198 197
             200:     25(ptr) AccessChain 21 199
             201:    7(fvec4) Load 200
             202:   51(fvec3) VectorShuffle 201 201 0 1 2
             203:   51(fvec3) Load 158
             204:   51(fvec3) VectorShuffle 203 203 0 0 0
             205:   51(fvec3) FMul 202 204
             206:   51(fvec3) Load 181
             207:   51(fvec3) FAdd 205 206
                              Store 158 207
             210:    121(ptr) AccessChain 9 209
                              Store 210 208
             211:     25(ptr) AccessChain 21 29
             212:    7(fvec4) Load 211
             213:    7(fvec4) Load 9
             214:    6(float) Dot 212 213
             215:    121(ptr) AccessChain 181 120
                              Store 215 214
             216:     25(ptr) AccessChain 21 24
             217:    7(fvec4) Load 216
             218:    7(fvec4) Load 9
             219:    6(float) Dot 217 218
             220:    121(ptr) AccessChain 181 83
                              Store 220 219
             221:     25(ptr) AccessChain 21 37
             222:    7(fvec4) Load 221
             223:    7(fvec4) Load 9
             224:    6(float) Dot 222 223
             225:    121(ptr) AccessChain 181 134
                              Store 225 224
             226:   51(fvec3) Load 158
             227:   51(fvec3) Load 181
             228:   51(fvec3) FAdd 226 227
                              Store 158 228
             229:   51(fvec3) Load 158
             231:   51(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 229 230
                              Store 158 231
             232:   51(fvec3) Load 158
             233:   51(fvec3) ExtInst 1(GLSL.std.450) 30(Log2) 232
             234:    7(fvec4) Load 9
             235:    7(fvec4) VectorShuffle 234 233 4 5 6 3
                              Store 9 235
             236:    7(fvec4) Load 9
             237:   51(fvec3) VectorShuffle 236 236 0 1 2
             240:   51(fvec3) FMul 237 239
             241:    7(fvec4) Load 9
             242:    7(fvec4) VectorShuffle 241 240 4 5 6 3
                              Store 9 242
             243:    7(fvec4) Load 9
             244:   51(fvec3) VectorShuffle 243 243 0 1 2
             245:   51(fvec3) ExtInst 1(GLSL.std.450) 29(Exp2) 244
             246:    7(fvec4) Load 9
             247:    7(fvec4) VectorShuffle 246 245 4 5 6 3
                              Store 9 247
             248:    7(fvec4) Load 9
             249:   51(fvec3) VectorShuffle 248 248 0 1 2
             252:   51(fvec3) FMul 249 251
             255:   51(fvec3) FAdd 252 254
             256:    7(fvec4) Load 9
             257:    7(fvec4) VectorShuffle 256 255 4 5 6 3
                              Store 9 257
             258:    7(fvec4) Load 9
             259:   51(fvec3) VectorShuffle 258 258 0 1 2
             260:   51(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 259 230
             261:    7(fvec4) Load 9
             262:    7(fvec4) VectorShuffle 261 260 4 5 6 3
                              Store 9 262
             264:    7(fvec4) Load 9
             265:   51(fvec3) VectorShuffle 264 264 0 1 2
                              Store 263 265
             267:    266(ptr) AccessChain 87 29 83
             268:    6(float) Load 267
             269:    6(float) FNegate 268
             270:    266(ptr) AccessChain 87 29 83
                              Store 270 269
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 72

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 35 42 45 56 59 65
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 0
                              Decorate 21 RelaxedPrecision
                              Decorate 22 RelaxedPrecision
                              Decorate 23 RelaxedPrecision
                              MemberDecorate 24 0 RelaxedPrecision
                              MemberDecorate 24 0 Offset 0
                              Decorate 24 Block
                              Decorate 26 DescriptorSet 1
                              Decorate 26 Binding 0
                              Decorate 31 RelaxedPrecision
                              Decorate 32 RelaxedPrecision
                              Decorate 33 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 35 Location 0
                              Decorate 36 RelaxedPrecision
                              Decorate 39 RelaxedPrecision
                              Decorate 40 RelaxedPrecision
                              Decorate 42 RelaxedPrecision
                              Decorate 42 Location 2
                              Decorate 43 RelaxedPrecision
                              Decorate 44 RelaxedPrecision
                              Decorate 45 RelaxedPrecision
                              Decorate 45 Location 3
                              Decorate 46 RelaxedPrecision
                              Decorate 47 RelaxedPrecision
                              Decorate 48 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 56 Location 1
                              Decorate 59 RelaxedPrecision
                              Decorate 59 Location 1
                              Decorate 60 RelaxedPrecision
                              Decorate 63 RelaxedPrecision
                              Decorate 64 RelaxedPrecision
                              Decorate 65 RelaxedPrecision
                              Decorate 65 Location 2
                              Decorate 66 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              19:             TypeVector 6(float) 4
              22:      8(ptr) Variable Private
              24:             TypeStruct 19(fvec4)
              25:             TypePointer Uniform 24(struct)
              26:     25(ptr) Variable Uniform
              27:             TypeInt 32 1
              28:     27(int) Constant 0
              29:             TypePointer Uniform 19(fvec4)
              34:             TypePointer Output 19(fvec4)
              35:     34(ptr) Variable Output
              39:      8(ptr) Variable Private
              41:             TypePointer Input 7(fvec3)
              42:     41(ptr) Variable Input
              45:     34(ptr) Variable Output
              51:    6(float) Constant 1065353216
              52:             TypeInt 32 0
              53:     52(int) Constant 3
              54:             TypePointer Output 6(float)
              56:     34(ptr) Variable Output
              57:    6(float) Constant 0
              58:   19(fvec4) ConstantComposite 57 57 57 57
              59:     41(ptr) Variable Input
              61:    6(float) Constant 1056964608
              62:    7(fvec3) ConstantComposite 61 61 61
              65:     34(ptr) Variable Output
               4:           2 Function None 3
               5:             Label
              14:          11 Load 13
              18:   15(fvec2) Load 17
              20:   19(fvec4) ImageSampleImplicitLod 14 18
              21:    7(fvec3) VectorShuffle 20 20 0 1 2
                              Store 9 21
              23:    7(fvec3) Load 9
              30:     29(ptr) AccessChain 26 28
              31:   19(fvec4) Load 30
              32:    7(fvec3) VectorShuffle 31 31 0 1 2
              33:    7(fvec3) FMul 23 32
                              Store 22 33
              36:    7(fvec3) Load 22
              37:   19(fvec4) Load 35
              38:   19(fvec4) VectorShuffle 37 36 4 5 6 3
                              Store 35 38
              40:    7(fvec3) Load 22
              43:    7(fvec3) Load 42
              44:    7(fvec3) FMul 40 43
                              Store 39 44
              46:    7(fvec3) Load 39
              47:    7(fvec3) FNegate 46
              48:    7(fvec3) ExtInst 1(GLSL.std.450) 29(Exp2) 47
              49:   19(fvec4) Load 45
              50:   19(fvec4) VectorShuffle 49 48 4 5 6 3
                              Store 45 50
              55:     54(ptr) AccessChain 35 53
                              Store 55 51
                              Store 56 58
              60:    7(fvec3) Load 59
              63:    7(fvec3) FMul 60 62
              64:    7(fvec3) FAdd 63 62
                              Store 22 64
              66:    7(fvec3) Load 22
              67:   19(fvec4) Load 65
              68:   19(fvec4) VectorShuffle 67 66 4 5 6 3
                              Store 65 68
              69:     54(ptr) AccessChain 65 53
                              Store 69 51
              70:     54(ptr) AccessChain 45 53
                              Store 70 51
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Keywords set in this variant: UNITY_HDR_ON 
-- Vertex shader for "d3d9":
// Stats: 43 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 18
Vector4 unity_SHAb at 13
Vector4 unity_SHAg at 12
Vector4 unity_SHAr at 11
Vector4 unity_SHBb at 16
Vector4 unity_SHBg at 15
Vector4 unity_SHBr at 14
Vector4 unity_SHC at 17

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   float4 unity_SHAb;
//   float4 unity_SHAg;
//   float4 unity_SHAr;
//   float4 unity_SHBb;
//   float4 unity_SHBg;
//   float4 unity_SHBr;
//   float4 unity_SHC;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   unity_SHAr          c11      1
//   unity_SHAg          c12      1
//   unity_SHAb          c13      1
//   unity_SHBr          c14      1
//   unity_SHBg          c15      1
//   unity_SHBb          c16      1
//   unity_SHC           c17      1
//   _MainTex_ST         c18      1
//

    vs_3_0
    def c19, 1.05499995, -0.0549999997, 0, 0
    def c20, 1, 0, 0.416666657, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4
    dcl_texcoord4 o5.xyz
    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r4.x, c4, r1
    dp4 r4.y, c5, r1
    dp4 r4.z, c6, r1
    dp4 r4.w, c7, r1
    mad o1.xy, v2, c18, c18.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    nrm r1.xyz, r0
    mul r0.x, r1.y, r1.y
    mad r0.x, r1.x, r1.x, -r0.x
    mul r2, r1.yzzx, r1.xyzz
    dp4 r3.x, c14, r2
    dp4 r3.y, c15, r2
    dp4 r3.z, c16, r2
    mad r0.xyz, c17, r0.x, r3
    mov r1.w, c20.x
    dp4 r2.x, c11, r1
    dp4 r2.y, c12, r1
    dp4 r2.z, c13, r1
    mov o2.xyz, r1
    add r0.xyz, r0, r2
    max r0.xyz, r0, c20.y
    log r1.x, r0.x
    log r1.y, r0.y
    log r1.z, r0.z
    mul r0.xyz, r1, c20.z
    exp r1.x, r0.x
    exp r1.y, r0.y
    exp r1.z, r0.z
    mad r0.xyz, r1, c19.x, c19.y
    max o5.xyz, r0, c20.y
    mov o4, c20.y
    mad o0.xy, r4.w, c255, r4
    mov o0.zw, r4

// approximately 45 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 7 math, 1 textures
Vector4 _Color at 0

Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   sampler2D _MainTex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   _Color       c0       1
//   _MainTex     s0       1
//

    ps_3_0
    def c1, 1, 0, 0.5, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_texcoord4_pp v2.xyz
    dcl_2d s0
    texld r0, v0, s0
    mul_pp r0.xyz, r0, c0
    mul_pp oC3.xyz, r0, v2
    mov_pp oC0.xyz, r0
    mov_pp oC0.w, c1.x
    mov_pp oC1, c1.y
    mad_pp oC2, v1.xyzx, c1.zzzy, c1.zzzx
    mov_pp oC3.w, c1.x

// approximately 8 instruction slots used (1 texture, 7 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 33 math, 4 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyzw
      dcl_output o5.xyz
      dcl_temps 4
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb2[3].xyzw
   4: mad o3.xyz, cb2[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb3[18].xyzw
   6: mad r0.xyzw, cb3[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb3[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb3[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: dp3 r0.x, v2.xyzx, cb2[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb2[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb2[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul r0.xyz, r0.wwww, r0.xyzx
  16: mov o2.xyz, r0.xyzx
  17: mov o4.xyzw, l(0,0,0,0)
  18: mul r1.x, r0.y, r0.y
  19: mad r1.x, r0.x, r0.x, -r1.x
  20: mul r2.xyzw, r0.yzzx, r0.xyzz
  21: dp4 r3.x, cb1[41].xyzw, r2.xyzw
  22: dp4 r3.y, cb1[42].xyzw, r2.xyzw
  23: dp4 r3.z, cb1[43].xyzw, r2.xyzw
  24: mad r1.xyz, cb1[44].xyzx, r1.xxxx, r3.xyzx
  25: mov r0.w, l(1.000000)
  26: dp4 r2.x, cb1[38].xyzw, r0.xyzw
  27: dp4 r2.y, cb1[39].xyzw, r0.xyzw
  28: dp4 r2.z, cb1[40].xyzw, r0.xyzw
  29: add r0.xyz, r1.xyzx, r2.xyzx
  30: max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  31: log r0.xyz, r0.xyzx
  32: mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  33: exp r0.xyz, r0.xyzx
  34: mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  35: max o5.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  36: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 3 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _Color at 64
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float       
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v5.xyz
      dcl_output o0.xyzw
      dcl_output o1.xyzw
      dcl_output o2.xyzw
      dcl_output o3.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, cb0[4].xyzx
   2: mov o0.xyz, r0.xyzx
   3: mul o3.xyz, r0.xyzx, v5.xyzx
   4: mov o0.w, l(1.000000)
   5: mov o1.xyzw, l(0,0,0,0)
   6: mad o2.xyz, v2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
   7: mov o2.w, l(1.000000)
   8: mov o3.w, l(1.000000)
   9: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 11 math, 1 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_5;
  tmpvar_5[0] = unity_WorldToObject[0].xyz;
  tmpvar_5[1] = unity_WorldToObject[1].xyz;
  tmpvar_5[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_glesNormal * tmpvar_5));
  worldNormal_1 = tmpvar_6;
  tmpvar_2 = worldNormal_1;
  tmpvar_3.zw = vec2(0.0, 0.0);
  tmpvar_3.xy = vec2(0.0, 0.0);
  mediump vec3 normal_7;
  normal_7 = worldNormal_1;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normal_7;
  mediump vec3 res_9;
  mediump vec3 x_10;
  x_10.x = dot (unity_SHAr, tmpvar_8);
  x_10.y = dot (unity_SHAg, tmpvar_8);
  x_10.z = dot (unity_SHAb, tmpvar_8);
  mediump vec3 x1_11;
  mediump vec4 tmpvar_12;
  tmpvar_12 = (normal_7.xyzz * normal_7.yzzx);
  x1_11.x = dot (unity_SHBr, tmpvar_12);
  x1_11.y = dot (unity_SHBg, tmpvar_12);
  x1_11.z = dot (unity_SHBb, tmpvar_12);
  res_9 = (x_10 + (x1_11 + (unity_SHC.xyz * 
    ((normal_7.x * normal_7.x) - (normal_7.y * normal_7.y))
  )));
  mediump vec3 tmpvar_13;
  tmpvar_13 = max (((1.055 * 
    pow (max (res_9, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_9 = tmpvar_13;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = tmpvar_3;
  xlv_TEXCOORD4 = max (vec3(0.0, 0.0, 0.0), tmpvar_13);
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_draw_buffers : enable
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec3 tmpvar_1;
  tmpvar_1 = xlv_TEXCOORD1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  tmpvar_2 = tmpvar_3.xyz;
  mediump vec4 emission_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_5 = tmpvar_2;
  tmpvar_6 = tmpvar_1;
  mediump vec4 tmpvar_7;
  tmpvar_7.xyz = tmpvar_5;
  tmpvar_7.w = 1.0;
  mediump vec4 tmpvar_8;
  tmpvar_8.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_8.w = 0.0;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = ((tmpvar_6 * 0.5) + 0.5);
  lowp vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = vec3(0.0, 0.0, 0.0);
  emission_4 = tmpvar_10;
  emission_4.xyz = (emission_4.xyz + (tmpvar_3.xyz * xlv_TEXCOORD4));
  gl_FragData[0] = tmpvar_7;
  gl_FragData[1] = tmpvar_8;
  gl_FragData[2] = tmpvar_9;
  gl_FragData[3] = emission_4;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 33 math, 4 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             5         1  ( FLT, FLT, FLT, FLT)
// c2         cb1            38         7  ( FLT, FLT, FLT, FLT)
// c9         cb2             0         7  ( FLT, FLT, FLT, FLT)
// c16        cb3            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          def c20, 1, 0, 0.416666657, 0
          def c21, 1.05499995, -0.0549999997, 0, 0
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c10
   2:     mad r0, c9, v0.x, r0
   3:     mad r0, c11, v0.z, r0
   4:     mad oT2.xyz, c12, v0.w, r0
   5:     add r0, r0, c12
   6:     dp3 r1.x, v2, c13
   7:     dp3 r1.y, v2, c14
   8:     dp3 r1.z, v2, c15
   9:     nrm r2.xyz, r1
  12:     mul r1.x, r2.y, r2.y
  13:     mad r1.x, r2.x, r2.x, -r1.x
  14:     mul r3, r2.yzzx, r2.xyzz
  15:     dp4 r4.x, c5, r3
  16:     dp4 r4.y, c6, r3
  17:     dp4 r4.z, c7, r3
  18:     mad r1.xyz, c8, r1.x, r4
  19:     mov r2.w, c20.x
  20:     dp4 r3.x, c2, r2
  21:     dp4 r3.y, c3, r2
  22:     dp4 r3.z, c4, r2
  23:     mov oT1.xyz, r2
  24:     add r1.xyz, r1, r3
  25:     max r1.xyz, r1, c20.y
  26:     mov r1.w, c20.z
  27:     lit r2, r1.xxww
  28:     mov r2.x, r2.z
  29:     lit r3, r1.yyww
  30:     lit r1, r1.zzww
  31:     mov r2.z, r1.z
  32:     mov r2.y, r3.z
  33:     mad r1.xyz, r2, c21.x, c21.y
  34:     max oT4.xyz, r1, c20.y
  35:     mul r1, r0.y, c17
  36:     mad r1, c16, r0.x, r1
  37:     mad r1, c18, r0.z, r1
  38:     mad r0, c19, r0.w, r1
  39:     mad oPos.xy, r0.w, c0, r0
  40:     mov oPos.zw, r0
  41:     mov oT3, c20.y

// approximately 42 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyzw
      dcl_output o5.xyz
      dcl_temps 4
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb2[3].xyzw
   4: mad o3.xyz, cb2[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb3[18].xyzw
   6: mad r0.xyzw, cb3[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb3[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb3[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: dp3 r0.x, v2.xyzx, cb2[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb2[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb2[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul r0.xyz, r0.wwww, r0.xyzx
  16: mov o2.xyz, r0.xyzx
  17: mov o4.xyzw, l(0,0,0,0)
  18: mul r1.x, r0.y, r0.y
  19: mad r1.x, r0.x, r0.x, -r1.x
  20: mul r2.xyzw, r0.yzzx, r0.xyzz
  21: dp4 r3.x, cb1[41].xyzw, r2.xyzw
  22: dp4 r3.y, cb1[42].xyzw, r2.xyzw
  23: dp4 r3.z, cb1[43].xyzw, r2.xyzw
  24: mad r1.xyz, cb1[44].xyzx, r1.xxxx, r3.xyzx
  25: mov r0.w, l(1.000000)
  26: dp4 r2.x, cb1[38].xyzw, r0.xyzw
  27: dp4 r2.y, cb1[39].xyzw, r0.xyzw
  28: dp4 r2.z, cb1[40].xyzw, r0.xyzw
  29: add r0.xyz, r1.xyzx, r2.xyzx
  30: max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  31: log r0.xyz, r0.xyzx
  32: mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  33: exp r0.xyz, r0.xyzx
  34: mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  35: max o5.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  36: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 3 math, 1 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (112 bytes) on slot 0 {
  Vector4 _Color at 64
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float       
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             4         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c1, 1, 0, 0.5, 0
          dcl t0.xy
          dcl_pp t1.xyz
          dcl_pp t4.xyz
          dcl_2d s0
   0:     mov_pp r0.w, c1.x
   1:     texld r1, t0, s0
   1:     mul_pp r0.xyz, r1, c0
   2:     mov_pp oC0, r0
   3:     mul_pp r0.xyz, r0, t4
   4:     mov_pp r1, c1.y
   5:     mov_pp oC1, r1
   6:     mad_pp r1, t1.xyzx, c1.zzzy, c1.zzzx
   7:     mov_pp oC2, r1
   8:     mov_pp r0.w, c1.x
   9:     mov_pp oC3, r0

// approximately 11 instruction slots used (1 texture, 10 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v5.xyz
      dcl_output o0.xyzw
      dcl_output o1.xyzw
      dcl_output o2.xyzw
      dcl_output o3.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, cb0[4].xyzx
   2: mov o0.xyz, r0.xyzx
   3: mul o3.xyz, r0.xyzx, v5.xyzx
   4: mov o0.w, l(1.000000)
   5: mov o1.xyzw, l(0,0,0,0)
   6: mad o2.xyz, v2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
   7: mov o2.w, l(1.000000)
   8: mov o3.w, l(1.000000)
   9: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
void main()
{
    u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_0.xyz;
    SV_Target3.xyz = u_xlat16_0.xyz * vs_TEXCOORD4.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.xyz = u_xlat16_0.xyz;
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (320 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 112
  Matrix4x4 unity_WorldToObject at 176
  Matrix4x4 unity_MatrixVP at 240
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_SHBr at 48
  Vector4 unity_SHBg at 64
  Vector4 unity_SHBb at 80
  Vector4 unity_SHC at 96
  Vector4 _MainTex_ST at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.TEXCOORD3 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = fma(u_xlat0.x, u_xlat0.x, (-u_xlat1.x));
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(Globals.unity_SHBb, u_xlat2);
    u_xlat1.xyz = fma(Globals.unity_SHC.xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(Globals.unity_SHAr, u_xlat0);
    u_xlat2.y = dot(Globals.unity_SHAg, u_xlat0);
    u_xlat2.z = dot(Globals.unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD4.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "Globals" (16 bytes) on slot 0 {
  Vector4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
    float4 SV_Target1 [[ color(1) ]];
    float4 SV_Target2 [[ color(2) ]];
    float4 SV_Target3 [[ color(3) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler sampler_MainTex [[ sampler (0) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    u_xlat0.xyz = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy).xyz;
    u_xlat0.xyz = u_xlat0.xyz * Globals._Color.xyz;
    output.SV_Target0.xyz = u_xlat0.xyz;
    output.SV_Target3.xyz = u_xlat0.xyz * input.TEXCOORD4.xyz;
    output.SV_Target0.w = 1.0;
    output.SV_Target1 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_Target2.xyz = fma(input.TEXCOORD1.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.w = 1.0;
    output.SV_Target3.w = 1.0;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD4.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
layout(location = 1) out vec4 SV_Target1;
layout(location = 2) out vec4 SV_Target2;
layout(location = 3) out vec4 SV_Target3;
vec3 u_xlat0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat0.xyz;
    SV_Target3.xyz = u_xlat0.xyz * vs_TEXCOORD4.xyz;
    SV_Target0.w = 1.0;
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2.xyz = vs_TEXCOORD1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target2.w = 1.0;
    SV_Target3.w = 1.0;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals3846602473" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "VGlobals3846602473" (320 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 240
  Matrix4x4 unity_ObjectToWorld at 112
  Matrix4x4 unity_WorldToObject at 176
  Vector4 _MainTex_ST at 304
  Vector4 unity_SHAb at 32
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAr at 0
  Vector4 unity_SHBb at 80
  Vector4 unity_SHBg at 64
  Vector4 unity_SHBr at 48
  Vector4 unity_SHC at 96
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 272

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 53 87 99 100 113 151 154 263
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 RelaxedPrecision
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 RelaxedPrecision
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 RelaxedPrecision
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 RelaxedPrecision
                              MemberDecorate 19 3 Offset 48
                              MemberDecorate 19 4 RelaxedPrecision
                              MemberDecorate 19 4 Offset 64
                              MemberDecorate 19 5 RelaxedPrecision
                              MemberDecorate 19 5 Offset 80
                              MemberDecorate 19 6 RelaxedPrecision
                              MemberDecorate 19 6 Offset 96
                              MemberDecorate 19 7 Offset 112
                              MemberDecorate 19 8 Offset 176
                              MemberDecorate 19 9 Offset 240
                              MemberDecorate 19 10 Offset 304
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 53 Location 3
                              MemberDecorate 85 0 BuiltIn Position
                              MemberDecorate 85 1 BuiltIn PointSize
                              MemberDecorate 85 2 BuiltIn ClipDistance
                              Decorate 85 Block
                              Decorate 99 Location 0
                              Decorate 100 Location 2
                              Decorate 113 Location 1
                              Decorate 151 RelaxedPrecision
                              Decorate 151 Location 1
                              Decorate 154 Location 4
                              Decorate 158 RelaxedPrecision
                              Decorate 171 RelaxedPrecision
                              Decorate 172 RelaxedPrecision
                              Decorate 175 RelaxedPrecision
                              Decorate 181 RelaxedPrecision
                              Decorate 183 RelaxedPrecision
                              Decorate 184 RelaxedPrecision
                              Decorate 185 RelaxedPrecision
                              Decorate 189 RelaxedPrecision
                              Decorate 190 RelaxedPrecision
                              Decorate 191 RelaxedPrecision
                              Decorate 195 RelaxedPrecision
                              Decorate 196 RelaxedPrecision
                              Decorate 197 RelaxedPrecision
                              Decorate 201 RelaxedPrecision
                              Decorate 202 RelaxedPrecision
                              Decorate 203 RelaxedPrecision
                              Decorate 204 RelaxedPrecision
                              Decorate 205 RelaxedPrecision
                              Decorate 206 RelaxedPrecision
                              Decorate 207 RelaxedPrecision
                              Decorate 212 RelaxedPrecision
                              Decorate 217 RelaxedPrecision
                              Decorate 222 RelaxedPrecision
                              Decorate 226 RelaxedPrecision
                              Decorate 227 RelaxedPrecision
                              Decorate 228 RelaxedPrecision
                              Decorate 229 RelaxedPrecision
                              Decorate 231 RelaxedPrecision
                              Decorate 232 RelaxedPrecision
                              Decorate 233 RelaxedPrecision
                              Decorate 263 RelaxedPrecision
                              Decorate 263 Location 2
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 7
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              29:     22(int) Constant 0
              37:     22(int) Constant 2
              45:      8(ptr) Variable Private
              47:     22(int) Constant 3
              51:             TypeVector 6(float) 3
              52:             TypePointer Output 51(fvec3)
              53:     52(ptr) Variable Output
              65:     22(int) Constant 9
              83:     14(int) Constant 1
              84:             TypeArray 6(float) 83
              85:             TypeStruct 7(fvec4) 6(float) 84
              86:             TypePointer Output 85(struct)
              87:     86(ptr) Variable Output
              95:             TypePointer Output 7(fvec4)
              97:             TypeVector 6(float) 2
              98:             TypePointer Output 97(fvec2)
              99:     98(ptr) Variable Output
             100:     10(ptr) Variable Input
             103:     22(int) Constant 10
             112:             TypePointer Input 51(fvec3)
             113:    112(ptr) Variable Input
             115:     22(int) Constant 8
             120:     14(int) Constant 0
             121:             TypePointer Private 6(float)
             134:     14(int) Constant 2
             136:    121(ptr) Variable Private
             151:     52(ptr) Variable Output
             154:     95(ptr) Variable Output
             155:    6(float) Constant 0
             156:    7(fvec4) ConstantComposite 155 155 155 155
             157:             TypePointer Private 51(fvec3)
             158:    157(ptr) Variable Private
             175:      8(ptr) Variable Private
             181:    157(ptr) Variable Private
             187:     22(int) Constant 4
             193:     22(int) Constant 5
             199:     22(int) Constant 6
             208:    6(float) Constant 1065353216
             209:     14(int) Constant 3
             230:   51(fvec3) ConstantComposite 155 155 155
             238:    6(float) Constant 1054168405
             239:   51(fvec3) ConstantComposite 238 238 238
             250:    6(float) Constant 1065814589
             251:   51(fvec3) ConstantComposite 250 250 250
             253:    6(float) Constant 3177269166
             254:   51(fvec3) ConstantComposite 253 253 253
             263:     52(ptr) Variable Output
             266:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              30:     25(ptr) AccessChain 21 23 29
              31:    7(fvec4) Load 30
              32:    7(fvec4) Load 11
              33:    7(fvec4) VectorShuffle 32 32 0 0 0 0
              34:    7(fvec4) FMul 31 33
              35:    7(fvec4) Load 9
              36:    7(fvec4) FAdd 34 35
                              Store 9 36
              38:     25(ptr) AccessChain 21 23 37
              39:    7(fvec4) Load 38
              40:    7(fvec4) Load 11
              41:    7(fvec4) VectorShuffle 40 40 2 2 2 2
              42:    7(fvec4) FMul 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) FAdd 42 43
                              Store 9 44
              46:    7(fvec4) Load 9
              48:     25(ptr) AccessChain 21 23 47
              49:    7(fvec4) Load 48
              50:    7(fvec4) FAdd 46 49
                              Store 45 50
              54:     25(ptr) AccessChain 21 23 47
              55:    7(fvec4) Load 54
              56:   51(fvec3) VectorShuffle 55 55 0 1 2
              57:    7(fvec4) Load 11
              58:   51(fvec3) VectorShuffle 57 57 3 3 3
              59:   51(fvec3) FMul 56 58
              60:    7(fvec4) Load 9
              61:   51(fvec3) VectorShuffle 60 60 0 1 2
              62:   51(fvec3) FAdd 59 61
                              Store 53 62
              63:    7(fvec4) Load 45
              64:    7(fvec4) VectorShuffle 63 63 1 1 1 1
              66:     25(ptr) AccessChain 21 65 24
              67:    7(fvec4) Load 66
              68:    7(fvec4) FMul 64 67
                              Store 9 68
              69:     25(ptr) AccessChain 21 65 29
              70:    7(fvec4) Load 69
              71:    7(fvec4) Load 45
              72:    7(fvec4) VectorShuffle 71 71 0 0 0 0
              73:    7(fvec4) FMul 70 72
              74:    7(fvec4) Load 9
              75:    7(fvec4) FAdd 73 74
                              Store 9 75
              76:     25(ptr) AccessChain 21 65 37
              77:    7(fvec4) Load 76
              78:    7(fvec4) Load 45
              79:    7(fvec4) VectorShuffle 78 78 2 2 2 2
              80:    7(fvec4) FMul 77 79
              81:    7(fvec4) Load 9
              82:    7(fvec4) FAdd 80 81
                              Store 9 82
              88:     25(ptr) AccessChain 21 65 47
              89:    7(fvec4) Load 88
              90:    7(fvec4) Load 45
              91:    7(fvec4) VectorShuffle 90 90 3 3 3 3
              92:    7(fvec4) FMul 89 91
              93:    7(fvec4) Load 9
              94:    7(fvec4) FAdd 92 93
              96:     95(ptr) AccessChain 87 29
                              Store 96 94
             101:    7(fvec4) Load 100
             102:   97(fvec2) VectorShuffle 101 101 0 1
             104:     25(ptr) AccessChain 21 103
             105:    7(fvec4) Load 104
             106:   97(fvec2) VectorShuffle 105 105 0 1
             107:   97(fvec2) FMul 102 106
             108:     25(ptr) AccessChain 21 103
             109:    7(fvec4) Load 108
             110:   97(fvec2) VectorShuffle 109 109 2 3
             111:   97(fvec2) FAdd 107 110
                              Store 99 111
             114:   51(fvec3) Load 113
             116:     25(ptr) AccessChain 21 115 29
             117:    7(fvec4) Load 116
             118:   51(fvec3) VectorShuffle 117 117 0 1 2
             119:    6(float) Dot 114 118
             122:    121(ptr) AccessChain 9 120
                              Store 122 119
             123:   51(fvec3) Load 113
             124:     25(ptr) AccessChain 21 115 24
             125:    7(fvec4) Load 124
             126:   51(fvec3) VectorShuffle 125 125 0 1 2
             127:    6(float) Dot 123 126
             128:    121(ptr) AccessChain 9 83
                              Store 128 127
             129:   51(fvec3) Load 113
             130:     25(ptr) AccessChain 21 115 37
             131:    7(fvec4) Load 130
             132:   51(fvec3) VectorShuffle 131 131 0 1 2
             133:    6(float) Dot 129 132
             135:    121(ptr) AccessChain 9 134
                              Store 135 133
             137:    7(fvec4) Load 9
             138:   51(fvec3) VectorShuffle 137 137 0 1 2
             139:    7(fvec4) Load 9
             140:   51(fvec3) VectorShuffle 139 139 0 1 2
             141:    6(float) Dot 138 140
                              Store 136 141
             142:    6(float) Load 136
             143:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 142
                              Store 136 143
             144:    6(float) Load 136
             145:   51(fvec3) CompositeConstruct 144 144 144
             146:    7(fvec4) Load 9
             147:   51(fvec3) VectorShuffle 146 146 0 1 2
             148:   51(fvec3) FMul 145 147
             149:    7(fvec4) Load 9
             150:    7(fvec4) VectorShuffle 149 148 4 5 6 3
                              Store 9 150
             152:    7(fvec4) Load 9
             153:   51(fvec3) VectorShuffle 152 152 0 1 2
                              Store 151 153
                              Store 154 156
             159:    121(ptr) AccessChain 9 83
             160:    6(float) Load 159
             161:    121(ptr) AccessChain 9 83
             162:    6(float) Load 161
             163:    6(float) FMul 160 162
             164:    121(ptr) AccessChain 158 120
                              Store 164 163
             165:    121(ptr) AccessChain 9 120
             166:    6(float) Load 165
             167:    121(ptr) AccessChain 9 120
             168:    6(float) Load 167
             169:    6(float) FMul 166 168
             170:    121(ptr) AccessChain 158 120
             171:    6(float) Load 170
             172:    6(float) FNegate 171
             173:    6(float) FAdd 169 172
             174:    121(ptr) AccessChain 158 120
                              Store 174 173
             176:    7(fvec4) Load 9
             177:    7(fvec4) VectorShuffle 176 176 1 2 2 0
             178:    7(fvec4) Load 9
             179:    7(fvec4) VectorShuffle 178 178 0 1 2 2
             180:    7(fvec4) FMul 177 179
                              Store 175 180
             182:     25(ptr) AccessChain 21 47
             183:    7(fvec4) Load 182
             184:    7(fvec4) Load 175
             185:    6(float) Dot 183 184
             186:    121(ptr) AccessChain 181 120
                              Store 186 185
             188:     25(ptr) AccessChain 21 187
             189:    7(fvec4) Load 188
             190:    7(fvec4) Load 175
             191:    6(float) Dot 189 190
             192:    121(ptr) AccessChain 181 83
                              Store 192 191
             194:     25(ptr) AccessChain 21 193
             195:    7(fvec4) Load 194
             196:    7(fvec4) Load 175
             197:    6(float) Dot 195 196
             198:    121(ptr) AccessChain 181 134
                              Store 198 197
             200:     25(ptr) AccessChain 21 199
             201:    7(fvec4) Load 200
             202:   51(fvec3) VectorShuffle 201 201 0 1 2
             203:   51(fvec3) Load 158
             204:   51(fvec3) VectorShuffle 203 203 0 0 0
             205:   51(fvec3) FMul 202 204
             206:   51(fvec3) Load 181
             207:   51(fvec3) FAdd 205 206
                              Store 158 207
             210:    121(ptr) AccessChain 9 209
                              Store 210 208
             211:     25(ptr) AccessChain 21 29
             212:    7(fvec4) Load 211
             213:    7(fvec4) Load 9
             214:    6(float) Dot 212 213
             215:    121(ptr) AccessChain 181 120
                              Store 215 214
             216:     25(ptr) AccessChain 21 24
             217:    7(fvec4) Load 216
             218:    7(fvec4) Load 9
             219:    6(float) Dot 217 218
             220:    121(ptr) AccessChain 181 83
                              Store 220 219
             221:     25(ptr) AccessChain 21 37
             222:    7(fvec4) Load 221
             223:    7(fvec4) Load 9
             224:    6(float) Dot 222 223
             225:    121(ptr) AccessChain 181 134
                              Store 225 224
             226:   51(fvec3) Load 158
             227:   51(fvec3) Load 181
             228:   51(fvec3) FAdd 226 227
                              Store 158 228
             229:   51(fvec3) Load 158
             231:   51(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 229 230
                              Store 158 231
             232:   51(fvec3) Load 158
             233:   51(fvec3) ExtInst 1(GLSL.std.450) 30(Log2) 232
             234:    7(fvec4) Load 9
             235:    7(fvec4) VectorShuffle 234 233 4 5 6 3
                              Store 9 235
             236:    7(fvec4) Load 9
             237:   51(fvec3) VectorShuffle 236 236 0 1 2
             240:   51(fvec3) FMul 237 239
             241:    7(fvec4) Load 9
             242:    7(fvec4) VectorShuffle 241 240 4 5 6 3
                              Store 9 242
             243:    7(fvec4) Load 9
             244:   51(fvec3) VectorShuffle 243 243 0 1 2
             245:   51(fvec3) ExtInst 1(GLSL.std.450) 29(Exp2) 244
             246:    7(fvec4) Load 9
             247:    7(fvec4) VectorShuffle 246 245 4 5 6 3
                              Store 9 247
             248:    7(fvec4) Load 9
             249:   51(fvec3) VectorShuffle 248 248 0 1 2
             252:   51(fvec3) FMul 249 251
             255:   51(fvec3) FAdd 252 254
             256:    7(fvec4) Load 9
             257:    7(fvec4) VectorShuffle 256 255 4 5 6 3
                              Store 9 257
             258:    7(fvec4) Load 9
             259:   51(fvec3) VectorShuffle 258 258 0 1 2
             260:   51(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 259 230
             261:    7(fvec4) Load 9
             262:    7(fvec4) VectorShuffle 261 260 4 5 6 3
                              Store 9 262
             264:    7(fvec4) Load 9
             265:   51(fvec3) VectorShuffle 264 264 0 1 2
                              Store 263 265
             267:    266(ptr) AccessChain 87 29 83
             268:    6(float) Load 267
             269:    6(float) FNegate 268
             270:    266(ptr) AccessChain 87 29 83
                              Store 270 269
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 68

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 35 39 42 52 55 61
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 0
                              Decorate 21 RelaxedPrecision
                              Decorate 22 RelaxedPrecision
                              Decorate 23 RelaxedPrecision
                              MemberDecorate 24 0 RelaxedPrecision
                              MemberDecorate 24 0 Offset 0
                              Decorate 24 Block
                              Decorate 26 DescriptorSet 1
                              Decorate 26 Binding 0
                              Decorate 31 RelaxedPrecision
                              Decorate 32 RelaxedPrecision
                              Decorate 33 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 35 Location 0
                              Decorate 36 RelaxedPrecision
                              Decorate 39 RelaxedPrecision
                              Decorate 39 Location 3
                              Decorate 40 RelaxedPrecision
                              Decorate 42 RelaxedPrecision
                              Decorate 42 Location 2
                              Decorate 43 RelaxedPrecision
                              Decorate 44 RelaxedPrecision
                              Decorate 52 RelaxedPrecision
                              Decorate 52 Location 1
                              Decorate 55 RelaxedPrecision
                              Decorate 55 Location 1
                              Decorate 56 RelaxedPrecision
                              Decorate 59 RelaxedPrecision
                              Decorate 60 RelaxedPrecision
                              Decorate 61 RelaxedPrecision
                              Decorate 61 Location 2
                              Decorate 62 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              19:             TypeVector 6(float) 4
              22:      8(ptr) Variable Private
              24:             TypeStruct 19(fvec4)
              25:             TypePointer Uniform 24(struct)
              26:     25(ptr) Variable Uniform
              27:             TypeInt 32 1
              28:     27(int) Constant 0
              29:             TypePointer Uniform 19(fvec4)
              34:             TypePointer Output 19(fvec4)
              35:     34(ptr) Variable Output
              39:     34(ptr) Variable Output
              41:             TypePointer Input 7(fvec3)
              42:     41(ptr) Variable Input
              47:    6(float) Constant 1065353216
              48:             TypeInt 32 0
              49:     48(int) Constant 3
              50:             TypePointer Output 6(float)
              52:     34(ptr) Variable Output
              53:    6(float) Constant 0
              54:   19(fvec4) ConstantComposite 53 53 53 53
              55:     41(ptr) Variable Input
              57:    6(float) Constant 1056964608
              58:    7(fvec3) ConstantComposite 57 57 57
              61:     34(ptr) Variable Output
               4:           2 Function None 3
               5:             Label
              14:          11 Load 13
              18:   15(fvec2) Load 17
              20:   19(fvec4) ImageSampleImplicitLod 14 18
              21:    7(fvec3) VectorShuffle 20 20 0 1 2
                              Store 9 21
              23:    7(fvec3) Load 9
              30:     29(ptr) AccessChain 26 28
              31:   19(fvec4) Load 30
              32:    7(fvec3) VectorShuffle 31 31 0 1 2
              33:    7(fvec3) FMul 23 32
                              Store 22 33
              36:    7(fvec3) Load 22
              37:   19(fvec4) Load 35
              38:   19(fvec4) VectorShuffle 37 36 4 5 6 3
                              Store 35 38
              40:    7(fvec3) Load 22
              43:    7(fvec3) Load 42
              44:    7(fvec3) FMul 40 43
              45:   19(fvec4) Load 39
              46:   19(fvec4) VectorShuffle 45 44 4 5 6 3
                              Store 39 46
              51:     50(ptr) AccessChain 35 49
                              Store 51 47
                              Store 52 54
              56:    7(fvec3) Load 55
              59:    7(fvec3) FMul 56 58
              60:    7(fvec3) FAdd 59 58
                              Store 22 60
              62:    7(fvec3) Load 22
              63:   19(fvec4) Load 61
              64:   19(fvec4) VectorShuffle 63 62 4 5 6 3
                              Store 61 64
              65:     50(ptr) AccessChain 61 49
                              Store 65 47
              66:     50(ptr) AccessChain 39 49
                              Store 66 47
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }
}
Fallback "Legacy Shaders/VertexLit"
}