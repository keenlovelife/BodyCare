// Compiled shader for all platforms

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Legacy Shaders/Transparent/Diffuse" {
Properties {
 _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
 _MainTex ("Base (RGB) Trans (A)", 2D) = "white" { }
}
SubShader { 
 LOD 200
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }


 // Stats for Vertex shader:
 //         d3d9: 56 avg math (42..71)
 //        d3d11: 43 avg math (33..54)
 //         gles: 7 math, 1 texture
 //     d3d11_9x: 43 avg math (33..54)
 // Stats for Fragment shader:
 //         d3d9: 7 math, 1 texture
 //        d3d11: 19 math, 2 texture, 2 branch
 //     d3d11_9x: 6 math, 1 texture
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="FORWARDBASE" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZWrite Off
  Blend SrcAlpha OneMinusSrcAlpha
  ColorMask RGB
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
//Keywords set in this variant: DIRECTIONAL 
-- Vertex shader for "d3d9":
// Stats: 42 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 18
Vector4 unity_SHAb at 13
Vector4 unity_SHAg at 12
Vector4 unity_SHAr at 11
Vector4 unity_SHBb at 16
Vector4 unity_SHBg at 15
Vector4 unity_SHBr at 14
Vector4 unity_SHC at 17

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   float4 unity_SHAb;
//   float4 unity_SHAg;
//   float4 unity_SHAr;
//   float4 unity_SHBb;
//   float4 unity_SHBg;
//   float4 unity_SHBr;
//   float4 unity_SHC;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   unity_SHAr          c11      1
//   unity_SHAg          c12      1
//   unity_SHAb          c13      1
//   unity_SHBr          c14      1
//   unity_SHBg          c15      1
//   unity_SHBb          c16      1
//   unity_SHC           c17      1
//   _MainTex_ST         c18      1
//

    vs_3_0
    def c19, 1.05499995, -0.0549999997, 0, 0
    def c20, 1, 0, 0.416666657, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4.xyz
    mad r0, v0.xyzx, c20.xxxy, c20.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r4.x, c4, r1
    dp4 r4.y, c5, r1
    dp4 r4.z, c6, r1
    dp4 r4.w, c7, r1
    mad o1.xy, v2, c18, c18.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    nrm r1.xyz, r0
    mul r0.x, r1.y, r1.y
    mad r0.x, r1.x, r1.x, -r0.x
    mul r2, r1.yzzx, r1.xyzz
    dp4 r3.x, c14, r2
    dp4 r3.y, c15, r2
    dp4 r3.z, c16, r2
    mad r0.xyz, c17, r0.x, r3
    mov r1.w, c20.x
    dp4 r2.x, c11, r1
    dp4 r2.y, c12, r1
    dp4 r2.z, c13, r1
    mov o2.xyz, r1
    add r0.xyz, r0, r2
    max r0.xyz, r0, c20.y
    log r1.x, r0.x
    log r1.y, r0.y
    log r1.z, r0.z
    mul r0.xyz, r1, c20.z
    exp r1.x, r0.x
    exp r1.y, r0.y
    exp r1.z, r0.z
    mad r0.xyz, r1, c19.x, c19.y
    max o4.xyz, r0, c20.y
    mad o0.xy, r4.w, c255, r4
    mov o0.zw, r4

// approximately 44 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 7 math, 1 textures
Vector4 _Color at 2
Vector4 _LightColor0 at 1
Vector4 _WorldSpaceLightPos0 at 0

Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _LightColor0;
//   sampler2D _MainTex;
//   float4 _WorldSpaceLightPos0;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   _WorldSpaceLightPos0 c0       1
//   _LightColor0         c1       1
//   _Color               c2       1
//   _MainTex             s0       1
//

    ps_3_0
    def c3, 0, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_texcoord3_pp v2.xyz
    dcl_2d s0
    dp3_pp r0.x, v1, c0
    max_pp r1.x, r0.x, c3.x
    texld r0, v0, s0
    mul_pp r0, r0, c2
    mul_pp r1.yzw, r0.xxyz, c1.xxyz
    mul_pp r0.xyz, r0, v2
    mov_pp oC0.w, r0.w
    mad_pp oC0.xyz, r1.yzww, r1.x, r0

// approximately 8 instruction slots used (1 texture, 7 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 33 math, 4 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_temps 4
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb2[3].xyzw
   4: mad o3.xyz, cb2[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb3[18].xyzw
   6: mad r0.xyzw, cb3[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb3[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb3[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: dp3 r0.x, v2.xyzx, cb2[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb2[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb2[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul r0.xyz, r0.wwww, r0.xyzx
  16: mov o2.xyz, r0.xyzx
  17: mul r1.x, r0.y, r0.y
  18: mad r1.x, r0.x, r0.x, -r1.x
  19: mul r2.xyzw, r0.yzzx, r0.xyzz
  20: dp4 r3.x, cb1[41].xyzw, r2.xyzw
  21: dp4 r3.y, cb1[42].xyzw, r2.xyzw
  22: dp4 r3.z, cb1[43].xyzw, r2.xyzw
  23: mad r1.xyz, cb1[44].xyzx, r1.xxxx, r3.xyzx
  24: mov r0.w, l(1.000000)
  25: dp4 r2.x, cb1[38].xyzw, r0.xyzw
  26: dp4 r2.y, cb1[39].xyzw, r0.xyzw
  27: dp4 r2.z, cb1[40].xyzw, r0.xyzw
  28: add r0.xyz, r1.xyzx, r2.xyzx
  29: max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  30: log r0.xyz, r0.xyzx
  31: mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  32: exp r0.xyz, r0.xyzx
  33: mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  34: max o4.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  35: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 19 math, 3 temp registers, 2 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _LightColor0 at 32
  Vector4 _Color at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 720
}
Constant Buffer "UnityProbeVolume" (112 bytes) on slot 2 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 16
  Vector4 unity_ProbeVolumeParams at 0
  Vector3 unity_ProbeVolumeSizeInv at 80
  Vector3 unity_ProbeVolumeMin at 96
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[46], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture3d (float,float,float,float) t1
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_input_ps linear v4.xyz
      dcl_output o0.xyzw
      dcl_temps 3
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s1
   1: mul r0.xyzw, r0.xyzw, cb0[4].xyzw
   2: eq r1.x, cb2[0].x, l(1.000000)
   3: if_nz r1.x
   4:   eq r1.x, cb2[0].y, l(1.000000)
   5:   mul r1.yzw, v3.yyyy, cb2[2].xxyz
   6:   mad r1.yzw, cb2[1].xxyz, v3.xxxx, r1.yyzw
   7:   mad r1.yzw, cb2[3].xxyz, v3.zzzz, r1.yyzw
   8:   add r1.yzw, r1.yyzw, cb2[4].xxyz
   9:   movc r1.xyz, r1.xxxx, r1.yzwy, v3.xyzx
  10:   add r1.xyz, r1.xyzx, -cb2[6].xyzx
  11:   mul r1.yzw, r1.xxyz, cb2[5].xxyz
  12:   mad r1.y, r1.y, l(0.250000), l(0.750000)
  13:   mad r2.x, cb2[0].z, l(0.500000), l(0.750000)
  14:   max r1.x, r1.y, r2.x
  15:   sample r1.xyzw, r1.xzwx, t1.xyzw, s0
  16: else 
  17:   mov r1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  18: endif 
  19: dp4_sat r1.x, r1.xyzw, cb1[45].xyzw
  20: mul r1.xyz, r1.xxxx, cb0[2].xyzx
  21: dp3 r1.w, v2.xyzx, cb1[0].xyzx
  22: max r1.w, r1.w, l(0.000000)
  23: mul r1.xyz, r0.xyzx, r1.xyzx
  24: mul r0.xyz, r0.xyzx, v4.xyzx
  25: mad o0.xyz, r1.xyzx, r1.wwww, r0.xyzx
  26: mov o0.w, r0.w
  27: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 7 math, 1 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  worldNormal_1 = tmpvar_5;
  tmpvar_2 = worldNormal_1;
  mediump vec3 normal_6;
  normal_6 = worldNormal_1;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = normal_6;
  mediump vec3 res_8;
  mediump vec3 x_9;
  x_9.x = dot (unity_SHAr, tmpvar_7);
  x_9.y = dot (unity_SHAg, tmpvar_7);
  x_9.z = dot (unity_SHAb, tmpvar_7);
  mediump vec3 x1_10;
  mediump vec4 tmpvar_11;
  tmpvar_11 = (normal_6.xyzz * normal_6.yzzx);
  x1_10.x = dot (unity_SHBr, tmpvar_11);
  x1_10.y = dot (unity_SHBg, tmpvar_11);
  x1_10.z = dot (unity_SHBb, tmpvar_11);
  res_8 = (x_9 + (x1_10 + (unity_SHC.xyz * 
    ((normal_6.x * normal_6.x) - (normal_6.y * normal_6.y))
  )));
  mediump vec3 tmpvar_12;
  tmpvar_12 = max (((1.055 * 
    pow (max (res_8, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_8 = tmpvar_12;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
  xlv_TEXCOORD3 = max (vec3(0.0, 0.0, 0.0), tmpvar_12);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 lightDir_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  lightDir_4 = tmpvar_5;
  tmpvar_3 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_6;
  tmpvar_6 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_4;
  lowp vec4 c_7;
  lowp vec4 c_8;
  lowp float diff_9;
  mediump float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_3, tmpvar_2));
  diff_9 = tmpvar_10;
  c_8.xyz = ((tmpvar_6.xyz * tmpvar_1) * diff_9);
  c_8.w = tmpvar_6.w;
  c_7.w = c_8.w;
  c_7.xyz = (c_8.xyz + (tmpvar_6.xyz * xlv_TEXCOORD3));
  gl_FragData[0] = c_7;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 33 math, 4 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             5         1  ( FLT, FLT, FLT, FLT)
// c2         cb1            38         7  ( FLT, FLT, FLT, FLT)
// c9         cb2             0         7  ( FLT, FLT, FLT, FLT)
// c16        cb3            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          def c20, 1, 0, 0.416666657, 0
          def c21, 1.05499995, -0.0549999997, 0, 0
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c10
   2:     mad r0, c9, v0.x, r0
   3:     mad r0, c11, v0.z, r0
   4:     mad oT2.xyz, c12, v0.w, r0
   5:     add r0, r0, c12
   6:     dp3 r1.x, v2, c13
   7:     dp3 r1.y, v2, c14
   8:     dp3 r1.z, v2, c15
   9:     nrm r2.xyz, r1
  12:     mul r1.x, r2.y, r2.y
  13:     mad r1.x, r2.x, r2.x, -r1.x
  14:     mul r3, r2.yzzx, r2.xyzz
  15:     dp4 r4.x, c5, r3
  16:     dp4 r4.y, c6, r3
  17:     dp4 r4.z, c7, r3
  18:     mad r1.xyz, c8, r1.x, r4
  19:     mov r2.w, c20.x
  20:     dp4 r3.x, c2, r2
  21:     dp4 r3.y, c3, r2
  22:     dp4 r3.z, c4, r2
  23:     mov oT1.xyz, r2
  24:     add r1.xyz, r1, r3
  25:     max r1.xyz, r1, c20.y
  26:     mov r1.w, c20.z
  27:     lit r2, r1.xxww
  28:     mov r2.x, r2.z
  29:     lit r3, r1.yyww
  30:     lit r1, r1.zzww
  31:     mov r2.z, r1.z
  32:     mov r2.y, r3.z
  33:     mad r1.xyz, r2, c21.x, c21.y
  34:     max oT3.xyz, r1, c20.y
  35:     mul r1, r0.y, c17
  36:     mad r1, c16, r0.x, r1
  37:     mad r1, c18, r0.z, r1
  38:     mad r0, c19, r0.w, r1
  39:     mad oPos.xy, r0.w, c0, r0
  40:     mov oPos.zw, r0

// approximately 41 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_temps 4
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb2[3].xyzw
   4: mad o3.xyz, cb2[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb3[18].xyzw
   6: mad r0.xyzw, cb3[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb3[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb3[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: dp3 r0.x, v2.xyzx, cb2[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb2[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb2[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul r0.xyz, r0.wwww, r0.xyzx
  16: mov o2.xyz, r0.xyzx
  17: mul r1.x, r0.y, r0.y
  18: mad r1.x, r0.x, r0.x, -r1.x
  19: mul r2.xyzw, r0.yzzx, r0.xyzz
  20: dp4 r3.x, cb1[41].xyzw, r2.xyzw
  21: dp4 r3.y, cb1[42].xyzw, r2.xyzw
  22: dp4 r3.z, cb1[43].xyzw, r2.xyzw
  23: mad r1.xyz, cb1[44].xyzx, r1.xxxx, r3.xyzx
  24: mov r0.w, l(1.000000)
  25: dp4 r2.x, cb1[38].xyzw, r0.xyzw
  26: dp4 r2.y, cb1[39].xyzw, r0.xyzw
  27: dp4 r2.z, cb1[40].xyzw, r0.xyzw
  28: add r0.xyz, r1.xyzx, r2.xyzx
  29: max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  30: log r0.xyz, r0.xyzx
  31: mul r0.xyz, r0.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  32: exp r0.xyz, r0.xyzx
  33: mad r0.xyz, r0.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  34: max o4.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  35: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 6 math, 2 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _LightColor0 at 32
  Vector4 _Color at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float       
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c1         cb0             4         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c3, 0, 0, 0, 0
          dcl t0.xy
          dcl_pp t1.xyz
          dcl_pp t3.xyz
          dcl_2d s0
   0:     dp3_pp r0.w, t1, c2
   1:     max_pp r1.w, r0.w, c3.x
   2:     texld r0, t0, s0
   2:     mul_pp r0, r0, c1
   3:     mul_pp r1.xyz, r0, c0
   4:     mul_pp r2.xyz, r0, t3
   5:     mad_pp r0.xyz, r1, r1.w, r2
   6:     mov_pp oC0, r0

// approximately 8 instruction slots used (1 texture, 7 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v4.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: dp3 r0.x, v2.xyzx, cb1[0].xyzx
   1: max r0.x, r0.x, l(0.000000)
   2: sample r1.xyzw, v1.xyxx, t0.xyzw, s0
   3: mul r1.xyzw, r1.xyzw, cb0[4].xyzw
   4: mul r0.yzw, r1.xxyz, cb0[2].xxyz
   5: mul r1.xyz, r1.xyzx, v4.xyzx
   6: mov o0.w, r1.w
   7: mad o0.xyz, r0.yzwy, r0.xxxx, r1.xyzx
   8: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;
    u_xlat16_2.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;
    u_xlat0.w = 1.0;
    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);
    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);
    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _Color;
    u_xlat16_3.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.w = u_xlat16_1.w;
    SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_2.xyz;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (320 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 112
  Matrix4x4 unity_WorldToObject at 176
  Matrix4x4 unity_MatrixVP at 240
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_SHBr at 48
  Vector4 unity_SHBg at 64
  Vector4 unity_SHBb at 80
  Vector4 unity_SHC at 96
  Vector4 _MainTex_ST at 304
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float u_xlat12;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = fma(u_xlat0.x, u_xlat0.x, (-u_xlat1.x));
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(Globals.unity_SHBb, u_xlat2);
    u_xlat1.xyz = fma(Globals.unity_SHC.xyz, u_xlat1.xxx, u_xlat3.xyz);
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(Globals.unity_SHAr, u_xlat0);
    u_xlat2.y = dot(Globals.unity_SHAg, u_xlat0);
    u_xlat2.z = dot(Globals.unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    output.TEXCOORD3.xyz = max(u_xlat0.xyz, float3(0.0, 0.0, 0.0));
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "Globals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 _LightColor0 at 144
  Vector4 _Color at 160
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float u_xlat2;
    float3 u_xlat4;
    float u_xlat10;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat0 = u_xlat0 * Globals._Color;
    u_xlatb1 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat4.xyz : input.TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat1.yzw = u_xlat1.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat4.x = fma(u_xlat1.y, 0.25, 0.75);
        u_xlat2 = fma(Globals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat1.x = max(u_xlat4.x, u_xlat2);
        u_xlat1 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    }
    u_xlat1.x = dot(u_xlat1, Globals.unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat1.xyz = u_xlat1.xxx * Globals._LightColor0.xyz;
    u_xlat10 = dot(input.TEXCOORD1.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * input.TEXCOORD3.xyz;
    output.SV_Target0.xyz = fma(u_xlat1.xyz, float3(u_xlat10), u_xlat0.xyz);
    output.SV_Target0.w = u_xlat0.w;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    u_xlat1.x = u_xlat0.y * u_xlat0.y;
    u_xlat1.x = u_xlat0.x * u_xlat0.x + (-u_xlat1.x);
    u_xlat2 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat1.xyz = unity_SHC.xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat0.w = 1.0;
    u_xlat2.x = dot(unity_SHAr, u_xlat0);
    u_xlat2.y = dot(unity_SHAg, u_xlat0);
    u_xlat2.z = dot(unity_SHAb, u_xlat0);
    u_xlat0.xyz = u_xlat1.xyz + u_xlat2.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.xyz = log2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat0.xyz = exp2(u_xlat0.xyz);
    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    vs_TEXCOORD3.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat2;
vec3 u_xlat4;
float u_xlat10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat4.x, u_xlat2);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
    u_xlat10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
u_xlatb1", used in: Fragment 

Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 1, used in: Fragment 

Constant Buffer "PGlobals3524862384" (176 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Vector4 _Color at 160
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals3524862384" (320 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 240
  Matrix4x4 unity_ObjectToWorld at 112
  Matrix4x4 unity_WorldToObject at 176
  Vector4 _MainTex_ST at 304
  Vector4 unity_SHAb at 32
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAr at 0
  Vector4 unity_SHBb at 80
  Vector4 unity_SHBg at 64
  Vector4 unity_SHBr at 48
  Vector4 unity_SHC at 96
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 270

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 53 87 99 100 113 151 261
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 RelaxedPrecision
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 RelaxedPrecision
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 RelaxedPrecision
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 RelaxedPrecision
                              MemberDecorate 19 3 Offset 48
                              MemberDecorate 19 4 RelaxedPrecision
                              MemberDecorate 19 4 Offset 64
                              MemberDecorate 19 5 RelaxedPrecision
                              MemberDecorate 19 5 Offset 80
                              MemberDecorate 19 6 RelaxedPrecision
                              MemberDecorate 19 6 Offset 96
                              MemberDecorate 19 7 Offset 112
                              MemberDecorate 19 8 Offset 176
                              MemberDecorate 19 9 Offset 240
                              MemberDecorate 19 10 Offset 304
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 53 Location 2
                              MemberDecorate 85 0 BuiltIn Position
                              MemberDecorate 85 1 BuiltIn PointSize
                              MemberDecorate 85 2 BuiltIn ClipDistance
                              Decorate 85 Block
                              Decorate 99 Location 0
                              Decorate 100 Location 2
                              Decorate 113 Location 1
                              Decorate 151 RelaxedPrecision
                              Decorate 151 Location 1
                              Decorate 155 RelaxedPrecision
                              Decorate 168 RelaxedPrecision
                              Decorate 169 RelaxedPrecision
                              Decorate 172 RelaxedPrecision
                              Decorate 178 RelaxedPrecision
                              Decorate 180 RelaxedPrecision
                              Decorate 181 RelaxedPrecision
                              Decorate 182 RelaxedPrecision
                              Decorate 186 RelaxedPrecision
                              Decorate 187 RelaxedPrecision
                              Decorate 188 RelaxedPrecision
                              Decorate 192 RelaxedPrecision
                              Decorate 193 RelaxedPrecision
                              Decorate 194 RelaxedPrecision
                              Decorate 198 RelaxedPrecision
                              Decorate 199 RelaxedPrecision
                              Decorate 200 RelaxedPrecision
                              Decorate 201 RelaxedPrecision
                              Decorate 202 RelaxedPrecision
                              Decorate 203 RelaxedPrecision
                              Decorate 204 RelaxedPrecision
                              Decorate 209 RelaxedPrecision
                              Decorate 214 RelaxedPrecision
                              Decorate 219 RelaxedPrecision
                              Decorate 223 RelaxedPrecision
                              Decorate 224 RelaxedPrecision
                              Decorate 225 RelaxedPrecision
                              Decorate 226 RelaxedPrecision
                              Decorate 229 RelaxedPrecision
                              Decorate 230 RelaxedPrecision
                              Decorate 231 RelaxedPrecision
                              Decorate 261 RelaxedPrecision
                              Decorate 261 Location 3
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 7
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              29:     22(int) Constant 0
              37:     22(int) Constant 2
              45:      8(ptr) Variable Private
              47:     22(int) Constant 3
              51:             TypeVector 6(float) 3
              52:             TypePointer Output 51(fvec3)
              53:     52(ptr) Variable Output
              65:     22(int) Constant 9
              83:     14(int) Constant 1
              84:             TypeArray 6(float) 83
              85:             TypeStruct 7(fvec4) 6(float) 84
              86:             TypePointer Output 85(struct)
              87:     86(ptr) Variable Output
              95:             TypePointer Output 7(fvec4)
              97:             TypeVector 6(float) 2
              98:             TypePointer Output 97(fvec2)
              99:     98(ptr) Variable Output
             100:     10(ptr) Variable Input
             103:     22(int) Constant 10
             112:             TypePointer Input 51(fvec3)
             113:    112(ptr) Variable Input
             115:     22(int) Constant 8
             120:     14(int) Constant 0
             121:             TypePointer Private 6(float)
             134:     14(int) Constant 2
             136:    121(ptr) Variable Private
             151:     52(ptr) Variable Output
             154:             TypePointer Private 51(fvec3)
             155:    154(ptr) Variable Private
             172:      8(ptr) Variable Private
             178:    154(ptr) Variable Private
             184:     22(int) Constant 4
             190:     22(int) Constant 5
             196:     22(int) Constant 6
             205:    6(float) Constant 1065353216
             206:     14(int) Constant 3
             227:    6(float) Constant 0
             228:   51(fvec3) ConstantComposite 227 227 227
             236:    6(float) Constant 1054168405
             237:   51(fvec3) ConstantComposite 236 236 236
             248:    6(float) Constant 1065814589
             249:   51(fvec3) ConstantComposite 248 248 248
             251:    6(float) Constant 3177269166
             252:   51(fvec3) ConstantComposite 251 251 251
             261:     52(ptr) Variable Output
             264:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              30:     25(ptr) AccessChain 21 23 29
              31:    7(fvec4) Load 30
              32:    7(fvec4) Load 11
              33:    7(fvec4) VectorShuffle 32 32 0 0 0 0
              34:    7(fvec4) FMul 31 33
              35:    7(fvec4) Load 9
              36:    7(fvec4) FAdd 34 35
                              Store 9 36
              38:     25(ptr) AccessChain 21 23 37
              39:    7(fvec4) Load 38
              40:    7(fvec4) Load 11
              41:    7(fvec4) VectorShuffle 40 40 2 2 2 2
              42:    7(fvec4) FMul 39 41
              43:    7(fvec4) Load 9
              44:    7(fvec4) FAdd 42 43
                              Store 9 44
              46:    7(fvec4) Load 9
              48:     25(ptr) AccessChain 21 23 47
              49:    7(fvec4) Load 48
              50:    7(fvec4) FAdd 46 49
                              Store 45 50
              54:     25(ptr) AccessChain 21 23 47
              55:    7(fvec4) Load 54
              56:   51(fvec3) VectorShuffle 55 55 0 1 2
              57:    7(fvec4) Load 11
              58:   51(fvec3) VectorShuffle 57 57 3 3 3
              59:   51(fvec3) FMul 56 58
              60:    7(fvec4) Load 9
              61:   51(fvec3) VectorShuffle 60 60 0 1 2
              62:   51(fvec3) FAdd 59 61
                              Store 53 62
              63:    7(fvec4) Load 45
              64:    7(fvec4) VectorShuffle 63 63 1 1 1 1
              66:     25(ptr) AccessChain 21 65 24
              67:    7(fvec4) Load 66
              68:    7(fvec4) FMul 64 67
                              Store 9 68
              69:     25(ptr) AccessChain 21 65 29
              70:    7(fvec4) Load 69
              71:    7(fvec4) Load 45
              72:    7(fvec4) VectorShuffle 71 71 0 0 0 0
              73:    7(fvec4) FMul 70 72
              74:    7(fvec4) Load 9
              75:    7(fvec4) FAdd 73 74
                              Store 9 75
              76:     25(ptr) AccessChain 21 65 37
              77:    7(fvec4) Load 76
              78:    7(fvec4) Load 45
              79:    7(fvec4) VectorShuffle 78 78 2 2 2 2
              80:    7(fvec4) FMul 77 79
              81:    7(fvec4) Load 9
              82:    7(fvec4) FAdd 80 81
                              Store 9 82
              88:     25(ptr) AccessChain 21 65 47
              89:    7(fvec4) Load 88
              90:    7(fvec4) Load 45
              91:    7(fvec4) VectorShuffle 90 90 3 3 3 3
              92:    7(fvec4) FMul 89 91
              93:    7(fvec4) Load 9
              94:    7(fvec4) FAdd 92 93
              96:     95(ptr) AccessChain 87 29
                              Store 96 94
             101:    7(fvec4) Load 100
             102:   97(fvec2) VectorShuffle 101 101 0 1
             104:     25(ptr) AccessChain 21 103
             105:    7(fvec4) Load 104
             106:   97(fvec2) VectorShuffle 105 105 0 1
             107:   97(fvec2) FMul 102 106
             108:     25(ptr) AccessChain 21 103
             109:    7(fvec4) Load 108
             110:   97(fvec2) VectorShuffle 109 109 2 3
             111:   97(fvec2) FAdd 107 110
                              Store 99 111
             114:   51(fvec3) Load 113
             116:     25(ptr) AccessChain 21 115 29
             117:    7(fvec4) Load 116
             118:   51(fvec3) VectorShuffle 117 117 0 1 2
             119:    6(float) Dot 114 118
             122:    121(ptr) AccessChain 9 120
                              Store 122 119
             123:   51(fvec3) Load 113
             124:     25(ptr) AccessChain 21 115 24
             125:    7(fvec4) Load 124
             126:   51(fvec3) VectorShuffle 125 125 0 1 2
             127:    6(float) Dot 123 126
             128:    121(ptr) AccessChain 9 83
                              Store 128 127
             129:   51(fvec3) Load 113
             130:     25(ptr) AccessChain 21 115 37
             131:    7(fvec4) Load 130
             132:   51(fvec3) VectorShuffle 131 131 0 1 2
             133:    6(float) Dot 129 132
             135:    121(ptr) AccessChain 9 134
                              Store 135 133
             137:    7(fvec4) Load 9
             138:   51(fvec3) VectorShuffle 137 137 0 1 2
             139:    7(fvec4) Load 9
             140:   51(fvec3) VectorShuffle 139 139 0 1 2
             141:    6(float) Dot 138 140
                              Store 136 141
             142:    6(float) Load 136
             143:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 142
                              Store 136 143
             144:    6(float) Load 136
             145:   51(fvec3) CompositeConstruct 144 144 144
             146:    7(fvec4) Load 9
             147:   51(fvec3) VectorShuffle 146 146 0 1 2
             148:   51(fvec3) FMul 145 147
             149:    7(fvec4) Load 9
             150:    7(fvec4) VectorShuffle 149 148 4 5 6 3
                              Store 9 150
             152:    7(fvec4) Load 9
             153:   51(fvec3) VectorShuffle 152 152 0 1 2
                              Store 151 153
             156:    121(ptr) AccessChain 9 83
             157:    6(float) Load 156
             158:    121(ptr) AccessChain 9 83
             159:    6(float) Load 158
             160:    6(float) FMul 157 159
             161:    121(ptr) AccessChain 155 120
                              Store 161 160
             162:    121(ptr) AccessChain 9 120
             163:    6(float) Load 162
             164:    121(ptr) AccessChain 9 120
             165:    6(float) Load 164
             166:    6(float) FMul 163 165
             167:    121(ptr) AccessChain 155 120
             168:    6(float) Load 167
             169:    6(float) FNegate 168
             170:    6(float) FAdd 166 169
             171:    121(ptr) AccessChain 155 120
                              Store 171 170
             173:    7(fvec4) Load 9
             174:    7(fvec4) VectorShuffle 173 173 1 2 2 0
             175:    7(fvec4) Load 9
             176:    7(fvec4) VectorShuffle 175 175 0 1 2 2
             177:    7(fvec4) FMul 174 176
                              Store 172 177
             179:     25(ptr) AccessChain 21 47
             180:    7(fvec4) Load 179
             181:    7(fvec4) Load 172
             182:    6(float) Dot 180 181
             183:    121(ptr) AccessChain 178 120
                              Store 183 182
             185:     25(ptr) AccessChain 21 184
             186:    7(fvec4) Load 185
             187:    7(fvec4) Load 172
             188:    6(float) Dot 186 187
             189:    121(ptr) AccessChain 178 83
                              Store 189 188
             191:     25(ptr) AccessChain 21 190
             192:    7(fvec4) Load 191
             193:    7(fvec4) Load 172
             194:    6(float) Dot 192 193
             195:    121(ptr) AccessChain 178 134
                              Store 195 194
             197:     25(ptr) AccessChain 21 196
             198:    7(fvec4) Load 197
             199:   51(fvec3) VectorShuffle 198 198 0 1 2
             200:   51(fvec3) Load 155
             201:   51(fvec3) VectorShuffle 200 200 0 0 0
             202:   51(fvec3) FMul 199 201
             203:   51(fvec3) Load 178
             204:   51(fvec3) FAdd 202 203
                              Store 155 204
             207:    121(ptr) AccessChain 9 206
                              Store 207 205
             208:     25(ptr) AccessChain 21 29
             209:    7(fvec4) Load 208
             210:    7(fvec4) Load 9
             211:    6(float) Dot 209 210
             212:    121(ptr) AccessChain 178 120
                              Store 212 211
             213:     25(ptr) AccessChain 21 24
             214:    7(fvec4) Load 213
             215:    7(fvec4) Load 9
             216:    6(float) Dot 214 215
             217:    121(ptr) AccessChain 178 83
                              Store 217 216
             218:     25(ptr) AccessChain 21 37
             219:    7(fvec4) Load 218
             220:    7(fvec4) Load 9
             221:    6(float) Dot 219 220
             222:    121(ptr) AccessChain 178 134
                              Store 222 221
             223:   51(fvec3) Load 155
             224:   51(fvec3) Load 178
             225:   51(fvec3) FAdd 223 224
                              Store 155 225
             226:   51(fvec3) Load 155
             229:   51(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 226 228
                              Store 155 229
             230:   51(fvec3) Load 155
             231:   51(fvec3) ExtInst 1(GLSL.std.450) 30(Log2) 230
             232:    7(fvec4) Load 9
             233:    7(fvec4) VectorShuffle 232 231 4 5 6 3
                              Store 9 233
             234:    7(fvec4) Load 9
             235:   51(fvec3) VectorShuffle 234 234 0 1 2
             238:   51(fvec3) FMul 235 237
             239:    7(fvec4) Load 9
             240:    7(fvec4) VectorShuffle 239 238 4 5 6 3
                              Store 9 240
             241:    7(fvec4) Load 9
             242:   51(fvec3) VectorShuffle 241 241 0 1 2
             243:   51(fvec3) ExtInst 1(GLSL.std.450) 29(Exp2) 242
             244:    7(fvec4) Load 9
             245:    7(fvec4) VectorShuffle 244 243 4 5 6 3
                              Store 9 245
             246:    7(fvec4) Load 9
             247:   51(fvec3) VectorShuffle 246 246 0 1 2
             250:   51(fvec3) FMul 247 249
             253:   51(fvec3) FAdd 250 252
             254:    7(fvec4) Load 9
             255:    7(fvec4) VectorShuffle 254 253 4 5 6 3
                              Store 9 255
             256:    7(fvec4) Load 9
             257:   51(fvec3) VectorShuffle 256 256 0 1 2
             258:   51(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 257 228
             259:    7(fvec4) Load 9
             260:    7(fvec4) VectorShuffle 259 258 4 5 6 3
                              Store 9 260
             262:    7(fvec4) Load 9
             263:   51(fvec3) VectorShuffle 262 262 0 1 2
                              Store 261 263
             265:    264(ptr) AccessChain 87 29 83
             266:    6(float) Load 265
             267:    6(float) FNegate 266
             268:    264(ptr) AccessChain 87 29 83
                              Store 268 267
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 210

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 61 177 192 196
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 0
                              Decorate 20 RelaxedPrecision
                              Decorate 21 RelaxedPrecision
                              Decorate 24 ArrayStride 16
                              MemberDecorate 26 0 RelaxedPrecision
                              MemberDecorate 26 0 Offset 0
                              MemberDecorate 26 1 RelaxedPrecision
                              MemberDecorate 26 1 Offset 16
                              MemberDecorate 26 2 Offset 32
                              MemberDecorate 26 3 Offset 48
                              MemberDecorate 26 4 Offset 112
                              MemberDecorate 26 5 Offset 128
                              MemberDecorate 26 6 RelaxedPrecision
                              MemberDecorate 26 6 Offset 144
                              MemberDecorate 26 7 RelaxedPrecision
                              MemberDecorate 26 7 Offset 160
                              Decorate 26 Block
                              Decorate 28 DescriptorSet 1
                              Decorate 28 Binding 0
                              Decorate 33 RelaxedPrecision
                              Decorate 34 RelaxedPrecision
                              Decorate 51 SpecId 0
                              Decorate 61 Location 2
                              Decorate 145 DescriptorSet 0
                              Decorate 145 Binding 1
                              Decorate 150 RelaxedPrecision
                              Decorate 158 RelaxedPrecision
                              Decorate 159 RelaxedPrecision
                              Decorate 161 RelaxedPrecision
                              Decorate 162 RelaxedPrecision
                              Decorate 165 RelaxedPrecision
                              Decorate 167 RelaxedPrecision
                              Decorate 169 RelaxedPrecision
                              Decorate 170 RelaxedPrecision
                              Decorate 173 RelaxedPrecision
                              Decorate 174 RelaxedPrecision
                              Decorate 175 RelaxedPrecision
                              Decorate 176 RelaxedPrecision
                              Decorate 177 RelaxedPrecision
                              Decorate 177 Location 1
                              Decorate 178 RelaxedPrecision
                              Decorate 180 RelaxedPrecision
                              Decorate 181 RelaxedPrecision
                              Decorate 182 RelaxedPrecision
                              Decorate 183 RelaxedPrecision
                              Decorate 184 RelaxedPrecision
                              Decorate 185 RelaxedPrecision
                              Decorate 186 RelaxedPrecision
                              Decorate 187 RelaxedPrecision
                              Decorate 188 RelaxedPrecision
                              Decorate 189 RelaxedPrecision
                              Decorate 190 RelaxedPrecision
                              Decorate 191 RelaxedPrecision
                              Decorate 192 RelaxedPrecision
                              Decorate 192 Location 3
                              Decorate 193 RelaxedPrecision
                              Decorate 194 RelaxedPrecision
                              Decorate 196 RelaxedPrecision
                              Decorate 196 Location 0
                              Decorate 197 RelaxedPrecision
                              Decorate 198 RelaxedPrecision
                              Decorate 199 RelaxedPrecision
                              Decorate 200 RelaxedPrecision
                              Decorate 201 RelaxedPrecision
                              Decorate 202 RelaxedPrecision
                              Decorate 206 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              20:      8(ptr) Variable Private
              22:             TypeInt 32 0
              23:     22(int) Constant 4
              24:             TypeArray 7(fvec4) 23
              25:             TypeVector 6(float) 3
              26:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 24 25(fvec3) 25(fvec3) 7(fvec4) 7(fvec4)
              27:             TypePointer Uniform 26(struct)
              28:     27(ptr) Variable Uniform
              29:             TypeInt 32 1
              30:     29(int) Constant 7
              31:             TypePointer Uniform 7(fvec4)
              35:             TypeBool
              36:             TypePointer Private 35(bool)
              37:     36(ptr) Variable Private
              38:     29(int) Constant 2
              39:     22(int) Constant 0
              40:             TypePointer Uniform 6(float)
              43:    6(float) Constant 1065353216
              45:    35(bool) ConstantFalse
              51:    35(bool) SpecConstantFalse
              54:     22(int) Constant 1
              58:             TypePointer Private 25(fvec3)
              59:     58(ptr) Variable Private
              60:             TypePointer Input 25(fvec3)
              61:     60(ptr) Variable Input
              64:     29(int) Constant 3
              65:     29(int) Constant 1
              70:     29(int) Constant 0
              92:      8(ptr) Variable Private
              93:             TypePointer Function 25(fvec3)
             106:     29(int) Constant 5
             107:             TypePointer Uniform 25(fvec3)
             116:     29(int) Constant 4
             122:             TypePointer Private 6(float)
             125:    6(float) Constant 1048576000
             127:    6(float) Constant 1061158912
             130:    122(ptr) Variable Private
             131:     22(int) Constant 2
             134:    6(float) Constant 1056964608
             142:             TypeImage 6(float) 3D sampled format:Unknown
             143:             TypeSampledImage 142
             144:             TypePointer UniformConstant 143
             145:    144(ptr) Variable UniformConstant
             150:      8(ptr) Variable Private
             156:     22(int) Constant 3
             158:     58(ptr) Variable Private
             166:    6(float) Constant 0
             171:     29(int) Constant 6
             176:    122(ptr) Variable Private
             177:     60(ptr) Variable Input
             189:     58(ptr) Variable Private
             192:     60(ptr) Variable Input
             195:             TypePointer Output 7(fvec4)
             196:    195(ptr) Variable Output
             207:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              94:     93(ptr) Variable Function
              14:          11 Load 13
              18:   15(fvec2) Load 17
              19:    7(fvec4) ImageSampleImplicitLod 14 18
                              Store 9 19
              21:    7(fvec4) Load 9
              32:     31(ptr) AccessChain 28 30
              33:    7(fvec4) Load 32
              34:    7(fvec4) FMul 21 33
                              Store 20 34
              41:     40(ptr) AccessChain 28 38 39
              42:    6(float) Load 41
              44:    35(bool) FOrdEqual 42 43
                              Store 37 44
                              SelectionMerge 47 None
                              BranchConditional 45 46 47
              46:               Label
              48:    35(bool)   Load 37
                                SelectionMerge 50 None
                                BranchConditional 48 49 50
              49:                 Label
                                  Branch 50
              50:               Label
                                Branch 47
              47:             Label
                              SelectionMerge 53 None
                              BranchConditional 51 52 152
              52:               Label
              55:     40(ptr)   AccessChain 28 38 54
              56:    6(float)   Load 55
              57:    35(bool)   FOrdEqual 56 43
                                Store 37 57
              62:   25(fvec3)   Load 61
              63:   25(fvec3)   VectorShuffle 62 62 1 1 1
              66:     31(ptr)   AccessChain 28 64 65
              67:    7(fvec4)   Load 66
              68:   25(fvec3)   VectorShuffle 67 67 0 1 2
              69:   25(fvec3)   FMul 63 68
                                Store 59 69
              71:     31(ptr)   AccessChain 28 64 70
              72:    7(fvec4)   Load 71
              73:   25(fvec3)   VectorShuffle 72 72 0 1 2
              74:   25(fvec3)   Load 61
              75:   25(fvec3)   VectorShuffle 74 74 0 0 0
              76:   25(fvec3)   FMul 73 75
              77:   25(fvec3)   Load 59
              78:   25(fvec3)   FAdd 76 77
                                Store 59 78
              79:     31(ptr)   AccessChain 28 64 38
              80:    7(fvec4)   Load 79
              81:   25(fvec3)   VectorShuffle 80 80 0 1 2
              82:   25(fvec3)   Load 61
              83:   25(fvec3)   VectorShuffle 82 82 2 2 2
              84:   25(fvec3)   FMul 81 83
              85:   25(fvec3)   Load 59
              86:   25(fvec3)   FAdd 84 85
                                Store 59 86
              87:   25(fvec3)   Load 59
              88:     31(ptr)   AccessChain 28 64 64
              89:    7(fvec4)   Load 88
              90:   25(fvec3)   VectorShuffle 89 89 0 1 2
              91:   25(fvec3)   FAdd 87 90
                                Store 59 91
              95:    35(bool)   Load 37
                                SelectionMerge 97 None
                                BranchConditional 95 96 99
              96:                 Label
              98:   25(fvec3)     Load 59
                                  Store 94 98
                                  Branch 97
              99:                 Label
             100:   25(fvec3)     Load 61
                                  Store 94 100
                                  Branch 97
              97:               Label
             101:   25(fvec3)   Load 94
             102:    7(fvec4)   Load 92
             103:    7(fvec4)   VectorShuffle 102 101 4 5 6 3
                                Store 92 103
             104:    7(fvec4)   Load 92
             105:   25(fvec3)   VectorShuffle 104 104 0 1 2
             108:    107(ptr)   AccessChain 28 106
             109:   25(fvec3)   Load 108
             110:   25(fvec3)   FNegate 109
             111:   25(fvec3)   FAdd 105 110
             112:    7(fvec4)   Load 92
             113:    7(fvec4)   VectorShuffle 112 111 4 5 6 3
                                Store 92 113
             114:    7(fvec4)   Load 92
             115:   25(fvec3)   VectorShuffle 114 114 0 1 2
             117:    107(ptr)   AccessChain 28 116
             118:   25(fvec3)   Load 117
             119:   25(fvec3)   FMul 115 118
             120:    7(fvec4)   Load 92
             121:    7(fvec4)   VectorShuffle 120 119 0 4 5 6
                                Store 92 121
             123:    122(ptr)   AccessChain 92 54
             124:    6(float)   Load 123
             126:    6(float)   FMul 124 125
             128:    6(float)   FAdd 126 127
             129:    122(ptr)   AccessChain 59 39
                                Store 129 128
             132:     40(ptr)   AccessChain 28 38 131
             133:    6(float)   Load 132
             135:    6(float)   FMul 133 134
             136:    6(float)   FAdd 135 127
                                Store 130 136
             137:    122(ptr)   AccessChain 59 39
             138:    6(float)   Load 137
             139:    6(float)   Load 130
             140:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 138 139
             141:    122(ptr)   AccessChain 92 39
                                Store 141 140
             146:         143   Load 145
             147:    7(fvec4)   Load 92
             148:   25(fvec3)   VectorShuffle 147 147 0 2 3
             149:    7(fvec4)   ImageSampleImplicitLod 146 148
                                Store 92 149
             151:    7(fvec4)   Load 92
                                Store 150 151
                                Branch 53
             152:               Label
             153:    122(ptr)   AccessChain 150 39
                                Store 153 43
             154:    122(ptr)   AccessChain 150 54
                                Store 154 43
             155:    122(ptr)   AccessChain 150 131
                                Store 155 43
             157:    122(ptr)   AccessChain 150 156
                                Store 157 43
                                Branch 53
              53:             Label
             159:    7(fvec4) Load 150
             160:     31(ptr) AccessChain 28 65
             161:    7(fvec4) Load 160
             162:    6(float) Dot 159 161
             163:    122(ptr) AccessChain 158 39
                              Store 163 162
             164:    122(ptr) AccessChain 158 39
             165:    6(float) Load 164
             167:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 165 166 43
             168:    122(ptr) AccessChain 158 39
                              Store 168 167
             169:   25(fvec3) Load 158
             170:   25(fvec3) VectorShuffle 169 169 0 0 0
             172:     31(ptr) AccessChain 28 171
             173:    7(fvec4) Load 172
             174:   25(fvec3) VectorShuffle 173 173 0 1 2
             175:   25(fvec3) FMul 170 174
                              Store 158 175
             178:   25(fvec3) Load 177
             179:     31(ptr) AccessChain 28 70
             180:    7(fvec4) Load 179
             181:   25(fvec3) VectorShuffle 180 180 0 1 2
             182:    6(float) Dot 178 181
                              Store 176 182
             183:    6(float) Load 176
             184:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 183 166
                              Store 176 184
             185:    7(fvec4) Load 20
             186:   25(fvec3) VectorShuffle 185 185 0 1 2
             187:   25(fvec3) Load 158
             188:   25(fvec3) FMul 186 187
                              Store 158 188
             190:    7(fvec4) Load 20
             191:   25(fvec3) VectorShuffle 190 190 0 1 2
             193:   25(fvec3) Load 192
             194:   25(fvec3) FMul 191 193
                              Store 189 194
             197:   25(fvec3) Load 158
             198:    6(float) Load 176
             199:   25(fvec3) CompositeConstruct 198 198 198
             200:   25(fvec3) FMul 197 199
             201:   25(fvec3) Load 189
             202:   25(fvec3) FAdd 200 201
             203:    7(fvec4) Load 196
             204:    7(fvec4) VectorShuffle 203 202 4 5 6 3
                              Store 196 204
             205:    122(ptr) AccessChain 20 156
             206:    6(float) Load 205
             208:    207(ptr) AccessChain 196 156
                              Store 208 206
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Keywords set in this variant: DIRECTIONAL VERTEXLIGHT_ON 
-- Vertex shader for "d3d9":
// Stats: 71 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 8
Matrix4x4 unity_ObjectToWorld at 4
Matrix4x3 unity_WorldToObject at 12
Vector4 _MainTex_ST at 26
Vector4 unity_4LightAtten0 at 18
Vector4 unity_4LightPosX0 at 15
Vector4 unity_4LightPosY0 at 16
Vector4 unity_4LightPosZ0 at 17
Vector4 unity_LightColor[4] at 0
Vector4 unity_SHAb at 21
Vector4 unity_SHAg at 20
Vector4 unity_SHAr at 19
Vector4 unity_SHBb at 24
Vector4 unity_SHBg at 23
Vector4 unity_SHBr at 22
Vector4 unity_SHC at 25

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   float4 unity_4LightAtten0;
//   float4 unity_4LightPosX0;
//   float4 unity_4LightPosY0;
//   float4 unity_4LightPosZ0;
//   float4 unity_LightColor[8];
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   float4 unity_SHAb;
//   float4 unity_SHAg;
//   float4 unity_SHAr;
//   float4 unity_SHBb;
//   float4 unity_SHBg;
//   float4 unity_SHBr;
//   float4 unity_SHC;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_LightColor    c0       4
//   unity_ObjectToWorld c4       4
//   unity_MatrixVP      c8       4
//   unity_WorldToObject c12      3
//   unity_4LightPosX0   c15      1
//   unity_4LightPosY0   c16      1
//   unity_4LightPosZ0   c17      1
//   unity_4LightAtten0  c18      1
//   unity_SHAr          c19      1
//   unity_SHAg          c20      1
//   unity_SHAb          c21      1
//   unity_SHBr          c22      1
//   unity_SHBg          c23      1
//   unity_SHBb          c24      1
//   unity_SHC           c25      1
//   _MainTex_ST         c26      1
//

    vs_3_0
    def c27, 1, 0, 9.99999997e-007, 0.416666657
    def c28, 1.05499995, -0.0549999997, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    dcl_texcoord3 o4.xyz
    mad r0, v0.xyzx, c27.xxxy, c27.yyyx
    dp4 r1.x, c4, r0
    dp4 r1.y, c5, r0
    dp4 r1.z, c6, r0
    dp4 r1.w, c7, r0
    dp4 r6.x, c8, r1
    dp4 r6.y, c9, r1
    dp4 r6.z, c10, r1
    dp4 r6.w, c11, r1
    mad o1.xy, v2, c26, c26.zwzw
    mul r0.xyz, c13, v1.y
    mad r0.xyz, v1.x, c12, r0
    mad r0.xyz, v1.z, c14, r0
    nrm r1.xyz, r0
    mul r0.x, r1.y, r1.y
    mad r0.x, r1.x, r1.x, -r0.x
    mul r2, r1.yzzx, r1.xyzz
    dp4 r3.x, c22, r2
    dp4 r3.y, c23, r2
    dp4 r3.z, c24, r2
    mad r0.xyz, c25, r0.x, r3
    mov r1.w, c27.x
    dp4 r2.x, c19, r1
    dp4 r2.y, c20, r1
    dp4 r2.z, c21, r1
    add r0.xyz, r0, r2
    max r0.xyz, r0, c27.y
    log r2.x, r0.x
    log r2.y, r0.y
    log r2.z, r0.z
    mul r0.xyz, r2, c27.w
    exp r2.x, r0.x
    exp r2.y, r0.y
    exp r2.z, r0.z
    mad r0.xyz, r2, c28.x, c28.y
    max r0.xyz, r0, c27.y
    dp4 r2.y, c5, v0
    add r3, -r2.y, c16
    mul r4, r1.y, r3
    mul r3, r3, r3
    dp4 r2.x, c4, v0
    add r5, -r2.x, c15
    mad r4, r5, r1.x, r4
    mad r3, r5, r5, r3
    dp4 r2.z, c6, v0
    add r5, -r2.z, c17
    mov o3.xyz, r2
    mad r2, r5, r1.z, r4
    mov o2.xyz, r1
    mad r1, r5, r5, r3
    max r1, r1, c27.z
    rsq r3.x, r1.x
    rsq r3.y, r1.y
    rsq r3.z, r1.z
    rsq r3.w, r1.w
    mov r4.x, c27.x
    mad r1, r1, c18, r4.x
    mul r2, r2, r3
    max r2, r2, c27.y
    rcp r3.x, r1.x
    rcp r3.y, r1.y
    rcp r3.z, r1.z
    rcp r3.w, r1.w
    mul r1, r2, r3
    mul r2.xyz, r1.y, c1
    mad r2.xyz, c0, r1.x, r2
    mad r1.xyz, c2, r1.z, r2
    mad r1.xyz, c3, r1.w, r1
    add o4.xyz, r0, r1
    mad o0.xy, r6.w, c255, r6
    mov o0.zw, r6

// approximately 73 instruction slots used


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "d3d11":
// Stats: 54 math, 6 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_4LightPosX0 at 32
  Vector4 unity_4LightPosY0 at 48
  Vector4 unity_4LightPosZ0 at 64
  Vector4 unity_4LightAtten0 at 80
  Vector4 unity_LightColor[8] at 96
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_temps 6
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb2[3].xyzw
   4: mad r0.xyz, cb2[3].xyzx, v0.wwww, r0.xyzx
   5: mul r2.xyzw, r1.yyyy, cb3[18].xyzw
   6: mad r2.xyzw, cb3[17].xyzw, r1.xxxx, r2.xyzw
   7: mad r2.xyzw, cb3[19].xyzw, r1.zzzz, r2.xyzw
   8: mad o0.xyzw, cb3[20].xyzw, r1.wwww, r2.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: dp3 r1.x, v2.xyzx, cb2[4].xyzx
  11: dp3 r1.y, v2.xyzx, cb2[5].xyzx
  12: dp3 r1.z, v2.xyzx, cb2[6].xyzx
  13: dp3 r0.w, r1.xyzx, r1.xyzx
  14: rsq r0.w, r0.w
  15: mul r1.xyz, r0.wwww, r1.xyzx
  16: mov o2.xyz, r1.xyzx
  17: mov o3.xyz, r0.xyzx
  18: mul r0.w, r1.y, r1.y
  19: mad r0.w, r1.x, r1.x, -r0.w
  20: mul r2.xyzw, r1.yzzx, r1.xyzz
  21: dp4 r3.x, cb1[41].xyzw, r2.xyzw
  22: dp4 r3.y, cb1[42].xyzw, r2.xyzw
  23: dp4 r3.z, cb1[43].xyzw, r2.xyzw
  24: mad r2.xyz, cb1[44].xyzx, r0.wwww, r3.xyzx
  25: mov r1.w, l(1.000000)
  26: dp4 r3.x, cb1[38].xyzw, r1.xyzw
  27: dp4 r3.y, cb1[39].xyzw, r1.xyzw
  28: dp4 r3.z, cb1[40].xyzw, r1.xyzw
  29: add r2.xyz, r2.xyzx, r3.xyzx
  30: max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  31: log r2.xyz, r2.xyzx
  32: mul r2.xyz, r2.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  33: exp r2.xyz, r2.xyzx
  34: mad r2.xyz, r2.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  35: max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  36: add r3.xyzw, -r0.yyyy, cb1[3].xyzw
  37: mul r4.xyzw, r1.yyyy, r3.xyzw
  38: mul r3.xyzw, r3.xyzw, r3.xyzw
  39: add r5.xyzw, -r0.xxxx, cb1[2].xyzw
  40: add r0.xyzw, -r0.zzzz, cb1[4].xyzw
  41: mad r4.xyzw, r5.xyzw, r1.xxxx, r4.xyzw
  42: mad r1.xyzw, r0.xyzw, r1.zzzz, r4.xyzw
  43: mad r3.xyzw, r5.xyzw, r5.xyzw, r3.xyzw
  44: mad r0.xyzw, r0.xyzw, r0.xyzw, r3.xyzw
  45: max r0.xyzw, r0.xyzw, l(0.000001, 0.000001, 0.000001, 0.000001)
  46: rsq r3.xyzw, r0.xyzw
  47: mad r0.xyzw, r0.xyzw, cb1[5].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  48: div r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r0.xyzw
  49: mul r1.xyzw, r1.xyzw, r3.xyzw
  50: max r1.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  51: mul r0.xyzw, r0.xyzw, r1.xyzw
  52: mul r1.xyz, r0.yyyy, cb1[7].xyzx
  53: mad r1.xyz, cb1[6].xyzx, r0.xxxx, r1.xyzx
  54: mad r0.xyz, cb1[8].xyzx, r0.zzzz, r1.xyzx
  55: mad r0.xyz, cb1[9].xyzx, r0.wwww, r0.xyzx
  56: add o4.xyz, r2.xyzx, r0.xyzx
  57: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles":
// Stats: 7 math, 1 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = (unity_ObjectToWorld * _glesVertex).xyz;
  highp mat3 tmpvar_6;
  tmpvar_6[0] = unity_WorldToObject[0].xyz;
  tmpvar_6[1] = unity_WorldToObject[1].xyz;
  tmpvar_6[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_glesNormal * tmpvar_6));
  worldNormal_1 = tmpvar_7;
  tmpvar_2 = worldNormal_1;
  highp vec3 lightColor0_8;
  lightColor0_8 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_9;
  lightColor1_9 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_10;
  lightColor2_10 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_11;
  lightColor3_11 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_12;
  lightAttenSq_12 = unity_4LightAtten0;
  highp vec3 normal_13;
  normal_13 = worldNormal_1;
  highp vec3 col_14;
  highp vec4 ndotl_15;
  highp vec4 lengthSq_16;
  highp vec4 tmpvar_17;
  tmpvar_17 = (unity_4LightPosX0 - tmpvar_5.x);
  highp vec4 tmpvar_18;
  tmpvar_18 = (unity_4LightPosY0 - tmpvar_5.y);
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_4LightPosZ0 - tmpvar_5.z);
  lengthSq_16 = (tmpvar_17 * tmpvar_17);
  lengthSq_16 = (lengthSq_16 + (tmpvar_18 * tmpvar_18));
  lengthSq_16 = (lengthSq_16 + (tmpvar_19 * tmpvar_19));
  highp vec4 tmpvar_20;
  tmpvar_20 = max (lengthSq_16, vec4(1e-06, 1e-06, 1e-06, 1e-06));
  lengthSq_16 = tmpvar_20;
  ndotl_15 = (tmpvar_17 * normal_13.x);
  ndotl_15 = (ndotl_15 + (tmpvar_18 * normal_13.y));
  ndotl_15 = (ndotl_15 + (tmpvar_19 * normal_13.z));
  highp vec4 tmpvar_21;
  tmpvar_21 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_15 * inversesqrt(tmpvar_20)));
  ndotl_15 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22 = (tmpvar_21 * (1.0/((1.0 + 
    (tmpvar_20 * lightAttenSq_12)
  ))));
  col_14 = (lightColor0_8 * tmpvar_22.x);
  col_14 = (col_14 + (lightColor1_9 * tmpvar_22.y));
  col_14 = (col_14 + (lightColor2_10 * tmpvar_22.z));
  col_14 = (col_14 + (lightColor3_11 * tmpvar_22.w));
  tmpvar_3 = col_14;
  mediump vec3 normal_23;
  normal_23 = worldNormal_1;
  mediump vec3 ambient_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normal_23;
  mediump vec3 res_26;
  mediump vec3 x_27;
  x_27.x = dot (unity_SHAr, tmpvar_25);
  x_27.y = dot (unity_SHAg, tmpvar_25);
  x_27.z = dot (unity_SHAb, tmpvar_25);
  mediump vec3 x1_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normal_23.xyzz * normal_23.yzzx);
  x1_28.x = dot (unity_SHBr, tmpvar_29);
  x1_28.y = dot (unity_SHBg, tmpvar_29);
  x1_28.z = dot (unity_SHBb, tmpvar_29);
  res_26 = (x_27 + (x1_28 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )));
  mediump vec3 tmpvar_30;
  tmpvar_30 = max (((1.055 * 
    pow (max (res_26, vec3(0.0, 0.0, 0.0)), vec3(0.4166667, 0.4166667, 0.4166667))
  ) - 0.055), vec3(0.0, 0.0, 0.0));
  res_26 = tmpvar_30;
  ambient_24 = (tmpvar_3 + max (vec3(0.0, 0.0, 0.0), tmpvar_30));
  tmpvar_3 = ambient_24;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = ambient_24;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 lightDir_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  lightDir_4 = tmpvar_5;
  tmpvar_3 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_6;
  tmpvar_6 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_4;
  lowp vec4 c_7;
  lowp vec4 c_8;
  lowp float diff_9;
  mediump float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_3, tmpvar_2));
  diff_9 = tmpvar_10;
  c_8.xyz = ((tmpvar_6.xyz * tmpvar_1) * diff_9);
  c_8.w = tmpvar_6.w;
  c_7.w = c_8.w;
  c_7.xyz = (c_8.xyz + (tmpvar_6.xyz * xlv_TEXCOORD3));
  gl_FragData[0] = c_7;
}


#endif


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "d3d11_9x":
// Stats: 54 math, 6 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_4LightPosX0 at 32
  Vector4 unity_4LightPosY0 at 48
  Vector4 unity_4LightPosZ0 at 64
  Vector4 unity_4LightAtten0 at 80
  Vector4 unity_LightColor[8] at 96
  Vector4 unity_SHAr at 608
  Vector4 unity_SHAg at 624
  Vector4 unity_SHAb at 640
  Vector4 unity_SHBr at 656
  Vector4 unity_SHBg at 672
  Vector4 unity_SHBb at 688
  Vector4 unity_SHC at 704
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             5         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             2         8  ( FLT, FLT, FLT, FLT)
// c10        cb1            38         7  ( FLT, FLT, FLT, FLT)
// c17        cb2             0         7  ( FLT, FLT, FLT, FLT)
// c24        cb3            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          def c28, 9.99999997e-007, 0, 1, 0.416666657
          def c29, 1.05499995, -0.0549999997, 0, 0
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     dp3 r0.x, v2, c21
   2:     dp3 r0.y, v2, c22
   3:     dp3 r0.z, v2, c23
   4:     nrm r1.xyz, r0
   7:     mul r0.x, r1.y, r1.y
   8:     mad r0.x, r1.x, r1.x, -r0.x
   9:     mul r2, r1.yzzx, r1.xyzz
  10:     dp4 r3.x, c13, r2
  11:     dp4 r3.y, c14, r2
  12:     dp4 r3.z, c15, r2
  13:     mad r0.xyz, c16, r0.x, r3
  14:     mov r1.w, c28.z
  15:     dp4 r2.x, c10, r1
  16:     dp4 r2.y, c11, r1
  17:     dp4 r2.z, c12, r1
  18:     add r0.xyz, r0, r2
  19:     max r0.xyz, r0, c28.y
  20:     mov r0.w, c28.w
  21:     lit r2, r0.xxww
  22:     mov r2.x, r2.z
  23:     lit r3, r0.yyww
  24:     lit r0, r0.zzww
  25:     mov r2.z, r0.z
  26:     mov r2.y, r3.z
  27:     mad r0.xyz, r2, c29.x, c29.y
  28:     max r0.xyz, r0, c28.y
  29:     mul r2, v0.y, c18
  30:     mad r2, c17, v0.x, r2
  31:     mad r2, c19, v0.z, r2
  32:     mad r3.xyz, c20, v0.w, r2
  33:     add r2, r2, c20
  34:     add r4, -r3.y, c3
  35:     mul r5, r1.y, r4
  36:     mul r4, r4, r4
  37:     add r6, -r3.x, c2
  38:     mad r5, r6, r1.x, r5
  39:     mad r4, r6, r6, r4
  40:     add r6, -r3.z, c4
  41:     mov oT2.xyz, r3
  42:     mad r3, r6, r1.z, r5
  43:     mov oT1.xyz, r1
  44:     mad r1, r6, r6, r4
  45:     max r1, r1, c28.x
  46:     rsq r4.x, r1.x
  47:     rsq r4.y, r1.y
  48:     rsq r4.z, r1.z
  49:     rsq r4.w, r1.w
  50:     mov r5.z, c28.z
  51:     mad r1, r1, c5, r5.z
  52:     mul r3, r3, r4
  53:     max r3, r3, c28.y
  54:     rcp r4.x, r1.x
  55:     rcp r4.y, r1.y
  56:     rcp r4.z, r1.z
  57:     rcp r4.w, r1.w
  58:     mul r1, r3, r4
  59:     mul r3.xyz, r1.y, c7
  60:     mad r3.xyz, c6, r1.x, r3
  61:     mad r1.xyz, c8, r1.z, r3
  62:     mad r1.xyz, c9, r1.w, r1
  63:     add oT3.xyz, r0, r1
  64:     mul r0, r2.y, c25
  65:     mad r0, c24, r2.x, r0
  66:     mad r0, c26, r2.z, r0
  67:     mad r0, c27, r2.w, r0
  68:     mad oPos.xy, r0.w, c0, r0
  69:     mov oPos.zw, r0

// approximately 70 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[45], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_output o4.xyz
      dcl_temps 6
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb2[3].xyzw
   4: mad r0.xyz, cb2[3].xyzx, v0.wwww, r0.xyzx
   5: mul r2.xyzw, r1.yyyy, cb3[18].xyzw
   6: mad r2.xyzw, cb3[17].xyzw, r1.xxxx, r2.xyzw
   7: mad r2.xyzw, cb3[19].xyzw, r1.zzzz, r2.xyzw
   8: mad o0.xyzw, cb3[20].xyzw, r1.wwww, r2.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: dp3 r1.x, v2.xyzx, cb2[4].xyzx
  11: dp3 r1.y, v2.xyzx, cb2[5].xyzx
  12: dp3 r1.z, v2.xyzx, cb2[6].xyzx
  13: dp3 r0.w, r1.xyzx, r1.xyzx
  14: rsq r0.w, r0.w
  15: mul r1.xyz, r0.wwww, r1.xyzx
  16: mov o2.xyz, r1.xyzx
  17: mov o3.xyz, r0.xyzx
  18: mul r0.w, r1.y, r1.y
  19: mad r0.w, r1.x, r1.x, -r0.w
  20: mul r2.xyzw, r1.yzzx, r1.xyzz
  21: dp4 r3.x, cb1[41].xyzw, r2.xyzw
  22: dp4 r3.y, cb1[42].xyzw, r2.xyzw
  23: dp4 r3.z, cb1[43].xyzw, r2.xyzw
  24: mad r2.xyz, cb1[44].xyzx, r0.wwww, r3.xyzx
  25: mov r1.w, l(1.000000)
  26: dp4 r3.x, cb1[38].xyzw, r1.xyzw
  27: dp4 r3.y, cb1[39].xyzw, r1.xyzw
  28: dp4 r3.z, cb1[40].xyzw, r1.xyzw
  29: add r2.xyz, r2.xyzx, r3.xyzx
  30: max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  31: log r2.xyz, r2.xyzx
  32: mul r2.xyz, r2.xyzx, l(0.416667, 0.416667, 0.416667, 0.000000)
  33: exp r2.xyz, r2.xyzx
  34: mad r2.xyz, r2.xyzx, l(1.055000, 1.055000, 1.055000, 0.000000), l(-0.055000, -0.055000, -0.055000, 0.000000)
  35: max r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  36: add r3.xyzw, -r0.yyyy, cb1[3].xyzw
  37: mul r4.xyzw, r1.yyyy, r3.xyzw
  38: mul r3.xyzw, r3.xyzw, r3.xyzw
  39: add r5.xyzw, -r0.xxxx, cb1[2].xyzw
  40: add r0.xyzw, -r0.zzzz, cb1[4].xyzw
  41: mad r4.xyzw, r5.xyzw, r1.xxxx, r4.xyzw
  42: mad r1.xyzw, r0.xyzw, r1.zzzz, r4.xyzw
  43: mad r3.xyzw, r5.xyzw, r5.xyzw, r3.xyzw
  44: mad r0.xyzw, r0.xyzw, r0.xyzw, r3.xyzw
  45: max r0.xyzw, r0.xyzw, l(0.000001, 0.000001, 0.000001, 0.000001)
  46: rsq r3.xyzw, r0.xyzw
  47: mad r0.xyzw, r0.xyzw, cb1[5].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  48: div r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r0.xyzw
  49: mul r1.xyzw, r1.xyzw, r3.xyzw
  50: max r1.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  51: mul r0.xyzw, r0.xyzw, r1.xyzw
  52: mul r1.xyz, r0.yyyy, cb1[7].xyzx
  53: mad r1.xyz, cb1[6].xyzx, r0.xxxx, r1.xyzx
  54: mad r0.xyz, cb1[8].xyzx, r0.zzzz, r1.xyzx
  55: mad r0.xyz, cb1[9].xyzx, r0.wwww, r0.xyzx
  56: add o4.xyz, r2.xyzx, r0.xyzx
  57: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat21;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;
    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;
    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;
    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);
    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
    u_xlat1.w = 1.0;
    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);
    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);
    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);
    u_xlat16_5.xyz = u_xlat16_5.xyz + u_xlat16_6.xyz;
    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat1.xyz = log2(u_xlat16_5.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat1.xyz = exp2(u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
    vs_TEXCOORD3.xyz = u_xlat0.xyz + u_xlat1.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _Color;
    u_xlat16_3.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    u_xlat16_2.xyz = u_xlat16_1.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.w = u_xlat16_1.w;
    SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_2.xyz;
    return;
}

#endif


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (512 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 304
  Matrix4x4 unity_WorldToObject at 368
  Matrix4x4 unity_MatrixVP at 432
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_LightColor[8] at 64
  Vector4 unity_SHAr at 192
  Vector4 unity_SHAg at 208
  Vector4 unity_SHAb at 224
  Vector4 unity_SHBr at 240
  Vector4 unity_SHBg at 256
  Vector4 unity_SHBb at 272
  Vector4 unity_SHC at 288
  Vector4 _MainTex_ST at 496
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat18;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    u_xlat1.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = u_xlat1.xyz;
    output.TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = fma(u_xlat1.x, u_xlat1.x, (-u_xlat18));
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(Globals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(Globals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(Globals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = fma(Globals.unity_SHC.xyz, float3(u_xlat18), u_xlat3.xyz);
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(Globals.unity_SHAr, u_xlat1);
    u_xlat3.y = dot(Globals.unity_SHAg, u_xlat1);
    u_xlat3.z = dot(Globals.unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat2.xyz = max(u_xlat2.xyz, float3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + Globals.unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + Globals.unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + Globals.unity_4LightPosZ0;
    u_xlat4 = fma(u_xlat5, u_xlat1.xxxx, u_xlat4);
    u_xlat1 = fma(u_xlat0, u_xlat1.zzzz, u_xlat4);
    u_xlat3 = fma(u_xlat5, u_xlat5, u_xlat3);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat3);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, Globals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * Globals.unity_LightColor[1].xyz;
    u_xlat1.xyz = fma(Globals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(Globals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat0.xyz = fma(Globals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    return output;
}


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	vec4 unity_4LightAtten0;
uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_SHBr;
uniform 	vec4 unity_SHBg;
uniform 	vec4 unity_SHBb;
uniform 	vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat18;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz;
    u_xlat18 = u_xlat1.y * u_xlat1.y;
    u_xlat18 = u_xlat1.x * u_xlat1.x + (-u_xlat18);
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(unity_SHBr, u_xlat2);
    u_xlat3.y = dot(unity_SHBg, u_xlat2);
    u_xlat3.z = dot(unity_SHBb, u_xlat2);
    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat1.w = 1.0;
    u_xlat3.x = dot(unity_SHAr, u_xlat1);
    u_xlat3.y = dot(unity_SHAg, u_xlat1);
    u_xlat3.z = dot(unity_SHAb, u_xlat1);
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat2.xyz = log2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat2.xyz = exp2(u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat5 = (-u_xlat0.xxxx) + unity_4LightPosX0;
    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
    u_xlat4 = u_xlat5 * u_xlat1.xxxx + u_xlat4;
    u_xlat1 = u_xlat0 * u_xlat1.zzzz + u_xlat4;
    u_xlat3 = u_xlat5 * u_xlat5 + u_xlat3;
    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
    u_xlat0 = max(u_xlat0, vec4(9.99999997e-007, 9.99999997e-007, 9.99999997e-007, 9.99999997e-007));
    u_xlat3 = inversesqrt(u_xlat0);
    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
    vs_TEXCOORD3.xyz = u_xlat2.xyz + u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat2;
vec3 u_xlat4;
float u_xlat10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat4.x, u_xlat2);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
    u_xlat10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vs_TEXCOORD3.xyz;
    SV_Target0.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif


-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
u_xlatb1", used in: Fragment 

Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 1, used in: Fragment 

Constant Buffer "PGlobals3507784793" (176 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Vector4 _Color at 160
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals3507784793" (512 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 432
  Matrix4x4 unity_ObjectToWorld at 304
  Matrix4x4 unity_WorldToObject at 368
  Vector4 _MainTex_ST at 496
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_LightColor[4] at 64
  Vector4 unity_SHAb at 224
  Vector4 unity_SHAg at 208
  Vector4 unity_SHAr at 192
  Vector4 unity_SHBb at 272
  Vector4 unity_SHBg at 256
  Vector4 unity_SHBr at 240
  Vector4 unity_SHC at 288
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 398

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 90 102 103 116 155 158 386
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              Decorate 19 ArrayStride 16
                              Decorate 20 ArrayStride 16
                              MemberDecorate 21 0 Offset 0
                              MemberDecorate 21 1 Offset 16
                              MemberDecorate 21 2 Offset 32
                              MemberDecorate 21 3 RelaxedPrecision
                              MemberDecorate 21 3 Offset 48
                              MemberDecorate 21 4 RelaxedPrecision
                              MemberDecorate 21 4 Offset 64
                              MemberDecorate 21 5 RelaxedPrecision
                              MemberDecorate 21 5 Offset 192
                              MemberDecorate 21 6 RelaxedPrecision
                              MemberDecorate 21 6 Offset 208
                              MemberDecorate 21 7 RelaxedPrecision
                              MemberDecorate 21 7 Offset 224
                              MemberDecorate 21 8 RelaxedPrecision
                              MemberDecorate 21 8 Offset 240
                              MemberDecorate 21 9 RelaxedPrecision
                              MemberDecorate 21 9 Offset 256
                              MemberDecorate 21 10 RelaxedPrecision
                              MemberDecorate 21 10 Offset 272
                              MemberDecorate 21 11 RelaxedPrecision
                              MemberDecorate 21 11 Offset 288
                              MemberDecorate 21 12 Offset 304
                              MemberDecorate 21 13 Offset 368
                              MemberDecorate 21 14 Offset 432
                              MemberDecorate 21 15 Offset 496
                              Decorate 21 Block
                              Decorate 23 DescriptorSet 1
                              Decorate 23 Binding 1
                              MemberDecorate 88 0 BuiltIn Position
                              MemberDecorate 88 1 BuiltIn PointSize
                              MemberDecorate 88 2 BuiltIn ClipDistance
                              Decorate 88 Block
                              Decorate 102 Location 0
                              Decorate 103 Location 2
                              Decorate 116 Location 1
                              Decorate 155 RelaxedPrecision
                              Decorate 155 Location 1
                              Decorate 158 Location 2
                              Decorate 218 RelaxedPrecision
                              Decorate 239 RelaxedPrecision
                              Decorate 240 RelaxedPrecision
                              Decorate 245 RelaxedPrecision
                              Decorate 246 RelaxedPrecision
                              Decorate 256 RelaxedPrecision
                              Decorate 257 RelaxedPrecision
                              Decorate 267 RelaxedPrecision
                              Decorate 268 RelaxedPrecision
                              Decorate 278 RelaxedPrecision
                              Decorate 291 RelaxedPrecision
                              Decorate 292 RelaxedPrecision
                              Decorate 295 RelaxedPrecision
                              Decorate 301 RelaxedPrecision
                              Decorate 304 RelaxedPrecision
                              Decorate 305 RelaxedPrecision
                              Decorate 306 RelaxedPrecision
                              Decorate 310 RelaxedPrecision
                              Decorate 311 RelaxedPrecision
                              Decorate 312 RelaxedPrecision
                              Decorate 316 RelaxedPrecision
                              Decorate 317 RelaxedPrecision
                              Decorate 318 RelaxedPrecision
                              Decorate 322 RelaxedPrecision
                              Decorate 323 RelaxedPrecision
                              Decorate 324 RelaxedPrecision
                              Decorate 325 RelaxedPrecision
                              Decorate 326 RelaxedPrecision
                              Decorate 327 RelaxedPrecision
                              Decorate 328 RelaxedPrecision
                              Decorate 333 RelaxedPrecision
                              Decorate 339 RelaxedPrecision
                              Decorate 345 RelaxedPrecision
                              Decorate 349 RelaxedPrecision
                              Decorate 350 RelaxedPrecision
                              Decorate 351 RelaxedPrecision
                              Decorate 352 RelaxedPrecision
                              Decorate 354 RelaxedPrecision
                              Decorate 355 RelaxedPrecision
                              Decorate 356 RelaxedPrecision
                              Decorate 386 RelaxedPrecision
                              Decorate 386 Location 3
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 8
              16:             TypeArray 7(fvec4) 15
              17:     14(int) Constant 4
              18:             TypeArray 7(fvec4) 17
              19:             TypeArray 7(fvec4) 17
              20:             TypeArray 7(fvec4) 17
              21:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 16 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 7(fvec4) 18 19 20 7(fvec4)
              22:             TypePointer Uniform 21(struct)
              23:     22(ptr) Variable Uniform
              24:             TypeInt 32 1
              25:     24(int) Constant 12
              26:     24(int) Constant 1
              27:             TypePointer Uniform 7(fvec4)
              31:     24(int) Constant 0
              39:     24(int) Constant 2
              47:      8(ptr) Variable Private
              49:     24(int) Constant 3
              53:             TypeVector 6(float) 3
              65:      8(ptr) Variable Private
              68:     24(int) Constant 14
              86:     14(int) Constant 1
              87:             TypeArray 6(float) 86
              88:             TypeStruct 7(fvec4) 6(float) 87
              89:             TypePointer Output 88(struct)
              90:     89(ptr) Variable Output
              98:             TypePointer Output 7(fvec4)
             100:             TypeVector 6(float) 2
             101:             TypePointer Output 100(fvec2)
             102:    101(ptr) Variable Output
             103:     10(ptr) Variable Input
             106:     24(int) Constant 15
             115:             TypePointer Input 53(fvec3)
             116:    115(ptr) Variable Input
             118:     24(int) Constant 13
             123:     14(int) Constant 0
             124:             TypePointer Private 6(float)
             137:     14(int) Constant 2
             139:    124(ptr) Variable Private
             154:             TypePointer Output 53(fvec3)
             155:    154(ptr) Variable Output
             158:    154(ptr) Variable Output
             167:      8(ptr) Variable Private
             180:      8(ptr) Variable Private
             211:    6(float) Constant 897988541
             212:    7(fvec4) ConstantComposite 211 211 211 211
             220:    6(float) Constant 1065353216
             221:    7(fvec4) ConstantComposite 220 220 220 220
             229:    6(float) Constant 0
             230:    7(fvec4) ConstantComposite 229 229 229 229
             237:     24(int) Constant 4
             277:             TypePointer Private 53(fvec3)
             278:    277(ptr) Variable Private
             295:      8(ptr) Variable Private
             301:    277(ptr) Variable Private
             302:     24(int) Constant 8
             308:     24(int) Constant 9
             314:     24(int) Constant 10
             320:     24(int) Constant 11
             329:     14(int) Constant 3
             331:     24(int) Constant 5
             337:     24(int) Constant 6
             343:     24(int) Constant 7
             353:   53(fvec3) ConstantComposite 229 229 229
             361:    6(float) Constant 1054168405
             362:   53(fvec3) ConstantComposite 361 361 361
             373:    6(float) Constant 1065814589
             374:   53(fvec3) ConstantComposite 373 373 373
             376:    6(float) Constant 3177269166
             377:   53(fvec3) ConstantComposite 376 376 376
             386:    154(ptr) Variable Output
             392:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              28:     27(ptr) AccessChain 23 25 26
              29:    7(fvec4) Load 28
              30:    7(fvec4) FMul 13 29
                              Store 9 30
              32:     27(ptr) AccessChain 23 25 31
              33:    7(fvec4) Load 32
              34:    7(fvec4) Load 11
              35:    7(fvec4) VectorShuffle 34 34 0 0 0 0
              36:    7(fvec4) FMul 33 35
              37:    7(fvec4) Load 9
              38:    7(fvec4) FAdd 36 37
                              Store 9 38
              40:     27(ptr) AccessChain 23 25 39
              41:    7(fvec4) Load 40
              42:    7(fvec4) Load 11
              43:    7(fvec4) VectorShuffle 42 42 2 2 2 2
              44:    7(fvec4) FMul 41 43
              45:    7(fvec4) Load 9
              46:    7(fvec4) FAdd 44 45
                              Store 9 46
              48:    7(fvec4) Load 9
              50:     27(ptr) AccessChain 23 25 49
              51:    7(fvec4) Load 50
              52:    7(fvec4) FAdd 48 51
                              Store 47 52
              54:     27(ptr) AccessChain 23 25 49
              55:    7(fvec4) Load 54
              56:   53(fvec3) VectorShuffle 55 55 0 1 2
              57:    7(fvec4) Load 11
              58:   53(fvec3) VectorShuffle 57 57 3 3 3
              59:   53(fvec3) FMul 56 58
              60:    7(fvec4) Load 9
              61:   53(fvec3) VectorShuffle 60 60 0 1 2
              62:   53(fvec3) FAdd 59 61
              63:    7(fvec4) Load 9
              64:    7(fvec4) VectorShuffle 63 62 4 5 6 3
                              Store 9 64
              66:    7(fvec4) Load 47
              67:    7(fvec4) VectorShuffle 66 66 1 1 1 1
              69:     27(ptr) AccessChain 23 68 26
              70:    7(fvec4) Load 69
              71:    7(fvec4) FMul 67 70
                              Store 65 71
              72:     27(ptr) AccessChain 23 68 31
              73:    7(fvec4) Load 72
              74:    7(fvec4) Load 47
              75:    7(fvec4) VectorShuffle 74 74 0 0 0 0
              76:    7(fvec4) FMul 73 75
              77:    7(fvec4) Load 65
              78:    7(fvec4) FAdd 76 77
                              Store 65 78
              79:     27(ptr) AccessChain 23 68 39
              80:    7(fvec4) Load 79
              81:    7(fvec4) Load 47
              82:    7(fvec4) VectorShuffle 81 81 2 2 2 2
              83:    7(fvec4) FMul 80 82
              84:    7(fvec4) Load 65
              85:    7(fvec4) FAdd 83 84
                              Store 65 85
              91:     27(ptr) AccessChain 23 68 49
              92:    7(fvec4) Load 91
              93:    7(fvec4) Load 47
              94:    7(fvec4) VectorShuffle 93 93 3 3 3 3
              95:    7(fvec4) FMul 92 94
              96:    7(fvec4) Load 65
              97:    7(fvec4) FAdd 95 96
              99:     98(ptr) AccessChain 90 31
                              Store 99 97
             104:    7(fvec4) Load 103
             105:  100(fvec2) VectorShuffle 104 104 0 1
             107:     27(ptr) AccessChain 23 106
             108:    7(fvec4) Load 107
             109:  100(fvec2) VectorShuffle 108 108 0 1
             110:  100(fvec2) FMul 105 109
             111:     27(ptr) AccessChain 23 106
             112:    7(fvec4) Load 111
             113:  100(fvec2) VectorShuffle 112 112 2 3
             114:  100(fvec2) FAdd 110 113
                              Store 102 114
             117:   53(fvec3) Load 116
             119:     27(ptr) AccessChain 23 118 31
             120:    7(fvec4) Load 119
             121:   53(fvec3) VectorShuffle 120 120 0 1 2
             122:    6(float) Dot 117 121
             125:    124(ptr) AccessChain 47 123
                              Store 125 122
             126:   53(fvec3) Load 116
             127:     27(ptr) AccessChain 23 118 26
             128:    7(fvec4) Load 127
             129:   53(fvec3) VectorShuffle 128 128 0 1 2
             130:    6(float) Dot 126 129
             131:    124(ptr) AccessChain 47 86
                              Store 131 130
             132:   53(fvec3) Load 116
             133:     27(ptr) AccessChain 23 118 39
             134:    7(fvec4) Load 133
             135:   53(fvec3) VectorShuffle 134 134 0 1 2
             136:    6(float) Dot 132 135
             138:    124(ptr) AccessChain 47 137
                              Store 138 136
             140:    7(fvec4) Load 47
             141:   53(fvec3) VectorShuffle 140 140 0 1 2
             142:    7(fvec4) Load 47
             143:   53(fvec3) VectorShuffle 142 142 0 1 2
             144:    6(float) Dot 141 143
                              Store 139 144
             145:    6(float) Load 139
             146:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 145
                              Store 139 146
             147:    6(float) Load 139
             148:   53(fvec3) CompositeConstruct 147 147 147
             149:    7(fvec4) Load 47
             150:   53(fvec3) VectorShuffle 149 149 0 1 2
             151:   53(fvec3) FMul 148 150
             152:    7(fvec4) Load 47
             153:    7(fvec4) VectorShuffle 152 151 4 5 6 3
                              Store 47 153
             156:    7(fvec4) Load 47
             157:   53(fvec3) VectorShuffle 156 156 0 1 2
                              Store 155 157
             159:    7(fvec4) Load 9
             160:   53(fvec3) VectorShuffle 159 159 0 1 2
                              Store 158 160
             161:    7(fvec4) Load 9
             162:    7(fvec4) VectorShuffle 161 161 0 0 0 0
             163:    7(fvec4) FNegate 162
             164:     27(ptr) AccessChain 23 31
             165:    7(fvec4) Load 164
             166:    7(fvec4) FAdd 163 165
                              Store 65 166
             168:    7(fvec4) Load 9
             169:    7(fvec4) VectorShuffle 168 168 1 1 1 1
             170:    7(fvec4) FNegate 169
             171:     27(ptr) AccessChain 23 26
             172:    7(fvec4) Load 171
             173:    7(fvec4) FAdd 170 172
                              Store 167 173
             174:    7(fvec4) Load 9
             175:    7(fvec4) VectorShuffle 174 174 2 2 2 2
             176:    7(fvec4) FNegate 175
             177:     27(ptr) AccessChain 23 39
             178:    7(fvec4) Load 177
             179:    7(fvec4) FAdd 176 178
                              Store 9 179
             181:    7(fvec4) Load 47
             182:    7(fvec4) VectorShuffle 181 181 1 1 1 1
             183:    7(fvec4) Load 167
             184:    7(fvec4) FMul 182 183
                              Store 180 184
             185:    7(fvec4) Load 167
             186:    7(fvec4) Load 167
             187:    7(fvec4) FMul 185 186
                              Store 167 187
             188:    7(fvec4) Load 65
             189:    7(fvec4) Load 65
             190:    7(fvec4) FMul 188 189
             191:    7(fvec4) Load 167
             192:    7(fvec4) FAdd 190 191
                              Store 167 192
             193:    7(fvec4) Load 65
             194:    7(fvec4) Load 47
             195:    7(fvec4) VectorShuffle 194 194 0 0 0 0
             196:    7(fvec4) FMul 193 195
             197:    7(fvec4) Load 180
             198:    7(fvec4) FAdd 196 197
                              Store 65 198
             199:    7(fvec4) Load 9
             200:    7(fvec4) Load 47
             201:    7(fvec4) VectorShuffle 200 200 2 2 2 2
             202:    7(fvec4) FMul 199 201
             203:    7(fvec4) Load 65
             204:    7(fvec4) FAdd 202 203
                              Store 65 204
             205:    7(fvec4) Load 9
             206:    7(fvec4) Load 9
             207:    7(fvec4) FMul 205 206
             208:    7(fvec4) Load 167
             209:    7(fvec4) FAdd 207 208
                              Store 9 209
             210:    7(fvec4) Load 9
             213:    7(fvec4) ExtInst 1(GLSL.std.450) 40(FMax) 210 212
                              Store 9 213
             214:    7(fvec4) Load 9
             215:    7(fvec4) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 214
                              Store 167 215
             216:    7(fvec4) Load 9
             217:     27(ptr) AccessChain 23 49
             218:    7(fvec4) Load 217
             219:    7(fvec4) FMul 216 218
             222:    7(fvec4) FAdd 219 221
                              Store 9 222
             223:    7(fvec4) Load 9
             224:    7(fvec4) FDiv 221 223
                              Store 9 224
             225:    7(fvec4) Load 65
             226:    7(fvec4) Load 167
             227:    7(fvec4) FMul 225 226
                              Store 65 227
             228:    7(fvec4) Load 65
             231:    7(fvec4) ExtInst 1(GLSL.std.450) 40(FMax) 228 230
                              Store 65 231
             232:    7(fvec4) Load 9
             233:    7(fvec4) Load 65
             234:    7(fvec4) FMul 232 233
                              Store 9 234
             235:    7(fvec4) Load 9
             236:   53(fvec3) VectorShuffle 235 235 1 1 1
             238:     27(ptr) AccessChain 23 237 26
             239:    7(fvec4) Load 238
             240:   53(fvec3) VectorShuffle 239 239 0 1 2
             241:   53(fvec3) FMul 236 240
             242:    7(fvec4) Load 65
             243:    7(fvec4) VectorShuffle 242 241 4 5 6 3
                              Store 65 243
             244:     27(ptr) AccessChain 23 237 31
             245:    7(fvec4) Load 244
             246:   53(fvec3) VectorShuffle 245 245 0 1 2
             247:    7(fvec4) Load 9
             248:   53(fvec3) VectorShuffle 247 247 0 0 0
             249:   53(fvec3) FMul 246 248
             250:    7(fvec4) Load 65
             251:   53(fvec3) VectorShuffle 250 250 0 1 2
             252:   53(fvec3) FAdd 249 251
             253:    7(fvec4) Load 65
             254:    7(fvec4) VectorShuffle 253 252 4 5 6 3
                              Store 65 254
             255:     27(ptr) AccessChain 23 237 39
             256:    7(fvec4) Load 255
             257:   53(fvec3) VectorShuffle 256 256 0 1 2
             258:    7(fvec4) Load 9
             259:   53(fvec3) VectorShuffle 258 258 2 2 2
             260:   53(fvec3) FMul 257 259
             261:    7(fvec4) Load 65
             262:   53(fvec3) VectorShuffle 261 261 0 1 2
             263:   53(fvec3) FAdd 260 262
             264:    7(fvec4) Load 9
             265:    7(fvec4) VectorShuffle 264 263 4 5 6 3
                              Store 9 265
             266:     27(ptr) AccessChain 23 237 49
             267:    7(fvec4) Load 266
             268:   53(fvec3) VectorShuffle 267 267 0 1 2
             269:    7(fvec4) Load 9
             270:   53(fvec3) VectorShuffle 269 269 3 3 3
             271:   53(fvec3) FMul 268 270
             272:    7(fvec4) Load 9
             273:   53(fvec3) VectorShuffle 272 272 0 1 2
             274:   53(fvec3) FAdd 271 273
             275:    7(fvec4) Load 9
             276:    7(fvec4) VectorShuffle 275 274 4 5 6 3
                              Store 9 276
             279:    124(ptr) AccessChain 47 86
             280:    6(float) Load 279
             281:    124(ptr) AccessChain 47 86
             282:    6(float) Load 281
             283:    6(float) FMul 280 282
             284:    124(ptr) AccessChain 278 123
                              Store 284 283
             285:    124(ptr) AccessChain 47 123
             286:    6(float) Load 285
             287:    124(ptr) AccessChain 47 123
             288:    6(float) Load 287
             289:    6(float) FMul 286 288
             290:    124(ptr) AccessChain 278 123
             291:    6(float) Load 290
             292:    6(float) FNegate 291
             293:    6(float) FAdd 289 292
             294:    124(ptr) AccessChain 278 123
                              Store 294 293
             296:    7(fvec4) Load 47
             297:    7(fvec4) VectorShuffle 296 296 1 2 2 0
             298:    7(fvec4) Load 47
             299:    7(fvec4) VectorShuffle 298 298 0 1 2 2
             300:    7(fvec4) FMul 297 299
                              Store 295 300
             303:     27(ptr) AccessChain 23 302
             304:    7(fvec4) Load 303
             305:    7(fvec4) Load 295
             306:    6(float) Dot 304 305
             307:    124(ptr) AccessChain 301 123
                              Store 307 306
             309:     27(ptr) AccessChain 23 308
             310:    7(fvec4) Load 309
             311:    7(fvec4) Load 295
             312:    6(float) Dot 310 311
             313:    124(ptr) AccessChain 301 86
                              Store 313 312
             315:     27(ptr) AccessChain 23 314
             316:    7(fvec4) Load 315
             317:    7(fvec4) Load 295
             318:    6(float) Dot 316 317
             319:    124(ptr) AccessChain 301 137
                              Store 319 318
             321:     27(ptr) AccessChain 23 320
             322:    7(fvec4) Load 321
             323:   53(fvec3) VectorShuffle 322 322 0 1 2
             324:   53(fvec3) Load 278
             325:   53(fvec3) VectorShuffle 324 324 0 0 0
             326:   53(fvec3) FMul 323 325
             327:   53(fvec3) Load 301
             328:   53(fvec3) FAdd 326 327
                              Store 278 328
             330:    124(ptr) AccessChain 47 329
                              Store 330 220
             332:     27(ptr) AccessChain 23 331
             333:    7(fvec4) Load 332
             334:    7(fvec4) Load 47
             335:    6(float) Dot 333 334
             336:    124(ptr) AccessChain 301 123
                              Store 336 335
             338:     27(ptr) AccessChain 23 337
             339:    7(fvec4) Load 338
             340:    7(fvec4) Load 47
             341:    6(float) Dot 339 340
             342:    124(ptr) AccessChain 301 86
                              Store 342 341
             344:     27(ptr) AccessChain 23 343
             345:    7(fvec4) Load 344
             346:    7(fvec4) Load 47
             347:    6(float) Dot 345 346
             348:    124(ptr) AccessChain 301 137
                              Store 348 347
             349:   53(fvec3) Load 278
             350:   53(fvec3) Load 301
             351:   53(fvec3) FAdd 349 350
                              Store 278 351
             352:   53(fvec3) Load 278
             354:   53(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 352 353
                              Store 278 354
             355:   53(fvec3) Load 278
             356:   53(fvec3) ExtInst 1(GLSL.std.450) 30(Log2) 355
             357:    7(fvec4) Load 47
             358:    7(fvec4) VectorShuffle 357 356 4 5 6 3
                              Store 47 358
             359:    7(fvec4) Load 47
             360:   53(fvec3) VectorShuffle 359 359 0 1 2
             363:   53(fvec3) FMul 360 362
             364:    7(fvec4) Load 47
             365:    7(fvec4) VectorShuffle 364 363 4 5 6 3
                              Store 47 365
             366:    7(fvec4) Load 47
             367:   53(fvec3) VectorShuffle 366 366 0 1 2
             368:   53(fvec3) ExtInst 1(GLSL.std.450) 29(Exp2) 367
             369:    7(fvec4) Load 47
             370:    7(fvec4) VectorShuffle 369 368 4 5 6 3
                              Store 47 370
             371:    7(fvec4) Load 47
             372:   53(fvec3) VectorShuffle 371 371 0 1 2
             375:   53(fvec3) FMul 372 374
             378:   53(fvec3) FAdd 375 377
             379:    7(fvec4) Load 47
             380:    7(fvec4) VectorShuffle 379 378 4 5 6 3
                              Store 47 380
             381:    7(fvec4) Load 47
             382:   53(fvec3) VectorShuffle 381 381 0 1 2
             383:   53(fvec3) ExtInst 1(GLSL.std.450) 40(FMax) 382 353
             384:    7(fvec4) Load 47
             385:    7(fvec4) VectorShuffle 384 383 4 5 6 3
                              Store 47 385
             387:    7(fvec4) Load 9
             388:   53(fvec3) VectorShuffle 387 387 0 1 2
             389:    7(fvec4) Load 47
             390:   53(fvec3) VectorShuffle 389 389 0 1 2
             391:   53(fvec3) FAdd 388 390
                              Store 386 391
             393:    392(ptr) AccessChain 90 31 86
             394:    6(float) Load 393
             395:    6(float) FNegate 394
             396:    392(ptr) AccessChain 90 31 86
                              Store 396 395
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 210

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 61 177 192 196
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 0
                              Decorate 20 RelaxedPrecision
                              Decorate 21 RelaxedPrecision
                              Decorate 24 ArrayStride 16
                              MemberDecorate 26 0 RelaxedPrecision
                              MemberDecorate 26 0 Offset 0
                              MemberDecorate 26 1 RelaxedPrecision
                              MemberDecorate 26 1 Offset 16
                              MemberDecorate 26 2 Offset 32
                              MemberDecorate 26 3 Offset 48
                              MemberDecorate 26 4 Offset 112
                              MemberDecorate 26 5 Offset 128
                              MemberDecorate 26 6 RelaxedPrecision
                              MemberDecorate 26 6 Offset 144
                              MemberDecorate 26 7 RelaxedPrecision
                              MemberDecorate 26 7 Offset 160
                              Decorate 26 Block
                              Decorate 28 DescriptorSet 1
                              Decorate 28 Binding 0
                              Decorate 33 RelaxedPrecision
                              Decorate 34 RelaxedPrecision
                              Decorate 51 SpecId 0
                              Decorate 61 Location 2
                              Decorate 145 DescriptorSet 0
                              Decorate 145 Binding 1
                              Decorate 150 RelaxedPrecision
                              Decorate 158 RelaxedPrecision
                              Decorate 159 RelaxedPrecision
                              Decorate 161 RelaxedPrecision
                              Decorate 162 RelaxedPrecision
                              Decorate 165 RelaxedPrecision
                              Decorate 167 RelaxedPrecision
                              Decorate 169 RelaxedPrecision
                              Decorate 170 RelaxedPrecision
                              Decorate 173 RelaxedPrecision
                              Decorate 174 RelaxedPrecision
                              Decorate 175 RelaxedPrecision
                              Decorate 176 RelaxedPrecision
                              Decorate 177 RelaxedPrecision
                              Decorate 177 Location 1
                              Decorate 178 RelaxedPrecision
                              Decorate 180 RelaxedPrecision
                              Decorate 181 RelaxedPrecision
                              Decorate 182 RelaxedPrecision
                              Decorate 183 RelaxedPrecision
                              Decorate 184 RelaxedPrecision
                              Decorate 185 RelaxedPrecision
                              Decorate 186 RelaxedPrecision
                              Decorate 187 RelaxedPrecision
                              Decorate 188 RelaxedPrecision
                              Decorate 189 RelaxedPrecision
                              Decorate 190 RelaxedPrecision
                              Decorate 191 RelaxedPrecision
                              Decorate 192 RelaxedPrecision
                              Decorate 192 Location 3
                              Decorate 193 RelaxedPrecision
                              Decorate 194 RelaxedPrecision
                              Decorate 196 RelaxedPrecision
                              Decorate 196 Location 0
                              Decorate 197 RelaxedPrecision
                              Decorate 198 RelaxedPrecision
                              Decorate 199 RelaxedPrecision
                              Decorate 200 RelaxedPrecision
                              Decorate 201 RelaxedPrecision
                              Decorate 202 RelaxedPrecision
                              Decorate 206 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              20:      8(ptr) Variable Private
              22:             TypeInt 32 0
              23:     22(int) Constant 4
              24:             TypeArray 7(fvec4) 23
              25:             TypeVector 6(float) 3
              26:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 24 25(fvec3) 25(fvec3) 7(fvec4) 7(fvec4)
              27:             TypePointer Uniform 26(struct)
              28:     27(ptr) Variable Uniform
              29:             TypeInt 32 1
              30:     29(int) Constant 7
              31:             TypePointer Uniform 7(fvec4)
              35:             TypeBool
              36:             TypePointer Private 35(bool)
              37:     36(ptr) Variable Private
              38:     29(int) Constant 2
              39:     22(int) Constant 0
              40:             TypePointer Uniform 6(float)
              43:    6(float) Constant 1065353216
              45:    35(bool) ConstantFalse
              51:    35(bool) SpecConstantFalse
              54:     22(int) Constant 1
              58:             TypePointer Private 25(fvec3)
              59:     58(ptr) Variable Private
              60:             TypePointer Input 25(fvec3)
              61:     60(ptr) Variable Input
              64:     29(int) Constant 3
              65:     29(int) Constant 1
              70:     29(int) Constant 0
              92:      8(ptr) Variable Private
              93:             TypePointer Function 25(fvec3)
             106:     29(int) Constant 5
             107:             TypePointer Uniform 25(fvec3)
             116:     29(int) Constant 4
             122:             TypePointer Private 6(float)
             125:    6(float) Constant 1048576000
             127:    6(float) Constant 1061158912
             130:    122(ptr) Variable Private
             131:     22(int) Constant 2
             134:    6(float) Constant 1056964608
             142:             TypeImage 6(float) 3D sampled format:Unknown
             143:             TypeSampledImage 142
             144:             TypePointer UniformConstant 143
             145:    144(ptr) Variable UniformConstant
             150:      8(ptr) Variable Private
             156:     22(int) Constant 3
             158:     58(ptr) Variable Private
             166:    6(float) Constant 0
             171:     29(int) Constant 6
             176:    122(ptr) Variable Private
             177:     60(ptr) Variable Input
             189:     58(ptr) Variable Private
             192:     60(ptr) Variable Input
             195:             TypePointer Output 7(fvec4)
             196:    195(ptr) Variable Output
             207:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              94:     93(ptr) Variable Function
              14:          11 Load 13
              18:   15(fvec2) Load 17
              19:    7(fvec4) ImageSampleImplicitLod 14 18
                              Store 9 19
              21:    7(fvec4) Load 9
              32:     31(ptr) AccessChain 28 30
              33:    7(fvec4) Load 32
              34:    7(fvec4) FMul 21 33
                              Store 20 34
              41:     40(ptr) AccessChain 28 38 39
              42:    6(float) Load 41
              44:    35(bool) FOrdEqual 42 43
                              Store 37 44
                              SelectionMerge 47 None
                              BranchConditional 45 46 47
              46:               Label
              48:    35(bool)   Load 37
                                SelectionMerge 50 None
                                BranchConditional 48 49 50
              49:                 Label
                                  Branch 50
              50:               Label
                                Branch 47
              47:             Label
                              SelectionMerge 53 None
                              BranchConditional 51 52 152
              52:               Label
              55:     40(ptr)   AccessChain 28 38 54
              56:    6(float)   Load 55
              57:    35(bool)   FOrdEqual 56 43
                                Store 37 57
              62:   25(fvec3)   Load 61
              63:   25(fvec3)   VectorShuffle 62 62 1 1 1
              66:     31(ptr)   AccessChain 28 64 65
              67:    7(fvec4)   Load 66
              68:   25(fvec3)   VectorShuffle 67 67 0 1 2
              69:   25(fvec3)   FMul 63 68
                                Store 59 69
              71:     31(ptr)   AccessChain 28 64 70
              72:    7(fvec4)   Load 71
              73:   25(fvec3)   VectorShuffle 72 72 0 1 2
              74:   25(fvec3)   Load 61
              75:   25(fvec3)   VectorShuffle 74 74 0 0 0
              76:   25(fvec3)   FMul 73 75
              77:   25(fvec3)   Load 59
              78:   25(fvec3)   FAdd 76 77
                                Store 59 78
              79:     31(ptr)   AccessChain 28 64 38
              80:    7(fvec4)   Load 79
              81:   25(fvec3)   VectorShuffle 80 80 0 1 2
              82:   25(fvec3)   Load 61
              83:   25(fvec3)   VectorShuffle 82 82 2 2 2
              84:   25(fvec3)   FMul 81 83
              85:   25(fvec3)   Load 59
              86:   25(fvec3)   FAdd 84 85
                                Store 59 86
              87:   25(fvec3)   Load 59
              88:     31(ptr)   AccessChain 28 64 64
              89:    7(fvec4)   Load 88
              90:   25(fvec3)   VectorShuffle 89 89 0 1 2
              91:   25(fvec3)   FAdd 87 90
                                Store 59 91
              95:    35(bool)   Load 37
                                SelectionMerge 97 None
                                BranchConditional 95 96 99
              96:                 Label
              98:   25(fvec3)     Load 59
                                  Store 94 98
                                  Branch 97
              99:                 Label
             100:   25(fvec3)     Load 61
                                  Store 94 100
                                  Branch 97
              97:               Label
             101:   25(fvec3)   Load 94
             102:    7(fvec4)   Load 92
             103:    7(fvec4)   VectorShuffle 102 101 4 5 6 3
                                Store 92 103
             104:    7(fvec4)   Load 92
             105:   25(fvec3)   VectorShuffle 104 104 0 1 2
             108:    107(ptr)   AccessChain 28 106
             109:   25(fvec3)   Load 108
             110:   25(fvec3)   FNegate 109
             111:   25(fvec3)   FAdd 105 110
             112:    7(fvec4)   Load 92
             113:    7(fvec4)   VectorShuffle 112 111 4 5 6 3
                                Store 92 113
             114:    7(fvec4)   Load 92
             115:   25(fvec3)   VectorShuffle 114 114 0 1 2
             117:    107(ptr)   AccessChain 28 116
             118:   25(fvec3)   Load 117
             119:   25(fvec3)   FMul 115 118
             120:    7(fvec4)   Load 92
             121:    7(fvec4)   VectorShuffle 120 119 0 4 5 6
                                Store 92 121
             123:    122(ptr)   AccessChain 92 54
             124:    6(float)   Load 123
             126:    6(float)   FMul 124 125
             128:    6(float)   FAdd 126 127
             129:    122(ptr)   AccessChain 59 39
                                Store 129 128
             132:     40(ptr)   AccessChain 28 38 131
             133:    6(float)   Load 132
             135:    6(float)   FMul 133 134
             136:    6(float)   FAdd 135 127
                                Store 130 136
             137:    122(ptr)   AccessChain 59 39
             138:    6(float)   Load 137
             139:    6(float)   Load 130
             140:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 138 139
             141:    122(ptr)   AccessChain 92 39
                                Store 141 140
             146:         143   Load 145
             147:    7(fvec4)   Load 92
             148:   25(fvec3)   VectorShuffle 147 147 0 2 3
             149:    7(fvec4)   ImageSampleImplicitLod 146 148
                                Store 92 149
             151:    7(fvec4)   Load 92
                                Store 150 151
                                Branch 53
             152:               Label
             153:    122(ptr)   AccessChain 150 39
                                Store 153 43
             154:    122(ptr)   AccessChain 150 54
                                Store 154 43
             155:    122(ptr)   AccessChain 150 131
                                Store 155 43
             157:    122(ptr)   AccessChain 150 156
                                Store 157 43
                                Branch 53
              53:             Label
             159:    7(fvec4) Load 150
             160:     31(ptr) AccessChain 28 65
             161:    7(fvec4) Load 160
             162:    6(float) Dot 159 161
             163:    122(ptr) AccessChain 158 39
                              Store 163 162
             164:    122(ptr) AccessChain 158 39
             165:    6(float) Load 164
             167:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 165 166 43
             168:    122(ptr) AccessChain 158 39
                              Store 168 167
             169:   25(fvec3) Load 158
             170:   25(fvec3) VectorShuffle 169 169 0 0 0
             172:     31(ptr) AccessChain 28 171
             173:    7(fvec4) Load 172
             174:   25(fvec3) VectorShuffle 173 173 0 1 2
             175:   25(fvec3) FMul 170 174
                              Store 158 175
             178:   25(fvec3) Load 177
             179:     31(ptr) AccessChain 28 70
             180:    7(fvec4) Load 179
             181:   25(fvec3) VectorShuffle 180 180 0 1 2
             182:    6(float) Dot 178 181
                              Store 176 182
             183:    6(float) Load 176
             184:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 183 166
                              Store 176 184
             185:    7(fvec4) Load 20
             186:   25(fvec3) VectorShuffle 185 185 0 1 2
             187:   25(fvec3) Load 158
             188:   25(fvec3) FMul 186 187
                              Store 158 188
             190:    7(fvec4) Load 20
             191:   25(fvec3) VectorShuffle 190 190 0 1 2
             193:   25(fvec3) Load 192
             194:   25(fvec3) FMul 191 193
                              Store 189 194
             197:   25(fvec3) Load 158
             198:    6(float) Load 176
             199:   25(fvec3) CompositeConstruct 198 198 198
             200:   25(fvec3) FMul 197 199
             201:   25(fvec3) Load 189
             202:   25(fvec3) FAdd 200 201
             203:    7(fvec4) Load 196
             204:    7(fvec4) VectorShuffle 203 202 4 5 6 3
                              Store 196 204
             205:    122(ptr) AccessChain 20 156
             206:    6(float) Load 205
             208:    207(ptr) AccessChain 196 156
                              Store 208 206
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "d3d9":
// No shader variant for this keyword set. The closest match will be used instead.

 }


 // Stats for Vertex shader:
 //         d3d9: 19 math
 //        d3d11: 16 math
 //         gles: 10 avg math (5..17), 2 avg texture (1..3)
 //     d3d11_9x: 16 math
 // Stats for Fragment shader:
 //         d3d9: 14 avg math (6..21), 2 avg texture (1..3)
 //        d3d11: 26 avg math (18..34), 3 avg texture (2..4), 2 branch
 //     d3d11_9x: 13 avg math (5..21), 2 avg texture (1..3)
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="FORWARDADD" "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZWrite Off
  Blend SrcAlpha One
  ColorMask RGB
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords set in this variant: POINT 
-- Vertex shader for "d3d9":
// Stats: 19 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 11

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   _MainTex_ST         c11      1
//

    vs_3_0
    def c12, 1, 0, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r2.x, c4, r1
    dp4 r2.y, c5, r1
    dp4 r2.z, c6, r1
    dp4 r2.w, c7, r1
    mad o1.xy, v2, c11, c11.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul o2.xyz, r0.w, r0
    mad o0.xy, r2.w, c255, r2
    mov o0.zw, r2

// approximately 21 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 16 math, 2 textures
Matrix4x3 unity_WorldToLight at 0
Vector4 _Color at 5
Vector4 _LightColor0 at 4
Vector4 _WorldSpaceLightPos0 at 3

Set 2D Texture "_LightTexture0" to slot 0
Set 2D Texture "_MainTex" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _LightColor0;
//   sampler2D _LightTexture0;
//   sampler2D _MainTex;
//   float4 _WorldSpaceLightPos0;
//   row_major float4x4 unity_WorldToLight;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   unity_WorldToLight   c0       3
//   _WorldSpaceLightPos0 c3       1
//   _LightColor0         c4       1
//   _Color               c5       1
//   _LightTexture0       s0       1
//   _MainTex             s1       1
//

    ps_3_0
    def c6, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_texcoord2 v2.xyz
    dcl_2d s0
    dcl_2d s1
    mad r0, v2.xyzx, c6.xxxy, c6.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp3 r0.x, r1, r1
    texld_pp r0, r0.x, s0
    mul_pp r0.xyz, r0.x, c4
    texld r1, v0, s1
    mul_pp r1, r1, c5
    mul_pp r0.xyz, r0, r1
    mov_pp oC0.w, r1.w
    add r1.xyz, c3, -v2
    nrm_pp r2.xyz, r1
    dp3_pp r0.w, v1, r2
    max_pp r1.x, r0.w, c6.y
    mul_pp oC0.xyz, r0, r1.x

// approximately 18 instruction slots used (2 texture, 16 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul o2.xyz, r0.wwww, r0.xyzx
  16: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 28 math, 4 temp registers, 3 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 720
}
Constant Buffer "UnityProbeVolume" (112 bytes) on slot 2 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 16
  Vector4 unity_ProbeVolumeParams at 0
  Vector3 unity_ProbeVolumeSizeInv at 80
  Vector3 unity_ProbeVolumeMin at 96
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[46], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture3d (float,float,float,float) t2
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 4
   0: add r0.xyz, -v3.xyzx, cb1[0].xyzx
   1: dp3 r0.w, r0.xyzx, r0.xyzx
   2: rsq r0.w, r0.w
   3: mul r0.xyz, r0.wwww, r0.xyzx
   4: sample r1.xyzw, v1.xyxx, t0.xyzw, s2
   5: mul r1.xyzw, r1.xyzw, cb0[8].xyzw
   6: mul r2.xyz, v3.yyyy, cb0[5].xyzx
   7: mad r2.xyz, cb0[4].xyzx, v3.xxxx, r2.xyzx
   8: mad r2.xyz, cb0[6].xyzx, v3.zzzz, r2.xyzx
   9: add r2.xyz, r2.xyzx, cb0[7].xyzx
  10: eq r0.w, cb2[0].x, l(1.000000)
  11: if_nz r0.w
  12:   eq r0.w, cb2[0].y, l(1.000000)
  13:   mul r3.xyz, v3.yyyy, cb2[2].xyzx
  14:   mad r3.xyz, cb2[1].xyzx, v3.xxxx, r3.xyzx
  15:   mad r3.xyz, cb2[3].xyzx, v3.zzzz, r3.xyzx
  16:   add r3.xyz, r3.xyzx, cb2[4].xyzx
  17:   movc r3.xyz, r0.wwww, r3.xyzx, v3.xyzx
  18:   add r3.xyz, r3.xyzx, -cb2[6].xyzx
  19:   mul r3.yzw, r3.xxyz, cb2[5].xxyz
  20:   mad r0.w, r3.y, l(0.250000), l(0.750000)
  21:   mad r2.w, cb2[0].z, l(0.500000), l(0.750000)
  22:   max r3.x, r0.w, r2.w
  23:   sample r3.xyzw, r3.xzwx, t2.xyzw, s0
  24: else 
  25:   mov r3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  26: endif 
  27: dp4_sat r0.w, r3.xyzw, cb1[45].xyzw
  28: dp3 r2.x, r2.xyzx, r2.xyzx
  29: sample r2.xyzw, r2.xxxx, t1.xyzw, s1
  30: mul r0.w, r0.w, r2.x
  31: mul r2.xyz, r0.wwww, cb0[2].xyzx
  32: dp3 r0.x, v2.xyzx, r0.xyzx
  33: max r0.x, r0.x, l(0.000000)
  34: mul r0.yzw, r1.xxyz, r2.xxyz
  35: mul o0.xyz, r0.xxxx, r0.yzwy
  36: mov o0.w, r1.w
  37: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 11 math, 2 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  worldNormal_1 = tmpvar_5;
  tmpvar_2 = worldNormal_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec3 lightCoord_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD2;
  lightCoord_3 = (unity_WorldToLight * tmpvar_8).xyz;
  highp float tmpvar_9;
  tmpvar_9 = dot (lightCoord_3, lightCoord_3);
  lowp float tmpvar_10;
  tmpvar_10 = texture2D (_LightTexture0, vec2(tmpvar_9)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_10);
  lowp vec4 c_11;
  lowp vec4 c_12;
  lowp float diff_13;
  mediump float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_13 = tmpvar_14;
  c_12.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_13);
  c_12.w = tmpvar_7.w;
  c_11.w = c_12.w;
  c_11.xyz = c_12.xyz;
  gl_FragData[0] = c_11;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             9         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         7  ( FLT, FLT, FLT, FLT)
// c9         cb2            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c3
   2:     mad r0, c2, v0.x, r0
   3:     mad r0, c4, v0.z, r0
   4:     mad oT2.xyz, c5, v0.w, r0
   5:     add r0, r0, c5
   6:     dp3 r1.x, v2, c6
   7:     dp3 r1.y, v2, c7
   8:     dp3 r1.z, v2, c8
   9:     dp3 r1.w, r1, r1
  10:     rsq r1.w, r1.w
  11:     mul oT1.xyz, r1.w, r1
  12:     mul r1, r0.y, c10
  13:     mad r1, c9, r0.x, r1
  14:     mad r1, c11, r0.z, r1
  15:     mad r0, c12, r0.w, r1
  16:     mad oPos.xy, r0.w, c0, r0
  17:     mov oPos.zw, r0

// approximately 18 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul o2.xyz, r0.wwww, r0.xyzx
  16: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 15 math, 2 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c1         cb0             4         5  ( FLT, FLT, FLT, FLT)
// c6         cb1             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t1               
// s1             s1              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c7, 0, 0, 0, 0
          dcl t0.xyz
          dcl_pp t1.xyz
          dcl t2.xyz
          dcl_2d s0
          dcl_2d s1
   0:     mul r0.xyz, t2.y, c2
   1:     mad r0.xyz, c1, t2.x, r0
   2:     mad r0.xyz, c3, t2.z, r0
   3:     add r0.xyz, r0, c4
   4:     dp3 r0.xy, r0, r0
   5:     texld r1, t0, s1
   5:     texld_pp r0, r0, s0
   5:     mul_pp r0.xyz, r0.x, c0
   6:     mul_pp r1, r1, c5
   7:     mul_pp r0.xyz, r0, r1
   8:     add r2.xyz, -t2, c6
   9:     nrm_pp r3.xyz, r2
  12:     dp3_pp r0.w, t1, r3
  13:     max_pp r2.x, r0.w, c7.x
  14:     mul_pp r1.xyz, r0, r2.x
  15:     mov_pp oC0, r1

// approximately 18 instruction slots used (2 texture, 16 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: add r0.xyz, -v3.xyzx, cb1[0].xyzx
   1: dp3 r0.w, r0.xyzx, r0.xyzx
   2: rsq r0.w, r0.w
   3: mul r0.xyz, r0.wwww, r0.xyzx
   4: dp3 r0.x, v2.xyzx, r0.xyzx
   5: max r0.x, r0.x, l(0.000000)
   6: mul r0.yzw, v3.yyyy, cb0[5].xxyz
   7: mad r0.yzw, cb0[4].xxyz, v3.xxxx, r0.yyzw
   8: mad r0.yzw, cb0[6].xxyz, v3.zzzz, r0.yyzw
   9: add r0.yzw, r0.yyzw, cb0[7].xxyz
  10: dp3 r0.y, r0.yzwy, r0.yzwy
  11: sample r1.xyzw, r0.yyyy, t1.xyzw, s0
  12: mul r0.yzw, r1.xxxx, cb0[2].xxyz
  13: sample r1.xyzw, v1.xyxx, t0.xyzw, s1
  14: mul r1.xyzw, r1.xyzw, cb0[8].xyzw
  15: mul r0.yzw, r0.yyzw, r1.xxyz
  16: mov o0.w, r1.w
  17: mul o0.xyz, r0.xxxx, r0.yzwy
  18: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
mediump vec3 u_xlat16_3;
float u_xlat6;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10_0.x = texture(_LightTexture0, u_xlat0.xx).w;
    u_xlat16_3.xyz = u_xlat10_0.xxx * _LightColor0.xyz;
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz;
    SV_Target0.w = u_xlat16_0.w;
    SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_3.xyz;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "Globals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 _LightColor0 at 144
  Vector4 _Color at 224
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat14;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat1 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat1 = u_xlat1 * Globals._Color;
    u_xlat2.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD2.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD2.zzz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb12 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : input.TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat3.y, 0.25, 0.75);
        u_xlat14 = fma(Globals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat3.x = max(u_xlat12, u_xlat14);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat3, Globals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat2.xx).x;
    u_xlat12 = u_xlat12 * u_xlat2.x;
    u_xlat2.xyz = float3(u_xlat12) * Globals._LightColor0.xyz;
    u_xlat0.x = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    output.SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    output.SV_Target0.w = u_xlat1.w;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec3 u_xlat4;
float u_xlat12;
bool u_xlatb12;
float u_xlat14;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_1 * _Color;
    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
        u_xlat14 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat12, u_xlat14);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10_2 = texture(_LightTexture0, u_xlat2.xx);
    u_xlat12 = u_xlat12 * u_xlat10_2.w;
    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
u_xlatb15", used in: Fragment 

Set 2D Texture "_LightTexture0" to set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 2, used in: Fragment 

Constant Buffer "PGlobals4208445870" (240 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _Color at 224
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals4208445870" (208 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 128
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 156

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 52 85 97 98 110 147
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 64
                              MemberDecorate 19 2 Offset 128
                              MemberDecorate 19 3 Offset 192
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 52 Location 2
                              MemberDecorate 83 0 BuiltIn Position
                              MemberDecorate 83 1 BuiltIn PointSize
                              MemberDecorate 83 2 BuiltIn ClipDistance
                              Decorate 83 Block
                              Decorate 97 Location 0
                              Decorate 98 Location 2
                              Decorate 110 Location 1
                              Decorate 147 RelaxedPrecision
                              Decorate 147 Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              36:     22(int) Constant 2
              44:      8(ptr) Variable Private
              46:     22(int) Constant 3
              50:             TypeVector 6(float) 3
              51:             TypePointer Output 50(fvec3)
              52:     51(ptr) Variable Output
              81:     14(int) Constant 1
              82:             TypeArray 6(float) 81
              83:             TypeStruct 7(fvec4) 6(float) 82
              84:             TypePointer Output 83(struct)
              85:     84(ptr) Variable Output
              93:             TypePointer Output 7(fvec4)
              95:             TypeVector 6(float) 2
              96:             TypePointer Output 95(fvec2)
              97:     96(ptr) Variable Output
              98:     10(ptr) Variable Input
             109:             TypePointer Input 50(fvec3)
             110:    109(ptr) Variable Input
             116:     14(int) Constant 0
             117:             TypePointer Private 6(float)
             130:     14(int) Constant 2
             132:    117(ptr) Variable Private
             147:     51(ptr) Variable Output
             150:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              29:     25(ptr) AccessChain 21 23 23
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     25(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              45:    7(fvec4) Load 9
              47:     25(ptr) AccessChain 21 23 46
              48:    7(fvec4) Load 47
              49:    7(fvec4) FAdd 45 48
                              Store 44 49
              53:     25(ptr) AccessChain 21 23 46
              54:    7(fvec4) Load 53
              55:   50(fvec3) VectorShuffle 54 54 0 1 2
              56:    7(fvec4) Load 11
              57:   50(fvec3) VectorShuffle 56 56 3 3 3
              58:   50(fvec3) FMul 55 57
              59:    7(fvec4) Load 9
              60:   50(fvec3) VectorShuffle 59 59 0 1 2
              61:   50(fvec3) FAdd 58 60
                              Store 52 61
              62:    7(fvec4) Load 44
              63:    7(fvec4) VectorShuffle 62 62 1 1 1 1
              64:     25(ptr) AccessChain 21 36 24
              65:    7(fvec4) Load 64
              66:    7(fvec4) FMul 63 65
                              Store 9 66
              67:     25(ptr) AccessChain 21 36 23
              68:    7(fvec4) Load 67
              69:    7(fvec4) Load 44
              70:    7(fvec4) VectorShuffle 69 69 0 0 0 0
              71:    7(fvec4) FMul 68 70
              72:    7(fvec4) Load 9
              73:    7(fvec4) FAdd 71 72
                              Store 9 73
              74:     25(ptr) AccessChain 21 36 36
              75:    7(fvec4) Load 74
              76:    7(fvec4) Load 44
              77:    7(fvec4) VectorShuffle 76 76 2 2 2 2
              78:    7(fvec4) FMul 75 77
              79:    7(fvec4) Load 9
              80:    7(fvec4) FAdd 78 79
                              Store 9 80
              86:     25(ptr) AccessChain 21 36 46
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 44
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 9
              92:    7(fvec4) FAdd 90 91
              94:     93(ptr) AccessChain 85 23
                              Store 94 92
              99:    7(fvec4) Load 98
             100:   95(fvec2) VectorShuffle 99 99 0 1
             101:     25(ptr) AccessChain 21 46
             102:    7(fvec4) Load 101
             103:   95(fvec2) VectorShuffle 102 102 0 1
             104:   95(fvec2) FMul 100 103
             105:     25(ptr) AccessChain 21 46
             106:    7(fvec4) Load 105
             107:   95(fvec2) VectorShuffle 106 106 2 3
             108:   95(fvec2) FAdd 104 107
                              Store 97 108
             111:   50(fvec3) Load 110
             112:     25(ptr) AccessChain 21 24 23
             113:    7(fvec4) Load 112
             114:   50(fvec3) VectorShuffle 113 113 0 1 2
             115:    6(float) Dot 111 114
             118:    117(ptr) AccessChain 9 116
                              Store 118 115
             119:   50(fvec3) Load 110
             120:     25(ptr) AccessChain 21 24 24
             121:    7(fvec4) Load 120
             122:   50(fvec3) VectorShuffle 121 121 0 1 2
             123:    6(float) Dot 119 122
             124:    117(ptr) AccessChain 9 81
                              Store 124 123
             125:   50(fvec3) Load 110
             126:     25(ptr) AccessChain 21 24 36
             127:    7(fvec4) Load 126
             128:   50(fvec3) VectorShuffle 127 127 0 1 2
             129:    6(float) Dot 125 128
             131:    117(ptr) AccessChain 9 130
                              Store 131 129
             133:    7(fvec4) Load 9
             134:   50(fvec3) VectorShuffle 133 133 0 1 2
             135:    7(fvec4) Load 9
             136:   50(fvec3) VectorShuffle 135 135 0 1 2
             137:    6(float) Dot 134 136
                              Store 132 137
             138:    6(float) Load 132
             139:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 138
                              Store 132 139
             140:    6(float) Load 132
             141:   50(fvec3) CompositeConstruct 140 140 140
             142:    7(fvec4) Load 9
             143:   50(fvec3) VectorShuffle 142 142 0 1 2
             144:   50(fvec3) FMul 141 143
             145:    7(fvec4) Load 9
             146:    7(fvec4) VectorShuffle 145 144 4 5 6 3
                              Store 9 146
             148:    7(fvec4) Load 9
             149:   50(fvec3) VectorShuffle 148 148 0 1 2
                              Store 147 149
             151:    150(ptr) AccessChain 85 23 81
             152:    6(float) Load 151
             153:    6(float) FNegate 152
             154:    150(ptr) AccessChain 85 23 81
                              Store 154 153
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 271

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 11 49 248 259
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 11 Location 2
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 RelaxedPrecision
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 Offset 48
                              MemberDecorate 19 4 Offset 112
                              MemberDecorate 19 5 Offset 128
                              MemberDecorate 19 6 RelaxedPrecision
                              MemberDecorate 19 6 Offset 144
                              MemberDecorate 19 7 Offset 160
                              MemberDecorate 19 8 RelaxedPrecision
                              MemberDecorate 19 8 Offset 224
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 0
                              Decorate 41 RelaxedPrecision
                              Decorate 45 RelaxedPrecision
                              Decorate 45 DescriptorSet 0
                              Decorate 45 Binding 0
                              Decorate 46 RelaxedPrecision
                              Decorate 49 Location 0
                              Decorate 52 RelaxedPrecision
                              Decorate 53 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 57 RelaxedPrecision
                              Decorate 105 SpecId 0
                              Decorate 201 DescriptorSet 0
                              Decorate 201 Binding 2
                              Decorate 206 RelaxedPrecision
                              Decorate 214 RelaxedPrecision
                              Decorate 215 RelaxedPrecision
                              Decorate 217 RelaxedPrecision
                              Decorate 218 RelaxedPrecision
                              Decorate 221 RelaxedPrecision
                              Decorate 223 RelaxedPrecision
                              Decorate 228 RelaxedPrecision
                              Decorate 229 RelaxedPrecision
                              Decorate 229 DescriptorSet 0
                              Decorate 229 Binding 1
                              Decorate 230 RelaxedPrecision
                              Decorate 234 RelaxedPrecision
                              Decorate 235 RelaxedPrecision
                              Decorate 237 RelaxedPrecision
                              Decorate 238 RelaxedPrecision
                              Decorate 239 RelaxedPrecision
                              Decorate 240 RelaxedPrecision
                              Decorate 241 RelaxedPrecision
                              Decorate 244 RelaxedPrecision
                              Decorate 245 RelaxedPrecision
                              Decorate 246 RelaxedPrecision
                              Decorate 247 RelaxedPrecision
                              Decorate 248 RelaxedPrecision
                              Decorate 248 Location 1
                              Decorate 249 RelaxedPrecision
                              Decorate 252 RelaxedPrecision
                              Decorate 253 RelaxedPrecision
                              Decorate 254 RelaxedPrecision
                              Decorate 255 RelaxedPrecision
                              Decorate 256 RelaxedPrecision
                              Decorate 257 RelaxedPrecision
                              Decorate 259 RelaxedPrecision
                              Decorate 259 Location 0
                              Decorate 260 RelaxedPrecision
                              Decorate 261 RelaxedPrecision
                              Decorate 262 RelaxedPrecision
                              Decorate 263 RelaxedPrecision
                              Decorate 267 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec3)
              11:     10(ptr) Variable Input
              14:             TypeVector 6(float) 4
              15:             TypeInt 32 0
              16:     15(int) Constant 4
              17:             TypeArray 14(fvec4) 16
              18:             TypeArray 14(fvec4) 16
              19:             TypeStruct 14(fvec4) 14(fvec4) 14(fvec4) 17 7(fvec3) 7(fvec3) 14(fvec4) 18 14(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:             TypePointer Uniform 14(fvec4)
              29:             TypePointer Private 6(float)
              30:     29(ptr) Variable Private
              40:             TypePointer Private 14(fvec4)
              41:     40(ptr) Variable Private
              42:             TypeImage 6(float) 2D sampled format:Unknown
              43:             TypeSampledImage 42
              44:             TypePointer UniformConstant 43
              45:     44(ptr) Variable UniformConstant
              47:             TypeVector 6(float) 2
              48:             TypePointer Input 47(fvec2)
              49:     48(ptr) Variable Input
              52:     40(ptr) Variable Private
              54:     22(int) Constant 8
              58:      8(ptr) Variable Private
              61:     22(int) Constant 7
              62:     22(int) Constant 1
              75:     22(int) Constant 2
              85:     22(int) Constant 3
              90:             TypeBool
              91:             TypePointer Private 90(bool)
              92:     91(ptr) Variable Private
              93:     15(int) Constant 0
              94:             TypePointer Uniform 6(float)
              97:    6(float) Constant 1065353216
              99:    90(bool) ConstantFalse
             105:    90(bool) SpecConstantFalse
             108:     15(int) Constant 1
             112:     40(ptr) Variable Private
             151:             TypePointer Function 7(fvec3)
             165:     22(int) Constant 5
             166:             TypePointer Uniform 7(fvec3)
             175:     22(int) Constant 4
             183:    6(float) Constant 1048576000
             185:    6(float) Constant 1061158912
             187:     29(ptr) Variable Private
             188:     15(int) Constant 2
             191:    6(float) Constant 1056964608
             198:             TypeImage 6(float) 3D sampled format:Unknown
             199:             TypeSampledImage 198
             200:             TypePointer UniformConstant 199
             201:    200(ptr) Variable UniformConstant
             206:     40(ptr) Variable Private
             212:     15(int) Constant 3
             214:      8(ptr) Variable Private
             222:    6(float) Constant 0
             228:     29(ptr) Variable Private
             229:     44(ptr) Variable UniformConstant
             235:     29(ptr) Variable Private
             242:     22(int) Constant 6
             247:     29(ptr) Variable Private
             248:     10(ptr) Variable Input
             258:             TypePointer Output 14(fvec4)
             259:    258(ptr) Variable Output
             268:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             152:    151(ptr) Variable Function
              12:    7(fvec3) Load 11
              13:    7(fvec3) FNegate 12
              25:     24(ptr) AccessChain 21 23
              26:   14(fvec4) Load 25
              27:    7(fvec3) VectorShuffle 26 26 0 1 2
              28:    7(fvec3) FAdd 13 27
                              Store 9 28
              31:    7(fvec3) Load 9
              32:    7(fvec3) Load 9
              33:    6(float) Dot 31 32
                              Store 30 33
              34:    6(float) Load 30
              35:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 34
                              Store 30 35
              36:    6(float) Load 30
              37:    7(fvec3) CompositeConstruct 36 36 36
              38:    7(fvec3) Load 9
              39:    7(fvec3) FMul 37 38
                              Store 9 39
              46:          43 Load 45
              50:   47(fvec2) Load 49
              51:   14(fvec4) ImageSampleImplicitLod 46 50
                              Store 41 51
              53:   14(fvec4) Load 41
              55:     24(ptr) AccessChain 21 54
              56:   14(fvec4) Load 55
              57:   14(fvec4) FMul 53 56
                              Store 52 57
              59:    7(fvec3) Load 11
              60:    7(fvec3) VectorShuffle 59 59 1 1 1
              63:     24(ptr) AccessChain 21 61 62
              64:   14(fvec4) Load 63
              65:    7(fvec3) VectorShuffle 64 64 0 1 2
              66:    7(fvec3) FMul 60 65
                              Store 58 66
              67:     24(ptr) AccessChain 21 61 23
              68:   14(fvec4) Load 67
              69:    7(fvec3) VectorShuffle 68 68 0 1 2
              70:    7(fvec3) Load 11
              71:    7(fvec3) VectorShuffle 70 70 0 0 0
              72:    7(fvec3) FMul 69 71
              73:    7(fvec3) Load 58
              74:    7(fvec3) FAdd 72 73
                              Store 58 74
              76:     24(ptr) AccessChain 21 61 75
              77:   14(fvec4) Load 76
              78:    7(fvec3) VectorShuffle 77 77 0 1 2
              79:    7(fvec3) Load 11
              80:    7(fvec3) VectorShuffle 79 79 2 2 2
              81:    7(fvec3) FMul 78 80
              82:    7(fvec3) Load 58
              83:    7(fvec3) FAdd 81 82
                              Store 58 83
              84:    7(fvec3) Load 58
              86:     24(ptr) AccessChain 21 61 85
              87:   14(fvec4) Load 86
              88:    7(fvec3) VectorShuffle 87 87 0 1 2
              89:    7(fvec3) FAdd 84 88
                              Store 58 89
              95:     94(ptr) AccessChain 21 75 93
              96:    6(float) Load 95
              98:    90(bool) FOrdEqual 96 97
                              Store 92 98
                              SelectionMerge 101 None
                              BranchConditional 99 100 101
             100:               Label
             102:    90(bool)   Load 92
                                SelectionMerge 104 None
                                BranchConditional 102 103 104
             103:                 Label
                                  Branch 104
             104:               Label
                                Branch 101
             101:             Label
                              SelectionMerge 107 None
                              BranchConditional 105 106 208
             106:               Label
             109:     94(ptr)   AccessChain 21 75 108
             110:    6(float)   Load 109
             111:    90(bool)   FOrdEqual 110 97
                                Store 92 111
             113:    7(fvec3)   Load 11
             114:    7(fvec3)   VectorShuffle 113 113 1 1 1
             115:     24(ptr)   AccessChain 21 85 62
             116:   14(fvec4)   Load 115
             117:    7(fvec3)   VectorShuffle 116 116 0 1 2
             118:    7(fvec3)   FMul 114 117
             119:   14(fvec4)   Load 112
             120:   14(fvec4)   VectorShuffle 119 118 4 5 6 3
                                Store 112 120
             121:     24(ptr)   AccessChain 21 85 23
             122:   14(fvec4)   Load 121
             123:    7(fvec3)   VectorShuffle 122 122 0 1 2
             124:    7(fvec3)   Load 11
             125:    7(fvec3)   VectorShuffle 124 124 0 0 0
             126:    7(fvec3)   FMul 123 125
             127:   14(fvec4)   Load 112
             128:    7(fvec3)   VectorShuffle 127 127 0 1 2
             129:    7(fvec3)   FAdd 126 128
             130:   14(fvec4)   Load 112
             131:   14(fvec4)   VectorShuffle 130 129 4 5 6 3
                                Store 112 131
             132:     24(ptr)   AccessChain 21 85 75
             133:   14(fvec4)   Load 132
             134:    7(fvec3)   VectorShuffle 133 133 0 1 2
             135:    7(fvec3)   Load 11
             136:    7(fvec3)   VectorShuffle 135 135 2 2 2
             137:    7(fvec3)   FMul 134 136
             138:   14(fvec4)   Load 112
             139:    7(fvec3)   VectorShuffle 138 138 0 1 2
             140:    7(fvec3)   FAdd 137 139
             141:   14(fvec4)   Load 112
             142:   14(fvec4)   VectorShuffle 141 140 4 5 6 3
                                Store 112 142
             143:   14(fvec4)   Load 112
             144:    7(fvec3)   VectorShuffle 143 143 0 1 2
             145:     24(ptr)   AccessChain 21 85 85
             146:   14(fvec4)   Load 145
             147:    7(fvec3)   VectorShuffle 146 146 0 1 2
             148:    7(fvec3)   FAdd 144 147
             149:   14(fvec4)   Load 112
             150:   14(fvec4)   VectorShuffle 149 148 4 5 6 3
                                Store 112 150
             153:    90(bool)   Load 92
                                SelectionMerge 155 None
                                BranchConditional 153 154 158
             154:                 Label
             156:   14(fvec4)     Load 112
             157:    7(fvec3)     VectorShuffle 156 156 0 1 2
                                  Store 152 157
                                  Branch 155
             158:                 Label
             159:    7(fvec3)     Load 11
                                  Store 152 159
                                  Branch 155
             155:               Label
             160:    7(fvec3)   Load 152
             161:   14(fvec4)   Load 112
             162:   14(fvec4)   VectorShuffle 161 160 4 5 6 3
                                Store 112 162
             163:   14(fvec4)   Load 112
             164:    7(fvec3)   VectorShuffle 163 163 0 1 2
             167:    166(ptr)   AccessChain 21 165
             168:    7(fvec3)   Load 167
             169:    7(fvec3)   FNegate 168
             170:    7(fvec3)   FAdd 164 169
             171:   14(fvec4)   Load 112
             172:   14(fvec4)   VectorShuffle 171 170 4 5 6 3
                                Store 112 172
             173:   14(fvec4)   Load 112
             174:    7(fvec3)   VectorShuffle 173 173 0 1 2
             176:    166(ptr)   AccessChain 21 175
             177:    7(fvec3)   Load 176
             178:    7(fvec3)   FMul 174 177
             179:   14(fvec4)   Load 112
             180:   14(fvec4)   VectorShuffle 179 178 0 4 5 6
                                Store 112 180
             181:     29(ptr)   AccessChain 112 108
             182:    6(float)   Load 181
             184:    6(float)   FMul 182 183
             186:    6(float)   FAdd 184 185
                                Store 30 186
             189:     94(ptr)   AccessChain 21 75 188
             190:    6(float)   Load 189
             192:    6(float)   FMul 190 191
             193:    6(float)   FAdd 192 185
                                Store 187 193
             194:    6(float)   Load 30
             195:    6(float)   Load 187
             196:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 194 195
             197:     29(ptr)   AccessChain 112 93
                                Store 197 196
             202:         199   Load 201
             203:   14(fvec4)   Load 112
             204:    7(fvec3)   VectorShuffle 203 203 0 2 3
             205:   14(fvec4)   ImageSampleImplicitLod 202 204
                                Store 112 205
             207:   14(fvec4)   Load 112
                                Store 206 207
                                Branch 107
             208:               Label
             209:     29(ptr)   AccessChain 206 93
                                Store 209 97
             210:     29(ptr)   AccessChain 206 108
                                Store 210 97
             211:     29(ptr)   AccessChain 206 188
                                Store 211 97
             213:     29(ptr)   AccessChain 206 212
                                Store 213 97
                                Branch 107
             107:             Label
             215:   14(fvec4) Load 206
             216:     24(ptr) AccessChain 21 62
             217:   14(fvec4) Load 216
             218:    6(float) Dot 215 217
             219:     29(ptr) AccessChain 214 93
                              Store 219 218
             220:     29(ptr) AccessChain 214 93
             221:    6(float) Load 220
             223:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 221 222 97
             224:     29(ptr) AccessChain 214 93
                              Store 224 223
             225:    7(fvec3) Load 58
             226:    7(fvec3) Load 58
             227:    6(float) Dot 225 226
                              Store 30 227
             230:          43 Load 229
             231:    6(float) Load 30
             232:   47(fvec2) CompositeConstruct 231 231
             233:   14(fvec4) ImageSampleImplicitLod 230 232
             234:    6(float) CompositeExtract 233 3
                              Store 228 234
             236:     29(ptr) AccessChain 214 93
             237:    6(float) Load 236
             238:    6(float) Load 228
             239:    6(float) FMul 237 238
                              Store 235 239
             240:    6(float) Load 235
             241:    7(fvec3) CompositeConstruct 240 240 240
             243:     24(ptr) AccessChain 21 242
             244:   14(fvec4) Load 243
             245:    7(fvec3) VectorShuffle 244 244 0 1 2
             246:    7(fvec3) FMul 241 245
                              Store 214 246
             249:    7(fvec3) Load 248
             250:    7(fvec3) Load 9
             251:    6(float) Dot 249 250
                              Store 247 251
             252:    6(float) Load 247
             253:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 252 222
                              Store 247 253
             254:   14(fvec4) Load 52
             255:    7(fvec3) VectorShuffle 254 254 0 1 2
             256:    7(fvec3) Load 214
             257:    7(fvec3) FMul 255 256
                              Store 214 257
             260:    6(float) Load 247
             261:    7(fvec3) CompositeConstruct 260 260 260
             262:    7(fvec3) Load 214
             263:    7(fvec3) FMul 261 262
             264:   14(fvec4) Load 259
             265:   14(fvec4) VectorShuffle 264 263 4 5 6 3
                              Store 259 265
             266:     29(ptr) AccessChain 52 212
             267:    6(float) Load 266
             269:    268(ptr) AccessChain 259 212
                              Store 269 267
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

-- Vertex shader for "d3d9":
// Stats: 19 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 11

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   _MainTex_ST         c11      1
//

    vs_3_0
    def c12, 1, 0, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r2.x, c4, r1
    dp4 r2.y, c5, r1
    dp4 r2.z, c6, r1
    dp4 r2.w, c7, r1
    mad o1.xy, v2, c11, c11.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul o2.xyz, r0.w, r0
    mad o0.xy, r2.w, c255, r2
    mov o0.zw, r2

// approximately 21 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 6 math, 1 textures
Vector4 _Color at 2
Vector4 _LightColor0 at 1
Vector4 _WorldSpaceLightPos0 at 0

Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _LightColor0;
//   sampler2D _MainTex;
//   float4 _WorldSpaceLightPos0;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   _WorldSpaceLightPos0 c0       1
//   _LightColor0         c1       1
//   _Color               c2       1
//   _MainTex             s0       1
//

    ps_3_0
    def c3, 0, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_2d s0
    dp3_pp r0.x, v1, c0
    max_pp r1.x, r0.x, c3.x
    texld r0, v0, s0
    mul_pp r0, r0, c2
    mul_pp r0.xyz, r0, c1
    mov_pp oC0.w, r0.w
    mul_pp oC0.xyz, r1.x, r0

// approximately 7 instruction slots used (1 texture, 6 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul o2.xyz, r0.wwww, r0.xyzx
  16: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 18 math, 3 temp registers, 2 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _LightColor0 at 32
  Vector4 _Color at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 720
}
Constant Buffer "UnityProbeVolume" (112 bytes) on slot 2 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 16
  Vector4 unity_ProbeVolumeParams at 0
  Vector3 unity_ProbeVolumeSizeInv at 80
  Vector3 unity_ProbeVolumeMin at 96
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[46], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture3d (float,float,float,float) t1
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 3
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s1
   1: mul r0.xyzw, r0.xyzw, cb0[4].xyzw
   2: eq r1.x, cb2[0].x, l(1.000000)
   3: if_nz r1.x
   4:   eq r1.x, cb2[0].y, l(1.000000)
   5:   mul r1.yzw, v3.yyyy, cb2[2].xxyz
   6:   mad r1.yzw, cb2[1].xxyz, v3.xxxx, r1.yyzw
   7:   mad r1.yzw, cb2[3].xxyz, v3.zzzz, r1.yyzw
   8:   add r1.yzw, r1.yyzw, cb2[4].xxyz
   9:   movc r1.xyz, r1.xxxx, r1.yzwy, v3.xyzx
  10:   add r1.xyz, r1.xyzx, -cb2[6].xyzx
  11:   mul r1.yzw, r1.xxyz, cb2[5].xxyz
  12:   mad r1.y, r1.y, l(0.250000), l(0.750000)
  13:   mad r2.x, cb2[0].z, l(0.500000), l(0.750000)
  14:   max r1.x, r1.y, r2.x
  15:   sample r1.xyzw, r1.xzwx, t1.xyzw, s0
  16: else 
  17:   mov r1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  18: endif 
  19: dp4_sat r1.x, r1.xyzw, cb1[45].xyzw
  20: mul r1.xyz, r1.xxxx, cb0[2].xyzx
  21: dp3 r1.w, v2.xyzx, cb1[0].xyzx
  22: max r1.w, r1.w, l(0.000000)
  23: mul r0.xyz, r0.xyzx, r1.xyzx
  24: mul o0.xyz, r1.wwww, r0.xyzx
  25: mov o0.w, r0.w
  26: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 5 math, 1 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  worldNormal_1 = tmpvar_5;
  tmpvar_2 = worldNormal_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 tmpvar_3;
  lowp vec3 lightDir_4;
  mediump vec3 tmpvar_5;
  tmpvar_5 = _WorldSpaceLightPos0.xyz;
  lightDir_4 = tmpvar_5;
  tmpvar_3 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_6;
  tmpvar_6 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_4;
  lowp vec4 c_7;
  lowp vec4 c_8;
  lowp float diff_9;
  mediump float tmpvar_10;
  tmpvar_10 = max (0.0, dot (tmpvar_3, tmpvar_2));
  diff_9 = tmpvar_10;
  c_8.xyz = ((tmpvar_6.xyz * tmpvar_1) * diff_9);
  c_8.w = tmpvar_6.w;
  c_7.w = c_8.w;
  c_7.xyz = c_8.xyz;
  gl_FragData[0] = c_7;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _MainTex_ST at 80
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             5         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         7  ( FLT, FLT, FLT, FLT)
// c9         cb2            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c3
   2:     mad r0, c2, v0.x, r0
   3:     mad r0, c4, v0.z, r0
   4:     mad oT2.xyz, c5, v0.w, r0
   5:     add r0, r0, c5
   6:     dp3 r1.x, v2, c6
   7:     dp3 r1.y, v2, c7
   8:     dp3 r1.z, v2, c8
   9:     dp3 r1.w, r1, r1
  10:     rsq r1.w, r1.w
  11:     mul oT1.xyz, r1.w, r1
  12:     mul r1, r0.y, c10
  13:     mad r1, c9, r0.x, r1
  14:     mad r1, c11, r0.z, r1
  15:     mad r0, c12, r0.w, r1
  16:     mad oPos.xy, r0.w, c0, r0
  17:     mov oPos.zw, r0

// approximately 18 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[6], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[5].xyxx, cb0[5].zwzz
  10: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul o2.xyz, r0.wwww, r0.xyzx
  16: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 5 math, 2 temp registers, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (96 bytes) on slot 0 {
  Vector4 _LightColor0 at 32
  Vector4 _Color at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c1         cb0             4         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c3, 0, 0, 0, 0
          dcl t0.xy
          dcl_pp t1.xyz
          dcl_2d s0
   0:     dp3_pp r0.w, t1, c2
   1:     max_pp r1.w, r0.w, c3.x
   2:     texld r0, t0, s0
   2:     mul_pp r0, r0, c1
   3:     mul_pp r1.xyz, r0, c0
   4:     mul_pp r0.xyz, r1.w, r1
   5:     mov_pp oC0, r0

// approximately 7 instruction slots used (1 texture, 6 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: dp3 r0.x, v2.xyzx, cb1[0].xyzx
   1: max r0.x, r0.x, l(0.000000)
   2: sample r1.xyzw, v1.xyxx, t0.xyzw, s0
   3: mul r1.xyzw, r1.xyzw, cb0[4].xyzw
   4: mul r0.yzw, r1.xxyz, cb0[2].xxyz
   5: mov o0.w, r1.w
   6: mul o0.xyz, r0.xxxx, r0.yzwy
   7: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump float u_xlat16_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_0 = max(u_xlat16_0, 0.0);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 * _Color;
    u_xlat16_2.xyz = u_xlat16_1.xyz * _LightColor0.xyz;
    SV_Target0.w = u_xlat16_1.w;
    SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_2.xyz;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 1 sampler slot 0

Constant Buffer "Globals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 _LightColor0 at 144
  Vector4 _Color at 160
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_MainTex [[ sampler (1) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (1) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float u_xlat2;
    float3 u_xlat4;
    float u_xlat10;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat0 = u_xlat0 * Globals._Color;
    u_xlatb1 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat4.xyz : input.TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat1.yzw = u_xlat1.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat4.x = fma(u_xlat1.y, 0.25, 0.75);
        u_xlat2 = fma(Globals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat1.x = max(u_xlat4.x, u_xlat2);
        u_xlat1 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    }
    u_xlat1.x = dot(u_xlat1, Globals.unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat1.xyz = u_xlat1.xxx * Globals._LightColor0.xyz;
    u_xlat10 = dot(input.TEXCOORD1.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    output.SV_Target0.xyz = float3(u_xlat10) * u_xlat0.xyz;
    output.SV_Target0.w = u_xlat0.w;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec4 u_xlat1;
bool u_xlatb1;
float u_xlat2;
vec3 u_xlat4;
float u_xlat10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb1){
        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat4.xyz;
        u_xlat4.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat4.xyz;
        u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat4.xyz : vs_TEXCOORD2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat1.y * 0.25 + 0.75;
        u_xlat2 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat1.x = max(u_xlat4.x, u_xlat2);
        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
    } else {
        u_xlat1.x = float(1.0);
        u_xlat1.y = float(1.0);
        u_xlat1.z = float(1.0);
        u_xlat1.w = float(1.0);
    //ENDIF
    }
    u_xlat1.x = dot(u_xlat1, unity_OcclusionMaskSelector);
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
    u_xlat10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat10) * u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
u_xlatb1", used in: Fragment 

Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 1, used in: Fragment 

Constant Buffer "PGlobals2252584834" (176 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Vector4 _Color at 160
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals2252584834" (208 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 128
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 156

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 52 85 97 98 110 147
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 64
                              MemberDecorate 19 2 Offset 128
                              MemberDecorate 19 3 Offset 192
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 52 Location 2
                              MemberDecorate 83 0 BuiltIn Position
                              MemberDecorate 83 1 BuiltIn PointSize
                              MemberDecorate 83 2 BuiltIn ClipDistance
                              Decorate 83 Block
                              Decorate 97 Location 0
                              Decorate 98 Location 2
                              Decorate 110 Location 1
                              Decorate 147 RelaxedPrecision
                              Decorate 147 Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              36:     22(int) Constant 2
              44:      8(ptr) Variable Private
              46:     22(int) Constant 3
              50:             TypeVector 6(float) 3
              51:             TypePointer Output 50(fvec3)
              52:     51(ptr) Variable Output
              81:     14(int) Constant 1
              82:             TypeArray 6(float) 81
              83:             TypeStruct 7(fvec4) 6(float) 82
              84:             TypePointer Output 83(struct)
              85:     84(ptr) Variable Output
              93:             TypePointer Output 7(fvec4)
              95:             TypeVector 6(float) 2
              96:             TypePointer Output 95(fvec2)
              97:     96(ptr) Variable Output
              98:     10(ptr) Variable Input
             109:             TypePointer Input 50(fvec3)
             110:    109(ptr) Variable Input
             116:     14(int) Constant 0
             117:             TypePointer Private 6(float)
             130:     14(int) Constant 2
             132:    117(ptr) Variable Private
             147:     51(ptr) Variable Output
             150:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              29:     25(ptr) AccessChain 21 23 23
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     25(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              45:    7(fvec4) Load 9
              47:     25(ptr) AccessChain 21 23 46
              48:    7(fvec4) Load 47
              49:    7(fvec4) FAdd 45 48
                              Store 44 49
              53:     25(ptr) AccessChain 21 23 46
              54:    7(fvec4) Load 53
              55:   50(fvec3) VectorShuffle 54 54 0 1 2
              56:    7(fvec4) Load 11
              57:   50(fvec3) VectorShuffle 56 56 3 3 3
              58:   50(fvec3) FMul 55 57
              59:    7(fvec4) Load 9
              60:   50(fvec3) VectorShuffle 59 59 0 1 2
              61:   50(fvec3) FAdd 58 60
                              Store 52 61
              62:    7(fvec4) Load 44
              63:    7(fvec4) VectorShuffle 62 62 1 1 1 1
              64:     25(ptr) AccessChain 21 36 24
              65:    7(fvec4) Load 64
              66:    7(fvec4) FMul 63 65
                              Store 9 66
              67:     25(ptr) AccessChain 21 36 23
              68:    7(fvec4) Load 67
              69:    7(fvec4) Load 44
              70:    7(fvec4) VectorShuffle 69 69 0 0 0 0
              71:    7(fvec4) FMul 68 70
              72:    7(fvec4) Load 9
              73:    7(fvec4) FAdd 71 72
                              Store 9 73
              74:     25(ptr) AccessChain 21 36 36
              75:    7(fvec4) Load 74
              76:    7(fvec4) Load 44
              77:    7(fvec4) VectorShuffle 76 76 2 2 2 2
              78:    7(fvec4) FMul 75 77
              79:    7(fvec4) Load 9
              80:    7(fvec4) FAdd 78 79
                              Store 9 80
              86:     25(ptr) AccessChain 21 36 46
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 44
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 9
              92:    7(fvec4) FAdd 90 91
              94:     93(ptr) AccessChain 85 23
                              Store 94 92
              99:    7(fvec4) Load 98
             100:   95(fvec2) VectorShuffle 99 99 0 1
             101:     25(ptr) AccessChain 21 46
             102:    7(fvec4) Load 101
             103:   95(fvec2) VectorShuffle 102 102 0 1
             104:   95(fvec2) FMul 100 103
             105:     25(ptr) AccessChain 21 46
             106:    7(fvec4) Load 105
             107:   95(fvec2) VectorShuffle 106 106 2 3
             108:   95(fvec2) FAdd 104 107
                              Store 97 108
             111:   50(fvec3) Load 110
             112:     25(ptr) AccessChain 21 24 23
             113:    7(fvec4) Load 112
             114:   50(fvec3) VectorShuffle 113 113 0 1 2
             115:    6(float) Dot 111 114
             118:    117(ptr) AccessChain 9 116
                              Store 118 115
             119:   50(fvec3) Load 110
             120:     25(ptr) AccessChain 21 24 24
             121:    7(fvec4) Load 120
             122:   50(fvec3) VectorShuffle 121 121 0 1 2
             123:    6(float) Dot 119 122
             124:    117(ptr) AccessChain 9 81
                              Store 124 123
             125:   50(fvec3) Load 110
             126:     25(ptr) AccessChain 21 24 36
             127:    7(fvec4) Load 126
             128:   50(fvec3) VectorShuffle 127 127 0 1 2
             129:    6(float) Dot 125 128
             131:    117(ptr) AccessChain 9 130
                              Store 131 129
             133:    7(fvec4) Load 9
             134:   50(fvec3) VectorShuffle 133 133 0 1 2
             135:    7(fvec4) Load 9
             136:   50(fvec3) VectorShuffle 135 135 0 1 2
             137:    6(float) Dot 134 136
                              Store 132 137
             138:    6(float) Load 132
             139:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 138
                              Store 132 139
             140:    6(float) Load 132
             141:   50(fvec3) CompositeConstruct 140 140 140
             142:    7(fvec4) Load 9
             143:   50(fvec3) VectorShuffle 142 142 0 1 2
             144:   50(fvec3) FMul 141 143
             145:    7(fvec4) Load 9
             146:    7(fvec4) VectorShuffle 145 144 4 5 6 3
                              Store 9 146
             148:    7(fvec4) Load 9
             149:   50(fvec3) VectorShuffle 148 148 0 1 2
                              Store 147 149
             151:    150(ptr) AccessChain 85 23 81
             152:    6(float) Load 151
             153:    6(float) FNegate 152
             154:    150(ptr) AccessChain 85 23 81
                              Store 154 153
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 202

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 61 177 190
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 0
                              Decorate 20 RelaxedPrecision
                              Decorate 21 RelaxedPrecision
                              Decorate 24 ArrayStride 16
                              MemberDecorate 26 0 RelaxedPrecision
                              MemberDecorate 26 0 Offset 0
                              MemberDecorate 26 1 RelaxedPrecision
                              MemberDecorate 26 1 Offset 16
                              MemberDecorate 26 2 Offset 32
                              MemberDecorate 26 3 Offset 48
                              MemberDecorate 26 4 Offset 112
                              MemberDecorate 26 5 Offset 128
                              MemberDecorate 26 6 RelaxedPrecision
                              MemberDecorate 26 6 Offset 144
                              MemberDecorate 26 7 RelaxedPrecision
                              MemberDecorate 26 7 Offset 160
                              Decorate 26 Block
                              Decorate 28 DescriptorSet 1
                              Decorate 28 Binding 0
                              Decorate 33 RelaxedPrecision
                              Decorate 34 RelaxedPrecision
                              Decorate 51 SpecId 0
                              Decorate 61 Location 2
                              Decorate 145 DescriptorSet 0
                              Decorate 145 Binding 1
                              Decorate 150 RelaxedPrecision
                              Decorate 158 RelaxedPrecision
                              Decorate 159 RelaxedPrecision
                              Decorate 161 RelaxedPrecision
                              Decorate 162 RelaxedPrecision
                              Decorate 165 RelaxedPrecision
                              Decorate 167 RelaxedPrecision
                              Decorate 169 RelaxedPrecision
                              Decorate 170 RelaxedPrecision
                              Decorate 173 RelaxedPrecision
                              Decorate 174 RelaxedPrecision
                              Decorate 175 RelaxedPrecision
                              Decorate 176 RelaxedPrecision
                              Decorate 177 RelaxedPrecision
                              Decorate 177 Location 1
                              Decorate 178 RelaxedPrecision
                              Decorate 180 RelaxedPrecision
                              Decorate 181 RelaxedPrecision
                              Decorate 182 RelaxedPrecision
                              Decorate 183 RelaxedPrecision
                              Decorate 184 RelaxedPrecision
                              Decorate 185 RelaxedPrecision
                              Decorate 186 RelaxedPrecision
                              Decorate 187 RelaxedPrecision
                              Decorate 188 RelaxedPrecision
                              Decorate 190 RelaxedPrecision
                              Decorate 190 Location 0
                              Decorate 191 RelaxedPrecision
                              Decorate 192 RelaxedPrecision
                              Decorate 193 RelaxedPrecision
                              Decorate 194 RelaxedPrecision
                              Decorate 198 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              20:      8(ptr) Variable Private
              22:             TypeInt 32 0
              23:     22(int) Constant 4
              24:             TypeArray 7(fvec4) 23
              25:             TypeVector 6(float) 3
              26:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 24 25(fvec3) 25(fvec3) 7(fvec4) 7(fvec4)
              27:             TypePointer Uniform 26(struct)
              28:     27(ptr) Variable Uniform
              29:             TypeInt 32 1
              30:     29(int) Constant 7
              31:             TypePointer Uniform 7(fvec4)
              35:             TypeBool
              36:             TypePointer Private 35(bool)
              37:     36(ptr) Variable Private
              38:     29(int) Constant 2
              39:     22(int) Constant 0
              40:             TypePointer Uniform 6(float)
              43:    6(float) Constant 1065353216
              45:    35(bool) ConstantFalse
              51:    35(bool) SpecConstantFalse
              54:     22(int) Constant 1
              58:             TypePointer Private 25(fvec3)
              59:     58(ptr) Variable Private
              60:             TypePointer Input 25(fvec3)
              61:     60(ptr) Variable Input
              64:     29(int) Constant 3
              65:     29(int) Constant 1
              70:     29(int) Constant 0
              92:      8(ptr) Variable Private
              93:             TypePointer Function 25(fvec3)
             106:     29(int) Constant 5
             107:             TypePointer Uniform 25(fvec3)
             116:     29(int) Constant 4
             122:             TypePointer Private 6(float)
             125:    6(float) Constant 1048576000
             127:    6(float) Constant 1061158912
             130:    122(ptr) Variable Private
             131:     22(int) Constant 2
             134:    6(float) Constant 1056964608
             142:             TypeImage 6(float) 3D sampled format:Unknown
             143:             TypeSampledImage 142
             144:             TypePointer UniformConstant 143
             145:    144(ptr) Variable UniformConstant
             150:      8(ptr) Variable Private
             156:     22(int) Constant 3
             158:     58(ptr) Variable Private
             166:    6(float) Constant 0
             171:     29(int) Constant 6
             176:    122(ptr) Variable Private
             177:     60(ptr) Variable Input
             189:             TypePointer Output 7(fvec4)
             190:    189(ptr) Variable Output
             199:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              94:     93(ptr) Variable Function
              14:          11 Load 13
              18:   15(fvec2) Load 17
              19:    7(fvec4) ImageSampleImplicitLod 14 18
                              Store 9 19
              21:    7(fvec4) Load 9
              32:     31(ptr) AccessChain 28 30
              33:    7(fvec4) Load 32
              34:    7(fvec4) FMul 21 33
                              Store 20 34
              41:     40(ptr) AccessChain 28 38 39
              42:    6(float) Load 41
              44:    35(bool) FOrdEqual 42 43
                              Store 37 44
                              SelectionMerge 47 None
                              BranchConditional 45 46 47
              46:               Label
              48:    35(bool)   Load 37
                                SelectionMerge 50 None
                                BranchConditional 48 49 50
              49:                 Label
                                  Branch 50
              50:               Label
                                Branch 47
              47:             Label
                              SelectionMerge 53 None
                              BranchConditional 51 52 152
              52:               Label
              55:     40(ptr)   AccessChain 28 38 54
              56:    6(float)   Load 55
              57:    35(bool)   FOrdEqual 56 43
                                Store 37 57
              62:   25(fvec3)   Load 61
              63:   25(fvec3)   VectorShuffle 62 62 1 1 1
              66:     31(ptr)   AccessChain 28 64 65
              67:    7(fvec4)   Load 66
              68:   25(fvec3)   VectorShuffle 67 67 0 1 2
              69:   25(fvec3)   FMul 63 68
                                Store 59 69
              71:     31(ptr)   AccessChain 28 64 70
              72:    7(fvec4)   Load 71
              73:   25(fvec3)   VectorShuffle 72 72 0 1 2
              74:   25(fvec3)   Load 61
              75:   25(fvec3)   VectorShuffle 74 74 0 0 0
              76:   25(fvec3)   FMul 73 75
              77:   25(fvec3)   Load 59
              78:   25(fvec3)   FAdd 76 77
                                Store 59 78
              79:     31(ptr)   AccessChain 28 64 38
              80:    7(fvec4)   Load 79
              81:   25(fvec3)   VectorShuffle 80 80 0 1 2
              82:   25(fvec3)   Load 61
              83:   25(fvec3)   VectorShuffle 82 82 2 2 2
              84:   25(fvec3)   FMul 81 83
              85:   25(fvec3)   Load 59
              86:   25(fvec3)   FAdd 84 85
                                Store 59 86
              87:   25(fvec3)   Load 59
              88:     31(ptr)   AccessChain 28 64 64
              89:    7(fvec4)   Load 88
              90:   25(fvec3)   VectorShuffle 89 89 0 1 2
              91:   25(fvec3)   FAdd 87 90
                                Store 59 91
              95:    35(bool)   Load 37
                                SelectionMerge 97 None
                                BranchConditional 95 96 99
              96:                 Label
              98:   25(fvec3)     Load 59
                                  Store 94 98
                                  Branch 97
              99:                 Label
             100:   25(fvec3)     Load 61
                                  Store 94 100
                                  Branch 97
              97:               Label
             101:   25(fvec3)   Load 94
             102:    7(fvec4)   Load 92
             103:    7(fvec4)   VectorShuffle 102 101 4 5 6 3
                                Store 92 103
             104:    7(fvec4)   Load 92
             105:   25(fvec3)   VectorShuffle 104 104 0 1 2
             108:    107(ptr)   AccessChain 28 106
             109:   25(fvec3)   Load 108
             110:   25(fvec3)   FNegate 109
             111:   25(fvec3)   FAdd 105 110
             112:    7(fvec4)   Load 92
             113:    7(fvec4)   VectorShuffle 112 111 4 5 6 3
                                Store 92 113
             114:    7(fvec4)   Load 92
             115:   25(fvec3)   VectorShuffle 114 114 0 1 2
             117:    107(ptr)   AccessChain 28 116
             118:   25(fvec3)   Load 117
             119:   25(fvec3)   FMul 115 118
             120:    7(fvec4)   Load 92
             121:    7(fvec4)   VectorShuffle 120 119 0 4 5 6
                                Store 92 121
             123:    122(ptr)   AccessChain 92 54
             124:    6(float)   Load 123
             126:    6(float)   FMul 124 125
             128:    6(float)   FAdd 126 127
             129:    122(ptr)   AccessChain 59 39
                                Store 129 128
             132:     40(ptr)   AccessChain 28 38 131
             133:    6(float)   Load 132
             135:    6(float)   FMul 133 134
             136:    6(float)   FAdd 135 127
                                Store 130 136
             137:    122(ptr)   AccessChain 59 39
             138:    6(float)   Load 137
             139:    6(float)   Load 130
             140:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 138 139
             141:    122(ptr)   AccessChain 92 39
                                Store 141 140
             146:         143   Load 145
             147:    7(fvec4)   Load 92
             148:   25(fvec3)   VectorShuffle 147 147 0 2 3
             149:    7(fvec4)   ImageSampleImplicitLod 146 148
                                Store 92 149
             151:    7(fvec4)   Load 92
                                Store 150 151
                                Branch 53
             152:               Label
             153:    122(ptr)   AccessChain 150 39
                                Store 153 43
             154:    122(ptr)   AccessChain 150 54
                                Store 154 43
             155:    122(ptr)   AccessChain 150 131
                                Store 155 43
             157:    122(ptr)   AccessChain 150 156
                                Store 157 43
                                Branch 53
              53:             Label
             159:    7(fvec4) Load 150
             160:     31(ptr) AccessChain 28 65
             161:    7(fvec4) Load 160
             162:    6(float) Dot 159 161
             163:    122(ptr) AccessChain 158 39
                              Store 163 162
             164:    122(ptr) AccessChain 158 39
             165:    6(float) Load 164
             167:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 165 166 43
             168:    122(ptr) AccessChain 158 39
                              Store 168 167
             169:   25(fvec3) Load 158
             170:   25(fvec3) VectorShuffle 169 169 0 0 0
             172:     31(ptr) AccessChain 28 171
             173:    7(fvec4) Load 172
             174:   25(fvec3) VectorShuffle 173 173 0 1 2
             175:   25(fvec3) FMul 170 174
                              Store 158 175
             178:   25(fvec3) Load 177
             179:     31(ptr) AccessChain 28 70
             180:    7(fvec4) Load 179
             181:   25(fvec3) VectorShuffle 180 180 0 1 2
             182:    6(float) Dot 178 181
                              Store 176 182
             183:    6(float) Load 176
             184:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 183 166
                              Store 176 184
             185:    7(fvec4) Load 20
             186:   25(fvec3) VectorShuffle 185 185 0 1 2
             187:   25(fvec3) Load 158
             188:   25(fvec3) FMul 186 187
                              Store 158 188
             191:    6(float) Load 176
             192:   25(fvec3) CompositeConstruct 191 191 191
             193:   25(fvec3) Load 158
             194:   25(fvec3) FMul 192 193
             195:    7(fvec4) Load 190
             196:    7(fvec4) VectorShuffle 195 194 4 5 6 3
                              Store 190 196
             197:    122(ptr) AccessChain 20 156
             198:    6(float) Load 197
             200:    199(ptr) AccessChain 190 156
                              Store 200 198
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

-- Vertex shader for "d3d9":
// Stats: 19 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 11

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   _MainTex_ST         c11      1
//

    vs_3_0
    def c12, 1, 0, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r2.x, c4, r1
    dp4 r2.y, c5, r1
    dp4 r2.z, c6, r1
    dp4 r2.w, c7, r1
    mad o1.xy, v2, c11, c11.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul o2.xyz, r0.w, r0
    mad o0.xy, r2.w, c255, r2
    mov o0.zw, r2

// approximately 21 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 21 math, 3 textures
Matrix4x4 unity_WorldToLight at 0
Vector4 _Color at 6
Vector4 _LightColor0 at 5
Vector4 _WorldSpaceLightPos0 at 4

Set 2D Texture "_LightTexture0" to slot 0
Set 2D Texture "_LightTextureB0" to slot 1
Set 2D Texture "_MainTex" to slot 2

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _LightColor0;
//   sampler2D _LightTexture0;
//   sampler2D _LightTextureB0;
//   sampler2D _MainTex;
//   float4 _WorldSpaceLightPos0;
//   row_major float4x4 unity_WorldToLight;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   unity_WorldToLight   c0       4
//   _WorldSpaceLightPos0 c4       1
//   _LightColor0         c5       1
//   _Color               c6       1
//   _LightTexture0       s0       1
//   _LightTextureB0      s1       1
//   _MainTex             s2       1
//

    ps_3_0
    def c7, 1, 0, 0.5, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_texcoord2 v2.xyz
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    mad r0, v2.xyzx, c7.xxxy, c7.yyyx
    dp4 r1.x, c3, r0
    rcp r1.x, r1.x
    dp4 r2.x, c0, r0
    dp4 r2.y, c1, r0
    dp4 r2.z, c2, r0
    mad r0.xy, r2, r1.x, c7.z
    dp3 r0.z, r2, r2
    texld_pp r1, r0.z, s1
    texld_pp r0, r0, s0
    mul r0.x, r1.x, r0.w
    mul_pp r0.xyz, r0.x, c5
    cmp_pp r0.xyz, -r2.z, c7.y, r0
    texld r1, v0, s2
    mul_pp r1, r1, c6
    mul_pp r0.xyz, r0, r1
    mov_pp oC0.w, r1.w
    add r1.xyz, c4, -v2
    nrm_pp r2.xyz, r1
    dp3_pp r0.w, v1, r2
    max_pp r1.x, r0.w, c7.y
    mul_pp oC0.xyz, r0, r1.x

// approximately 24 instruction slots used (3 texture, 21 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul o2.xyz, r0.wwww, r0.xyzx
  16: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 34 math, 5 temp registers, 4 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_LightTexture0" to slot 1
Set 2D Texture "_LightTextureB0" to slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 720
}
Constant Buffer "UnityProbeVolume" (112 bytes) on slot 2 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 16
  Vector4 unity_ProbeVolumeParams at 0
  Vector3 unity_ProbeVolumeSizeInv at 80
  Vector3 unity_ProbeVolumeMin at 96
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[46], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_sampler s3, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture2d (float,float,float,float) t2
      dcl_resource_texture3d (float,float,float,float) t3
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 5
   0: add r0.xyz, -v3.xyzx, cb1[0].xyzx
   1: dp3 r0.w, r0.xyzx, r0.xyzx
   2: rsq r0.w, r0.w
   3: mul r0.xyz, r0.wwww, r0.xyzx
   4: sample r1.xyzw, v1.xyxx, t0.xyzw, s3
   5: mul r1.xyzw, r1.xyzw, cb0[8].xyzw
   6: mul r2.xyzw, v3.yyyy, cb0[5].xyzw
   7: mad r2.xyzw, cb0[4].xyzw, v3.xxxx, r2.xyzw
   8: mad r2.xyzw, cb0[6].xyzw, v3.zzzz, r2.xyzw
   9: add r2.xyzw, r2.xyzw, cb0[7].xyzw
  10: eq r0.w, cb2[0].x, l(1.000000)
  11: if_nz r0.w
  12:   eq r0.w, cb2[0].y, l(1.000000)
  13:   mul r3.xyz, v3.yyyy, cb2[2].xyzx
  14:   mad r3.xyz, cb2[1].xyzx, v3.xxxx, r3.xyzx
  15:   mad r3.xyz, cb2[3].xyzx, v3.zzzz, r3.xyzx
  16:   add r3.xyz, r3.xyzx, cb2[4].xyzx
  17:   movc r3.xyz, r0.wwww, r3.xyzx, v3.xyzx
  18:   add r3.xyz, r3.xyzx, -cb2[6].xyzx
  19:   mul r3.yzw, r3.xxyz, cb2[5].xxyz
  20:   mad r0.w, r3.y, l(0.250000), l(0.750000)
  21:   mad r3.y, cb2[0].z, l(0.500000), l(0.750000)
  22:   max r3.x, r0.w, r3.y
  23:   sample r3.xyzw, r3.xzwx, t3.xyzw, s0
  24: else 
  25:   mov r3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  26: endif 
  27: dp4_sat r0.w, r3.xyzw, cb1[45].xyzw
  28: lt r3.x, l(0.000000), r2.z
  29: and r3.x, r3.x, l(0x3f800000)
  30: div r3.yz, r2.xxyx, r2.wwww
  31: add r3.yz, r3.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
  32: sample r4.xyzw, r3.yzyy, t1.xyzw, s1
  33: mul r2.w, r3.x, r4.w
  34: dp3 r2.x, r2.xyzx, r2.xyzx
  35: sample r3.xyzw, r2.xxxx, t2.xyzw, s2
  36: mul r2.x, r2.w, r3.x
  37: mul r0.w, r0.w, r2.x
  38: mul r2.xyz, r0.wwww, cb0[2].xyzx
  39: dp3 r0.x, v2.xyzx, r0.xyzx
  40: max r0.x, r0.x, l(0.000000)
  41: mul r0.yzw, r1.xxyz, r2.xxyz
  42: mul o0.xyz, r0.xxxx, r0.yzwy
  43: mov o0.w, r1.w
  44: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 17 math, 3 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  worldNormal_1 = tmpvar_5;
  tmpvar_2 = worldNormal_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp float atten_3;
  highp vec4 lightCoord_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_6 = tmpvar_7;
  tmpvar_5 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_8;
  tmpvar_8 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = xlv_TEXCOORD2;
  lightCoord_4 = (unity_WorldToLight * tmpvar_9);
  lowp vec4 tmpvar_10;
  highp vec2 P_11;
  P_11 = ((lightCoord_4.xy / lightCoord_4.w) + 0.5);
  tmpvar_10 = texture2D (_LightTexture0, P_11);
  highp float tmpvar_12;
  tmpvar_12 = dot (lightCoord_4.xyz, lightCoord_4.xyz);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_LightTextureB0, vec2(tmpvar_12));
  highp float tmpvar_14;
  tmpvar_14 = ((float(
    (lightCoord_4.z > 0.0)
  ) * tmpvar_10.w) * tmpvar_13.w);
  atten_3 = tmpvar_14;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_6;
  tmpvar_1 = (tmpvar_1 * atten_3);
  lowp vec4 c_15;
  lowp vec4 c_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, dot (tmpvar_5, tmpvar_2));
  diff_17 = tmpvar_18;
  c_16.xyz = ((tmpvar_8.xyz * tmpvar_1) * diff_17);
  c_16.w = tmpvar_8.w;
  c_15.w = c_16.w;
  c_15.xyz = c_16.xyz;
  gl_FragData[0] = c_15;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             9         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         7  ( FLT, FLT, FLT, FLT)
// c9         cb2            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c3
   2:     mad r0, c2, v0.x, r0
   3:     mad r0, c4, v0.z, r0
   4:     mad oT2.xyz, c5, v0.w, r0
   5:     add r0, r0, c5
   6:     dp3 r1.x, v2, c6
   7:     dp3 r1.y, v2, c7
   8:     dp3 r1.z, v2, c8
   9:     dp3 r1.w, r1, r1
  10:     rsq r1.w, r1.w
  11:     mul oT1.xyz, r1.w, r1
  12:     mul r1, r0.y, c10
  13:     mad r1, c9, r0.x, r1
  14:     mad r1, c11, r0.z, r1
  15:     mad r0, c12, r0.w, r1
  16:     mad oPos.xy, r0.w, c0, r0
  17:     mov oPos.zw, r0

// approximately 18 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul o2.xyz, r0.wwww, r0.xyzx
  16: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 21 math, 3 temp registers, 3 textures
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 0
Set 2D Texture "_LightTextureB0" to slot 2 sampler slot 1

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c1         cb0             4         5  ( FLT, FLT, FLT, FLT)
// c6         cb1             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t1               
// s1             s1              t2               
// s2             s2              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c7, 0.5, 0, 0, 0
          dcl t0.xyz
          dcl_pp t1.xyz
          dcl t2.xyz
          dcl_2d s0
          dcl_2d s1
          dcl_2d s2
   0:     mul r0, t2.y, c2
   1:     mad r0, c1, t2.x, r0
   2:     mad r0, c3, t2.z, r0
   3:     add r0, r0, c4
   4:     rcp r0.w, r0.w
   5:     mad r1.xy, r0, r0.w, c7.x
   6:     dp3 r0.xy, r0, r0
   7:     texld_pp r1, r1, s0
   7:     texld_pp r2, r0, s1
   7:     mul r0.x, r1.w, r2.x
   8:     mul_pp r0.xyw, r0.x, c0.xyzz
   9:     cmp_pp r0.xyz, -r0.z, c7.y, r0.xyww
  10:     texld r1, t0, s2
  10:     mul_pp r1, r1, c5
  11:     mul_pp r0.xyz, r0, r1
  12:     add r2.xyz, -t2, c6
  13:     nrm_pp r3.xyz, r2
  16:     dp3_pp r0.w, t1, r3
  17:     max_pp r2.x, r0.w, c7.y
  18:     mul_pp r1.xyz, r0, r2.x
  19:     mov_pp oC0, r1

// approximately 23 instruction slots used (3 texture, 20 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture2d (float,float,float,float) t2
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 3
   0: mul r0.xyzw, v3.yyyy, cb0[5].xyzw
   1: mad r0.xyzw, cb0[4].xyzw, v3.xxxx, r0.xyzw
   2: mad r0.xyzw, cb0[6].xyzw, v3.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb0[7].xyzw
   4: div r1.xy, r0.xyxx, r0.wwww
   5: add r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
   6: sample r1.xyzw, r1.xyxx, t1.xyzw, s0
   7: lt r0.w, l(0.000000), r0.z
   8: dp3 r0.x, r0.xyzx, r0.xyzx
   9: sample r2.xyzw, r0.xxxx, t2.xyzw, s1
  10: and r0.x, r0.w, l(0x3f800000)
  11: mul r0.x, r1.w, r0.x
  12: mul r0.x, r2.x, r0.x
  13: mul r0.xyz, r0.xxxx, cb0[2].xyzx
  14: sample r1.xyzw, v1.xyxx, t0.xyzw, s2
  15: mul r1.xyzw, r1.xyzw, cb0[8].xyzw
  16: mul r0.xyz, r0.xyzx, r1.xyzx
  17: mov o0.w, r1.w
  18: add r1.xyz, -v3.xyzx, cb1[0].xyzx
  19: dp3 r0.w, r1.xyzx, r1.xyzx
  20: rsq r0.w, r0.w
  21: mul r1.xyz, r0.wwww, r1.xyzx
  22: dp3 r0.w, v2.xyzx, r1.xyzx
  23: max r0.w, r0.w, l(0.000000)
  24: mul o0.xyz, r0.wwww, r0.xyzx
  25: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec2 u_xlat1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
float u_xlat9;
lowp float u_xlat10_9;
mediump float u_xlat16_11;
void main()
{
    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
    u_xlat10_9 = texture(_LightTexture0, u_xlat1.xy).w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat0.z);
#else
    u_xlatb1 = 0.0<u_xlat0.z;
#endif
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10_0.x = texture(_LightTextureB0, u_xlat0.xx).w;
    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
    u_xlat16_2.x = u_xlat10_9 * u_xlat16_2.x;
    u_xlat16_2.x = u_xlat10_0.x * u_xlat16_2.x;
    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_0.xyz;
    SV_Target0.w = u_xlat16_0.w;
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat16_11 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_11 = max(u_xlat16_11, 0.0);
    SV_Target0.xyz = vec3(u_xlat16_11) * u_xlat16_2.xyz;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_LightTexture0" to slot 1
Set 2D Texture "_LightTextureB0" to slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 0

Constant Buffer "Globals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 _LightColor0 at 144
  Vector4 _Color at 224
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (2) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    bool u_xlatb3;
    float3 u_xlat4;
    float2 u_xlat7;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat14;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat1 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat1 = u_xlat1 * Globals._Color;
    u_xlat2 = input.TEXCOORD2.yyyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat2 = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD2.xxxx, u_xlat2);
    u_xlat2 = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD2.zzzz, u_xlat2);
    u_xlat2 = u_xlat2 + Globals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb12 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : input.TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat3.y, 0.25, 0.75);
        u_xlat7.x = fma(Globals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat3.x = max(u_xlat12, u_xlat7.x);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat3, Globals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb3 = 0.0<u_xlat2.z;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat7.xy = u_xlat2.xy / u_xlat2.ww;
    u_xlat7.xy = u_xlat7.xy + float2(0.5, 0.5);
    u_xlat14 = _LightTexture0.sample(sampler_LightTexture0, u_xlat7.xy).w;
    u_xlat14 = u_xlat14 * u_xlat3.x;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat2.xx).x;
    u_xlat2.x = u_xlat2.x * u_xlat14;
    u_xlat12 = u_xlat12 * u_xlat2.x;
    u_xlat2.xyz = float3(u_xlat12) * Globals._LightColor0.xyz;
    u_xlat0.x = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    output.SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    output.SV_Target0.w = u_xlat1.w;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
vec4 u_xlat10_3;
bool u_xlatb3;
vec4 u_xlat10_4;
vec3 u_xlat5;
vec2 u_xlat8;
float u_xlat15;
bool u_xlatb15;
float u_xlat17;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_1 * _Color;
    u_xlat2 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb15)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat15 = u_xlat3.y * 0.25 + 0.75;
        u_xlat8.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat15, u_xlat8.x);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat15 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlatb3 = 0.0<u_xlat2.z;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat8.xy = u_xlat2.xy / u_xlat2.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(0.5, 0.5);
    u_xlat10_4 = texture(_LightTexture0, u_xlat8.xy);
    u_xlat17 = u_xlat3.x * u_xlat10_4.w;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10_3 = texture(_LightTextureB0, u_xlat2.xx);
    u_xlat2.x = u_xlat17 * u_xlat10_3.w;
    u_xlat15 = u_xlat15 * u_xlat2.x;
    u_xlat2.xyz = vec3(u_xlat15) * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat5.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat5.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb18 = unity_ProbeVolumeParams.x==1.0;
u_xlatb18", used in: Fragment 

Set 2D Texture "_LightTexture0" to set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_LightTextureB0" to set: 0, binding: 2, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 3, used in: Fragment 

Constant Buffer "PGlobals2577591196" (240 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _Color at 224
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals2577591196" (208 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 128
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 156

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 52 85 97 98 110 147
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 64
                              MemberDecorate 19 2 Offset 128
                              MemberDecorate 19 3 Offset 192
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 52 Location 2
                              MemberDecorate 83 0 BuiltIn Position
                              MemberDecorate 83 1 BuiltIn PointSize
                              MemberDecorate 83 2 BuiltIn ClipDistance
                              Decorate 83 Block
                              Decorate 97 Location 0
                              Decorate 98 Location 2
                              Decorate 110 Location 1
                              Decorate 147 RelaxedPrecision
                              Decorate 147 Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              36:     22(int) Constant 2
              44:      8(ptr) Variable Private
              46:     22(int) Constant 3
              50:             TypeVector 6(float) 3
              51:             TypePointer Output 50(fvec3)
              52:     51(ptr) Variable Output
              81:     14(int) Constant 1
              82:             TypeArray 6(float) 81
              83:             TypeStruct 7(fvec4) 6(float) 82
              84:             TypePointer Output 83(struct)
              85:     84(ptr) Variable Output
              93:             TypePointer Output 7(fvec4)
              95:             TypeVector 6(float) 2
              96:             TypePointer Output 95(fvec2)
              97:     96(ptr) Variable Output
              98:     10(ptr) Variable Input
             109:             TypePointer Input 50(fvec3)
             110:    109(ptr) Variable Input
             116:     14(int) Constant 0
             117:             TypePointer Private 6(float)
             130:     14(int) Constant 2
             132:    117(ptr) Variable Private
             147:     51(ptr) Variable Output
             150:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              29:     25(ptr) AccessChain 21 23 23
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     25(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              45:    7(fvec4) Load 9
              47:     25(ptr) AccessChain 21 23 46
              48:    7(fvec4) Load 47
              49:    7(fvec4) FAdd 45 48
                              Store 44 49
              53:     25(ptr) AccessChain 21 23 46
              54:    7(fvec4) Load 53
              55:   50(fvec3) VectorShuffle 54 54 0 1 2
              56:    7(fvec4) Load 11
              57:   50(fvec3) VectorShuffle 56 56 3 3 3
              58:   50(fvec3) FMul 55 57
              59:    7(fvec4) Load 9
              60:   50(fvec3) VectorShuffle 59 59 0 1 2
              61:   50(fvec3) FAdd 58 60
                              Store 52 61
              62:    7(fvec4) Load 44
              63:    7(fvec4) VectorShuffle 62 62 1 1 1 1
              64:     25(ptr) AccessChain 21 36 24
              65:    7(fvec4) Load 64
              66:    7(fvec4) FMul 63 65
                              Store 9 66
              67:     25(ptr) AccessChain 21 36 23
              68:    7(fvec4) Load 67
              69:    7(fvec4) Load 44
              70:    7(fvec4) VectorShuffle 69 69 0 0 0 0
              71:    7(fvec4) FMul 68 70
              72:    7(fvec4) Load 9
              73:    7(fvec4) FAdd 71 72
                              Store 9 73
              74:     25(ptr) AccessChain 21 36 36
              75:    7(fvec4) Load 74
              76:    7(fvec4) Load 44
              77:    7(fvec4) VectorShuffle 76 76 2 2 2 2
              78:    7(fvec4) FMul 75 77
              79:    7(fvec4) Load 9
              80:    7(fvec4) FAdd 78 79
                              Store 9 80
              86:     25(ptr) AccessChain 21 36 46
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 44
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 9
              92:    7(fvec4) FAdd 90 91
              94:     93(ptr) AccessChain 85 23
                              Store 94 92
              99:    7(fvec4) Load 98
             100:   95(fvec2) VectorShuffle 99 99 0 1
             101:     25(ptr) AccessChain 21 46
             102:    7(fvec4) Load 101
             103:   95(fvec2) VectorShuffle 102 102 0 1
             104:   95(fvec2) FMul 100 103
             105:     25(ptr) AccessChain 21 46
             106:    7(fvec4) Load 105
             107:   95(fvec2) VectorShuffle 106 106 2 3
             108:   95(fvec2) FAdd 104 107
                              Store 97 108
             111:   50(fvec3) Load 110
             112:     25(ptr) AccessChain 21 24 23
             113:    7(fvec4) Load 112
             114:   50(fvec3) VectorShuffle 113 113 0 1 2
             115:    6(float) Dot 111 114
             118:    117(ptr) AccessChain 9 116
                              Store 118 115
             119:   50(fvec3) Load 110
             120:     25(ptr) AccessChain 21 24 24
             121:    7(fvec4) Load 120
             122:   50(fvec3) VectorShuffle 121 121 0 1 2
             123:    6(float) Dot 119 122
             124:    117(ptr) AccessChain 9 81
                              Store 124 123
             125:   50(fvec3) Load 110
             126:     25(ptr) AccessChain 21 24 36
             127:    7(fvec4) Load 126
             128:   50(fvec3) VectorShuffle 127 127 0 1 2
             129:    6(float) Dot 125 128
             131:    117(ptr) AccessChain 9 130
                              Store 131 129
             133:    7(fvec4) Load 9
             134:   50(fvec3) VectorShuffle 133 133 0 1 2
             135:    7(fvec4) Load 9
             136:   50(fvec3) VectorShuffle 135 135 0 1 2
             137:    6(float) Dot 134 136
                              Store 132 137
             138:    6(float) Load 132
             139:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 138
                              Store 132 139
             140:    6(float) Load 132
             141:   50(fvec3) CompositeConstruct 140 140 140
             142:    7(fvec4) Load 9
             143:   50(fvec3) VectorShuffle 142 142 0 1 2
             144:   50(fvec3) FMul 141 143
             145:    7(fvec4) Load 9
             146:    7(fvec4) VectorShuffle 145 144 4 5 6 3
                              Store 9 146
             148:    7(fvec4) Load 9
             149:   50(fvec3) VectorShuffle 148 148 0 1 2
                              Store 147 149
             151:    150(ptr) AccessChain 85 23 81
             152:    6(float) Load 151
             153:    6(float) FNegate 152
             154:    150(ptr) AccessChain 85 23 81
                              Store 154 153
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 301

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 11 49 278 289
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 11 Location 2
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 RelaxedPrecision
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 Offset 48
                              MemberDecorate 19 4 Offset 112
                              MemberDecorate 19 5 Offset 128
                              MemberDecorate 19 6 RelaxedPrecision
                              MemberDecorate 19 6 Offset 144
                              MemberDecorate 19 7 Offset 160
                              MemberDecorate 19 8 RelaxedPrecision
                              MemberDecorate 19 8 Offset 224
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 0
                              Decorate 41 RelaxedPrecision
                              Decorate 45 RelaxedPrecision
                              Decorate 45 DescriptorSet 0
                              Decorate 45 Binding 0
                              Decorate 46 RelaxedPrecision
                              Decorate 49 Location 0
                              Decorate 52 RelaxedPrecision
                              Decorate 53 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 57 RelaxedPrecision
                              Decorate 101 SpecId 0
                              Decorate 197 DescriptorSet 0
                              Decorate 197 Binding 3
                              Decorate 202 RelaxedPrecision
                              Decorate 210 RelaxedPrecision
                              Decorate 211 RelaxedPrecision
                              Decorate 213 RelaxedPrecision
                              Decorate 214 RelaxedPrecision
                              Decorate 217 RelaxedPrecision
                              Decorate 219 RelaxedPrecision
                              Decorate 224 RelaxedPrecision
                              Decorate 231 RelaxedPrecision
                              Decorate 242 RelaxedPrecision
                              Decorate 243 RelaxedPrecision
                              Decorate 243 DescriptorSet 0
                              Decorate 243 Binding 1
                              Decorate 244 RelaxedPrecision
                              Decorate 247 RelaxedPrecision
                              Decorate 248 RelaxedPrecision
                              Decorate 249 RelaxedPrecision
                              Decorate 250 RelaxedPrecision
                              Decorate 256 RelaxedPrecision
                              Decorate 256 DescriptorSet 0
                              Decorate 256 Binding 2
                              Decorate 257 RelaxedPrecision
                              Decorate 261 RelaxedPrecision
                              Decorate 262 RelaxedPrecision
                              Decorate 263 RelaxedPrecision
                              Decorate 264 RelaxedPrecision
                              Decorate 266 RelaxedPrecision
                              Decorate 267 RelaxedPrecision
                              Decorate 268 RelaxedPrecision
                              Decorate 270 RelaxedPrecision
                              Decorate 271 RelaxedPrecision
                              Decorate 274 RelaxedPrecision
                              Decorate 275 RelaxedPrecision
                              Decorate 276 RelaxedPrecision
                              Decorate 277 RelaxedPrecision
                              Decorate 278 RelaxedPrecision
                              Decorate 278 Location 1
                              Decorate 279 RelaxedPrecision
                              Decorate 282 RelaxedPrecision
                              Decorate 283 RelaxedPrecision
                              Decorate 284 RelaxedPrecision
                              Decorate 285 RelaxedPrecision
                              Decorate 286 RelaxedPrecision
                              Decorate 287 RelaxedPrecision
                              Decorate 289 RelaxedPrecision
                              Decorate 289 Location 0
                              Decorate 290 RelaxedPrecision
                              Decorate 291 RelaxedPrecision
                              Decorate 292 RelaxedPrecision
                              Decorate 293 RelaxedPrecision
                              Decorate 297 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec3)
              11:     10(ptr) Variable Input
              14:             TypeVector 6(float) 4
              15:             TypeInt 32 0
              16:     15(int) Constant 4
              17:             TypeArray 14(fvec4) 16
              18:             TypeArray 14(fvec4) 16
              19:             TypeStruct 14(fvec4) 14(fvec4) 14(fvec4) 17 7(fvec3) 7(fvec3) 14(fvec4) 18 14(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:             TypePointer Uniform 14(fvec4)
              29:             TypePointer Private 6(float)
              30:     29(ptr) Variable Private
              40:             TypePointer Private 14(fvec4)
              41:     40(ptr) Variable Private
              42:             TypeImage 6(float) 2D sampled format:Unknown
              43:             TypeSampledImage 42
              44:             TypePointer UniformConstant 43
              45:     44(ptr) Variable UniformConstant
              47:             TypeVector 6(float) 2
              48:             TypePointer Input 47(fvec2)
              49:     48(ptr) Variable Input
              52:     40(ptr) Variable Private
              54:     22(int) Constant 8
              58:     40(ptr) Variable Private
              61:     22(int) Constant 7
              62:     22(int) Constant 1
              73:     22(int) Constant 2
              82:     22(int) Constant 3
              86:             TypeBool
              87:             TypePointer Private 86(bool)
              88:     87(ptr) Variable Private
              89:     15(int) Constant 0
              90:             TypePointer Uniform 6(float)
              93:    6(float) Constant 1065353216
              95:    86(bool) ConstantFalse
             101:    86(bool) SpecConstantFalse
             104:     15(int) Constant 1
             108:     40(ptr) Variable Private
             147:             TypePointer Function 7(fvec3)
             161:     22(int) Constant 5
             162:             TypePointer Uniform 7(fvec3)
             171:     22(int) Constant 4
             179:    6(float) Constant 1048576000
             181:    6(float) Constant 1061158912
             183:     29(ptr) Variable Private
             184:     15(int) Constant 2
             187:    6(float) Constant 1056964608
             194:             TypeImage 6(float) 3D sampled format:Unknown
             195:             TypeSampledImage 194
             196:             TypePointer UniformConstant 195
             197:    196(ptr) Variable UniformConstant
             202:     40(ptr) Variable Private
             208:     15(int) Constant 3
             210:      8(ptr) Variable Private
             218:    6(float) Constant 0
             224:     29(ptr) Variable Private
             225:             TypePointer Function 6(float)
             232:             TypePointer Private 47(fvec2)
             233:    232(ptr) Variable Private
             240:   47(fvec2) ConstantComposite 187 187
             242:     29(ptr) Variable Private
             243:     44(ptr) Variable UniformConstant
             256:     44(ptr) Variable UniformConstant
             272:     22(int) Constant 6
             277:     29(ptr) Variable Private
             278:     10(ptr) Variable Input
             288:             TypePointer Output 14(fvec4)
             289:    288(ptr) Variable Output
             298:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             148:    147(ptr) Variable Function
             226:    225(ptr) Variable Function
              12:    7(fvec3) Load 11
              13:    7(fvec3) FNegate 12
              25:     24(ptr) AccessChain 21 23
              26:   14(fvec4) Load 25
              27:    7(fvec3) VectorShuffle 26 26 0 1 2
              28:    7(fvec3) FAdd 13 27
                              Store 9 28
              31:    7(fvec3) Load 9
              32:    7(fvec3) Load 9
              33:    6(float) Dot 31 32
                              Store 30 33
              34:    6(float) Load 30
              35:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 34
                              Store 30 35
              36:    6(float) Load 30
              37:    7(fvec3) CompositeConstruct 36 36 36
              38:    7(fvec3) Load 9
              39:    7(fvec3) FMul 37 38
                              Store 9 39
              46:          43 Load 45
              50:   47(fvec2) Load 49
              51:   14(fvec4) ImageSampleImplicitLod 46 50
                              Store 41 51
              53:   14(fvec4) Load 41
              55:     24(ptr) AccessChain 21 54
              56:   14(fvec4) Load 55
              57:   14(fvec4) FMul 53 56
                              Store 52 57
              59:    7(fvec3) Load 11
              60:   14(fvec4) VectorShuffle 59 59 1 1 1 1
              63:     24(ptr) AccessChain 21 61 62
              64:   14(fvec4) Load 63
              65:   14(fvec4) FMul 60 64
                              Store 58 65
              66:     24(ptr) AccessChain 21 61 23
              67:   14(fvec4) Load 66
              68:    7(fvec3) Load 11
              69:   14(fvec4) VectorShuffle 68 68 0 0 0 0
              70:   14(fvec4) FMul 67 69
              71:   14(fvec4) Load 58
              72:   14(fvec4) FAdd 70 71
                              Store 58 72
              74:     24(ptr) AccessChain 21 61 73
              75:   14(fvec4) Load 74
              76:    7(fvec3) Load 11
              77:   14(fvec4) VectorShuffle 76 76 2 2 2 2
              78:   14(fvec4) FMul 75 77
              79:   14(fvec4) Load 58
              80:   14(fvec4) FAdd 78 79
                              Store 58 80
              81:   14(fvec4) Load 58
              83:     24(ptr) AccessChain 21 61 82
              84:   14(fvec4) Load 83
              85:   14(fvec4) FAdd 81 84
                              Store 58 85
              91:     90(ptr) AccessChain 21 73 89
              92:    6(float) Load 91
              94:    86(bool) FOrdEqual 92 93
                              Store 88 94
                              SelectionMerge 97 None
                              BranchConditional 95 96 97
              96:               Label
              98:    86(bool)   Load 88
                                SelectionMerge 100 None
                                BranchConditional 98 99 100
              99:                 Label
                                  Branch 100
             100:               Label
                                Branch 97
              97:             Label
                              SelectionMerge 103 None
                              BranchConditional 101 102 204
             102:               Label
             105:     90(ptr)   AccessChain 21 73 104
             106:    6(float)   Load 105
             107:    86(bool)   FOrdEqual 106 93
                                Store 88 107
             109:    7(fvec3)   Load 11
             110:    7(fvec3)   VectorShuffle 109 109 1 1 1
             111:     24(ptr)   AccessChain 21 82 62
             112:   14(fvec4)   Load 111
             113:    7(fvec3)   VectorShuffle 112 112 0 1 2
             114:    7(fvec3)   FMul 110 113
             115:   14(fvec4)   Load 108
             116:   14(fvec4)   VectorShuffle 115 114 4 5 6 3
                                Store 108 116
             117:     24(ptr)   AccessChain 21 82 23
             118:   14(fvec4)   Load 117
             119:    7(fvec3)   VectorShuffle 118 118 0 1 2
             120:    7(fvec3)   Load 11
             121:    7(fvec3)   VectorShuffle 120 120 0 0 0
             122:    7(fvec3)   FMul 119 121
             123:   14(fvec4)   Load 108
             124:    7(fvec3)   VectorShuffle 123 123 0 1 2
             125:    7(fvec3)   FAdd 122 124
             126:   14(fvec4)   Load 108
             127:   14(fvec4)   VectorShuffle 126 125 4 5 6 3
                                Store 108 127
             128:     24(ptr)   AccessChain 21 82 73
             129:   14(fvec4)   Load 128
             130:    7(fvec3)   VectorShuffle 129 129 0 1 2
             131:    7(fvec3)   Load 11
             132:    7(fvec3)   VectorShuffle 131 131 2 2 2
             133:    7(fvec3)   FMul 130 132
             134:   14(fvec4)   Load 108
             135:    7(fvec3)   VectorShuffle 134 134 0 1 2
             136:    7(fvec3)   FAdd 133 135
             137:   14(fvec4)   Load 108
             138:   14(fvec4)   VectorShuffle 137 136 4 5 6 3
                                Store 108 138
             139:   14(fvec4)   Load 108
             140:    7(fvec3)   VectorShuffle 139 139 0 1 2
             141:     24(ptr)   AccessChain 21 82 82
             142:   14(fvec4)   Load 141
             143:    7(fvec3)   VectorShuffle 142 142 0 1 2
             144:    7(fvec3)   FAdd 140 143
             145:   14(fvec4)   Load 108
             146:   14(fvec4)   VectorShuffle 145 144 4 5 6 3
                                Store 108 146
             149:    86(bool)   Load 88
                                SelectionMerge 151 None
                                BranchConditional 149 150 154
             150:                 Label
             152:   14(fvec4)     Load 108
             153:    7(fvec3)     VectorShuffle 152 152 0 1 2
                                  Store 148 153
                                  Branch 151
             154:                 Label
             155:    7(fvec3)     Load 11
                                  Store 148 155
                                  Branch 151
             151:               Label
             156:    7(fvec3)   Load 148
             157:   14(fvec4)   Load 108
             158:   14(fvec4)   VectorShuffle 157 156 4 5 6 3
                                Store 108 158
             159:   14(fvec4)   Load 108
             160:    7(fvec3)   VectorShuffle 159 159 0 1 2
             163:    162(ptr)   AccessChain 21 161
             164:    7(fvec3)   Load 163
             165:    7(fvec3)   FNegate 164
             166:    7(fvec3)   FAdd 160 165
             167:   14(fvec4)   Load 108
             168:   14(fvec4)   VectorShuffle 167 166 4 5 6 3
                                Store 108 168
             169:   14(fvec4)   Load 108
             170:    7(fvec3)   VectorShuffle 169 169 0 1 2
             172:    162(ptr)   AccessChain 21 171
             173:    7(fvec3)   Load 172
             174:    7(fvec3)   FMul 170 173
             175:   14(fvec4)   Load 108
             176:   14(fvec4)   VectorShuffle 175 174 0 4 5 6
                                Store 108 176
             177:     29(ptr)   AccessChain 108 104
             178:    6(float)   Load 177
             180:    6(float)   FMul 178 179
             182:    6(float)   FAdd 180 181
                                Store 30 182
             185:     90(ptr)   AccessChain 21 73 184
             186:    6(float)   Load 185
             188:    6(float)   FMul 186 187
             189:    6(float)   FAdd 188 181
                                Store 183 189
             190:    6(float)   Load 30
             191:    6(float)   Load 183
             192:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 190 191
             193:     29(ptr)   AccessChain 108 89
                                Store 193 192
             198:         195   Load 197
             199:   14(fvec4)   Load 108
             200:    7(fvec3)   VectorShuffle 199 199 0 2 3
             201:   14(fvec4)   ImageSampleImplicitLod 198 200
                                Store 108 201
             203:   14(fvec4)   Load 108
                                Store 202 203
                                Branch 103
             204:               Label
             205:     29(ptr)   AccessChain 202 89
                                Store 205 93
             206:     29(ptr)   AccessChain 202 104
                                Store 206 93
             207:     29(ptr)   AccessChain 202 184
                                Store 207 93
             209:     29(ptr)   AccessChain 202 208
                                Store 209 93
                                Branch 103
             103:             Label
             211:   14(fvec4) Load 202
             212:     24(ptr) AccessChain 21 62
             213:   14(fvec4) Load 212
             214:    6(float) Dot 211 213
             215:     29(ptr) AccessChain 210 89
                              Store 215 214
             216:     29(ptr) AccessChain 210 89
             217:    6(float) Load 216
             219:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 217 218 93
             220:     29(ptr) AccessChain 210 89
                              Store 220 219
             221:     29(ptr) AccessChain 58 184
             222:    6(float) Load 221
             223:    86(bool) FOrdLessThan 218 222
                              Store 88 223
             227:    86(bool) Load 88
                              SelectionMerge 229 None
                              BranchConditional 227 228 230
             228:               Label
                                Store 226 93
                                Branch 229
             230:               Label
                                Store 226 218
                                Branch 229
             229:             Label
             231:    6(float) Load 226
                              Store 224 231
             234:   14(fvec4) Load 58
             235:   47(fvec2) VectorShuffle 234 234 0 1
             236:   14(fvec4) Load 58
             237:   47(fvec2) VectorShuffle 236 236 3 3
             238:   47(fvec2) FDiv 235 237
                              Store 233 238
             239:   47(fvec2) Load 233
             241:   47(fvec2) FAdd 239 240
                              Store 233 241
             244:          43 Load 243
             245:   47(fvec2) Load 233
             246:   14(fvec4) ImageSampleImplicitLod 244 245
             247:    6(float) CompositeExtract 246 3
                              Store 242 247
             248:    6(float) Load 242
             249:    6(float) Load 224
             250:    6(float) FMul 248 249
                              Store 224 250
             251:   14(fvec4) Load 58
             252:    7(fvec3) VectorShuffle 251 251 0 1 2
             253:   14(fvec4) Load 58
             254:    7(fvec3) VectorShuffle 253 253 0 1 2
             255:    6(float) Dot 252 254
                              Store 30 255
             257:          43 Load 256
             258:    6(float) Load 30
             259:   47(fvec2) CompositeConstruct 258 258
             260:   14(fvec4) ImageSampleImplicitLod 257 259
             261:    6(float) CompositeExtract 260 3
                              Store 242 261
             262:    6(float) Load 242
             263:    6(float) Load 224
             264:    6(float) FMul 262 263
                              Store 224 264
             265:     29(ptr) AccessChain 210 89
             266:    6(float) Load 265
             267:    6(float) Load 224
             268:    6(float) FMul 266 267
             269:     29(ptr) AccessChain 210 89
                              Store 269 268
             270:    7(fvec3) Load 210
             271:    7(fvec3) VectorShuffle 270 270 0 0 0
             273:     24(ptr) AccessChain 21 272
             274:   14(fvec4) Load 273
             275:    7(fvec3) VectorShuffle 274 274 0 1 2
             276:    7(fvec3) FMul 271 275
                              Store 210 276
             279:    7(fvec3) Load 278
             280:    7(fvec3) Load 9
             281:    6(float) Dot 279 280
                              Store 277 281
             282:    6(float) Load 277
             283:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 282 218
                              Store 277 283
             284:   14(fvec4) Load 52
             285:    7(fvec3) VectorShuffle 284 284 0 1 2
             286:    7(fvec3) Load 210
             287:    7(fvec3) FMul 285 286
                              Store 210 287
             290:    6(float) Load 277
             291:    7(fvec3) CompositeConstruct 290 290 290
             292:    7(fvec3) Load 210
             293:    7(fvec3) FMul 291 292
             294:   14(fvec4) Load 289
             295:   14(fvec4) VectorShuffle 294 293 4 5 6 3
                              Store 289 295
             296:     29(ptr) AccessChain 52 208
             297:    6(float) Load 296
             299:    298(ptr) AccessChain 289 208
                              Store 299 297
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Keywords set in this variant: POINT_COOKIE 
-- Vertex shader for "d3d9":
// Stats: 19 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 11

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   _MainTex_ST         c11      1
//

    vs_3_0
    def c12, 1, 0, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r2.x, c4, r1
    dp4 r2.y, c5, r1
    dp4 r2.z, c6, r1
    dp4 r2.w, c7, r1
    mad o1.xy, v2, c11, c11.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul o2.xyz, r0.w, r0
    mad o0.xy, r2.w, c255, r2
    mov o0.zw, r2

// approximately 21 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 17 math, 3 textures
Matrix4x3 unity_WorldToLight at 0
Vector4 _Color at 5
Vector4 _LightColor0 at 4
Vector4 _WorldSpaceLightPos0 at 3

Set CUBE Texture "_LightTexture0" to slot 0
Set 2D Texture "_LightTextureB0" to slot 1
Set 2D Texture "_MainTex" to slot 2

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _LightColor0;
//   samplerCUBE _LightTexture0;
//   sampler2D _LightTextureB0;
//   sampler2D _MainTex;
//   float4 _WorldSpaceLightPos0;
//   row_major float4x4 unity_WorldToLight;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   unity_WorldToLight   c0       3
//   _WorldSpaceLightPos0 c3       1
//   _LightColor0         c4       1
//   _Color               c5       1
//   _LightTexture0       s0       1
//   _LightTextureB0      s1       1
//   _MainTex             s2       1
//

    ps_3_0
    def c6, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_texcoord2 v2.xyz
    dcl_cube s0
    dcl_2d s1
    dcl_2d s2
    mad r0, v2.xyzx, c6.xxxy, c6.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp3 r0.x, r1, r1
    texld r1, r1, s0
    texld r0, r0.x, s1
    mul_pp r0.x, r1.w, r0.x
    mul_pp r0.xyz, r0.x, c4
    texld r1, v0, s2
    mul_pp r1, r1, c5
    mul_pp r0.xyz, r0, r1
    mov_pp oC0.w, r1.w
    add r1.xyz, c3, -v2
    nrm_pp r2.xyz, r1
    dp3_pp r0.w, v1, r2
    max_pp r1.x, r0.w, c6.y
    mul_pp oC0.xyz, r0, r1.x

// approximately 20 instruction slots used (3 texture, 17 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul o2.xyz, r0.wwww, r0.xyzx
  16: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 29 math, 4 temp registers, 4 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_LightTextureB0" to slot 1 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 2 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 720
}
Constant Buffer "UnityProbeVolume" (112 bytes) on slot 2 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 16
  Vector4 unity_ProbeVolumeParams at 0
  Vector3 unity_ProbeVolumeSizeInv at 80
  Vector3 unity_ProbeVolumeMin at 96
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[46], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_sampler s3, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texturecube (float,float,float,float) t2
      dcl_resource_texture3d (float,float,float,float) t3
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 4
   0: add r0.xyz, -v3.xyzx, cb1[0].xyzx
   1: dp3 r0.w, r0.xyzx, r0.xyzx
   2: rsq r0.w, r0.w
   3: mul r0.xyz, r0.wwww, r0.xyzx
   4: sample r1.xyzw, v1.xyxx, t0.xyzw, s3
   5: mul r1.xyzw, r1.xyzw, cb0[8].xyzw
   6: mul r2.xyz, v3.yyyy, cb0[5].xyzx
   7: mad r2.xyz, cb0[4].xyzx, v3.xxxx, r2.xyzx
   8: mad r2.xyz, cb0[6].xyzx, v3.zzzz, r2.xyzx
   9: add r2.xyz, r2.xyzx, cb0[7].xyzx
  10: eq r0.w, cb2[0].x, l(1.000000)
  11: if_nz r0.w
  12:   eq r0.w, cb2[0].y, l(1.000000)
  13:   mul r3.xyz, v3.yyyy, cb2[2].xyzx
  14:   mad r3.xyz, cb2[1].xyzx, v3.xxxx, r3.xyzx
  15:   mad r3.xyz, cb2[3].xyzx, v3.zzzz, r3.xyzx
  16:   add r3.xyz, r3.xyzx, cb2[4].xyzx
  17:   movc r3.xyz, r0.wwww, r3.xyzx, v3.xyzx
  18:   add r3.xyz, r3.xyzx, -cb2[6].xyzx
  19:   mul r3.yzw, r3.xxyz, cb2[5].xxyz
  20:   mad r0.w, r3.y, l(0.250000), l(0.750000)
  21:   mad r2.w, cb2[0].z, l(0.500000), l(0.750000)
  22:   max r3.x, r0.w, r2.w
  23:   sample r3.xyzw, r3.xzwx, t3.xyzw, s0
  24: else 
  25:   mov r3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  26: endif 
  27: dp4_sat r0.w, r3.xyzw, cb1[45].xyzw
  28: dp3 r2.w, r2.xyzx, r2.xyzx
  29: sample r3.xyzw, r2.wwww, t1.xyzw, s2
  30: sample r2.xyzw, r2.xyzx, t2.xyzw, s1
  31: mul r2.x, r2.w, r3.x
  32: mul r0.w, r0.w, r2.x
  33: mul r2.xyz, r0.wwww, cb0[2].xyzx
  34: dp3 r0.x, v2.xyzx, r0.xyzx
  35: max r0.x, r0.x, l(0.000000)
  36: mul r0.yzw, r1.xxyz, r2.xxyz
  37: mul o0.xyz, r0.xxxx, r0.yzwy
  38: mov o0.w, r1.w
  39: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 12 math, 3 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  worldNormal_1 = tmpvar_5;
  tmpvar_2 = worldNormal_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec3 lightCoord_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD2));
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD2;
  lightCoord_3 = (unity_WorldToLight * tmpvar_8).xyz;
  highp float tmpvar_9;
  tmpvar_9 = dot (lightCoord_3, lightCoord_3);
  lowp float tmpvar_10;
  tmpvar_10 = (texture2D (_LightTextureB0, vec2(tmpvar_9)).w * textureCube (_LightTexture0, lightCoord_3).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_10);
  lowp vec4 c_11;
  lowp vec4 c_12;
  lowp float diff_13;
  mediump float tmpvar_14;
  tmpvar_14 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_13 = tmpvar_14;
  c_12.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_13);
  c_12.w = tmpvar_7.w;
  c_11.w = c_12.w;
  c_11.xyz = c_12.xyz;
  gl_FragData[0] = c_11;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             9         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         7  ( FLT, FLT, FLT, FLT)
// c9         cb2            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c3
   2:     mad r0, c2, v0.x, r0
   3:     mad r0, c4, v0.z, r0
   4:     mad oT2.xyz, c5, v0.w, r0
   5:     add r0, r0, c5
   6:     dp3 r1.x, v2, c6
   7:     dp3 r1.y, v2, c7
   8:     dp3 r1.z, v2, c8
   9:     dp3 r1.w, r1, r1
  10:     rsq r1.w, r1.w
  11:     mul oT1.xyz, r1.w, r1
  12:     mul r1, r0.y, c10
  13:     mad r1, c9, r0.x, r1
  14:     mad r1, c11, r0.z, r1
  15:     mad r0, c12, r0.w, r1
  16:     mad oPos.xy, r0.w, c0, r0
  17:     mov oPos.zw, r0

// approximately 18 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul o2.xyz, r0.wwww, r0.xyzx
  16: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 16 math, 3 temp registers, 3 textures
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 1
Set CUBE Texture "_LightTexture0" to slot 2 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c1         cb0             4         5  ( FLT, FLT, FLT, FLT)
// c6         cb1             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t2               
// s1             s1              t1               
// s2             s2              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c7, 0, 0, 0, 0
          dcl t0.xyz
          dcl_pp t1.xyz
          dcl t2.xyz
          dcl_cube s0
          dcl_2d s1
          dcl_2d s2
   0:     mul r0.xyz, t2.y, c2
   1:     mad r0.xyz, c1, t2.x, r0
   2:     mad r0.xyz, c3, t2.z, r0
   3:     add r0.xyz, r0, c4
   4:     dp3 r0.w, r0, r0
   5:     mov r1.xy, r0.w
   6:     texld r0, r0, s0
   6:     texld r1, r1, s1
   6:     mul_pp r0.x, r0.w, r1.x
   7:     mul_pp r0.xyz, r0.x, c0
   8:     texld r1, t0, s2
   8:     mul_pp r1, r1, c5
   9:     mul_pp r0.xyz, r0, r1
  10:     add r2.xyz, -t2, c6
  11:     nrm_pp r3.xyz, r2
  14:     dp3_pp r0.w, t1, r3
  15:     max_pp r2.x, r0.w, c7.x
  16:     mul_pp r1.xyz, r0, r2.x
  17:     mov_pp oC0, r1

// approximately 21 instruction slots used (3 texture, 18 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texturecube (float,float,float,float) t2
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 3
   0: add r0.xyz, -v3.xyzx, cb1[0].xyzx
   1: dp3 r0.w, r0.xyzx, r0.xyzx
   2: rsq r0.w, r0.w
   3: mul r0.xyz, r0.wwww, r0.xyzx
   4: dp3 r0.x, v2.xyzx, r0.xyzx
   5: max r0.x, r0.x, l(0.000000)
   6: mul r0.yzw, v3.yyyy, cb0[5].xxyz
   7: mad r0.yzw, cb0[4].xxyz, v3.xxxx, r0.yyzw
   8: mad r0.yzw, cb0[6].xxyz, v3.zzzz, r0.yyzw
   9: add r0.yzw, r0.yyzw, cb0[7].xxyz
  10: dp3 r1.x, r0.yzwy, r0.yzwy
  11: sample r2.xyzw, r0.yzwy, t2.xyzw, s0
  12: sample r1.xyzw, r1.xxxx, t1.xyzw, s1
  13: mul r0.y, r2.w, r1.x
  14: mul r0.yzw, r0.yyyy, cb0[2].xxyz
  15: sample r1.xyzw, v1.xyxx, t0.xyzw, s2
  16: mul r1.xyzw, r1.xyzw, cb0[8].xyzw
  17: mul r0.yzw, r0.yyzw, r1.xxyz
  18: mov o0.w, r1.w
  19: mul o0.xyz, r0.xxxx, r0.yzwy
  20: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump float u_xlat16_1;
lowp float u_xlat10_2;
mediump vec3 u_xlat16_3;
float u_xlat6;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat16_1 = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat16_1 = max(u_xlat16_1, 0.0);
    u_xlat0.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10_0.x = texture(_LightTexture0, u_xlat0.xyz).w;
    u_xlat10_2 = texture(_LightTextureB0, vec2(u_xlat6)).w;
    u_xlat16_0.x = u_xlat10_0.x * u_xlat10_2;
    u_xlat16_3.xyz = u_xlat16_0.xxx * _LightColor0.xyz;
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz;
    SV_Target0.w = u_xlat16_0.w;
    SV_Target0.xyz = vec3(u_xlat16_1) * u_xlat16_3.xyz;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 3
Set 2D Texture "_LightTextureB0" to slot 1 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 2 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 3 sampler slot 0

Constant Buffer "Globals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 _LightColor0 at 144
  Vector4 _Color at 224
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_MainTex [[ sampler (3) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture (1) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture (2) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (3) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat14;
    u_xlat0.xyz = (-input.TEXCOORD2.xyz) + Globals._WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat1 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat1 = u_xlat1 * Globals._Color;
    u_xlat2.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD2.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD2.zzz, u_xlat2.xyz);
    u_xlat2.xyz = u_xlat2.xyz + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb12 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : input.TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat3.y, 0.25, 0.75);
        u_xlat14 = fma(Globals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat3.x = max(u_xlat12, u_xlat14);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat3, Globals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat14 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat14)).x;
    u_xlat2.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat2.xyz).w;
    u_xlat2.x = u_xlat2.x * u_xlat14;
    u_xlat12 = u_xlat12 * u_xlat2.x;
    u_xlat2.xyz = float3(u_xlat12) * Globals._LightColor0.xyz;
    u_xlat0.x = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    output.SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    output.SV_Target0.w = u_xlat1.w;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat10_1;
vec3 u_xlat2;
float u_xlat16_2;
vec4 u_xlat10_2;
vec4 u_xlat3;
vec4 u_xlat10_3;
vec3 u_xlat4;
float u_xlat12;
bool u_xlatb12;
float u_xlat14;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1 = u_xlat10_1 * _Color;
    u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb12 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = unity_ProbeVolumeParams.y==1.0;
        u_xlat3.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat3.xyz;
        u_xlat3.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat3.xyz;
        u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb12)) ? u_xlat3.xyz : vs_TEXCOORD2.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat12 = u_xlat3.y * 0.25 + 0.75;
        u_xlat14 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat3.x = max(u_xlat12, u_xlat14);
        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    //ENDIF
    }
    u_xlat12 = dot(u_xlat3, unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10_3 = texture(_LightTextureB0, vec2(u_xlat14));
    u_xlat10_2 = texture(_LightTexture0, u_xlat2.xyz);
    u_xlat16_2 = u_xlat10_2.w * u_xlat10_3.w;
    u_xlat12 = u_xlat12 * u_xlat16_2;
    u_xlat2.xyz = vec3(u_xlat12) * _LightColor0.xyz;
    u_xlat0.x = dot(vs_TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat4.xyz = u_xlat1.xyz * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    SV_Target0.w = u_xlat1.w;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb15 = unity_ProbeVolumeParams.x==1.0;
u_xlatb15", used in: Fragment 

Set CUBE Texture "_LightTexture0" to set: 0, binding: 2, used in: Fragment 
Set 2D Texture "_LightTextureB0" to set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 3, used in: Fragment 

Constant Buffer "PGlobals2490813310" (240 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _Color at 224
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals2490813310" (208 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 128
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 156

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 52 85 97 98 110 147
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 64
                              MemberDecorate 19 2 Offset 128
                              MemberDecorate 19 3 Offset 192
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 52 Location 2
                              MemberDecorate 83 0 BuiltIn Position
                              MemberDecorate 83 1 BuiltIn PointSize
                              MemberDecorate 83 2 BuiltIn ClipDistance
                              Decorate 83 Block
                              Decorate 97 Location 0
                              Decorate 98 Location 2
                              Decorate 110 Location 1
                              Decorate 147 RelaxedPrecision
                              Decorate 147 Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              36:     22(int) Constant 2
              44:      8(ptr) Variable Private
              46:     22(int) Constant 3
              50:             TypeVector 6(float) 3
              51:             TypePointer Output 50(fvec3)
              52:     51(ptr) Variable Output
              81:     14(int) Constant 1
              82:             TypeArray 6(float) 81
              83:             TypeStruct 7(fvec4) 6(float) 82
              84:             TypePointer Output 83(struct)
              85:     84(ptr) Variable Output
              93:             TypePointer Output 7(fvec4)
              95:             TypeVector 6(float) 2
              96:             TypePointer Output 95(fvec2)
              97:     96(ptr) Variable Output
              98:     10(ptr) Variable Input
             109:             TypePointer Input 50(fvec3)
             110:    109(ptr) Variable Input
             116:     14(int) Constant 0
             117:             TypePointer Private 6(float)
             130:     14(int) Constant 2
             132:    117(ptr) Variable Private
             147:     51(ptr) Variable Output
             150:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              29:     25(ptr) AccessChain 21 23 23
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     25(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              45:    7(fvec4) Load 9
              47:     25(ptr) AccessChain 21 23 46
              48:    7(fvec4) Load 47
              49:    7(fvec4) FAdd 45 48
                              Store 44 49
              53:     25(ptr) AccessChain 21 23 46
              54:    7(fvec4) Load 53
              55:   50(fvec3) VectorShuffle 54 54 0 1 2
              56:    7(fvec4) Load 11
              57:   50(fvec3) VectorShuffle 56 56 3 3 3
              58:   50(fvec3) FMul 55 57
              59:    7(fvec4) Load 9
              60:   50(fvec3) VectorShuffle 59 59 0 1 2
              61:   50(fvec3) FAdd 58 60
                              Store 52 61
              62:    7(fvec4) Load 44
              63:    7(fvec4) VectorShuffle 62 62 1 1 1 1
              64:     25(ptr) AccessChain 21 36 24
              65:    7(fvec4) Load 64
              66:    7(fvec4) FMul 63 65
                              Store 9 66
              67:     25(ptr) AccessChain 21 36 23
              68:    7(fvec4) Load 67
              69:    7(fvec4) Load 44
              70:    7(fvec4) VectorShuffle 69 69 0 0 0 0
              71:    7(fvec4) FMul 68 70
              72:    7(fvec4) Load 9
              73:    7(fvec4) FAdd 71 72
                              Store 9 73
              74:     25(ptr) AccessChain 21 36 36
              75:    7(fvec4) Load 74
              76:    7(fvec4) Load 44
              77:    7(fvec4) VectorShuffle 76 76 2 2 2 2
              78:    7(fvec4) FMul 75 77
              79:    7(fvec4) Load 9
              80:    7(fvec4) FAdd 78 79
                              Store 9 80
              86:     25(ptr) AccessChain 21 36 46
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 44
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 9
              92:    7(fvec4) FAdd 90 91
              94:     93(ptr) AccessChain 85 23
                              Store 94 92
              99:    7(fvec4) Load 98
             100:   95(fvec2) VectorShuffle 99 99 0 1
             101:     25(ptr) AccessChain 21 46
             102:    7(fvec4) Load 101
             103:   95(fvec2) VectorShuffle 102 102 0 1
             104:   95(fvec2) FMul 100 103
             105:     25(ptr) AccessChain 21 46
             106:    7(fvec4) Load 105
             107:   95(fvec2) VectorShuffle 106 106 2 3
             108:   95(fvec2) FAdd 104 107
                              Store 97 108
             111:   50(fvec3) Load 110
             112:     25(ptr) AccessChain 21 24 23
             113:    7(fvec4) Load 112
             114:   50(fvec3) VectorShuffle 113 113 0 1 2
             115:    6(float) Dot 111 114
             118:    117(ptr) AccessChain 9 116
                              Store 118 115
             119:   50(fvec3) Load 110
             120:     25(ptr) AccessChain 21 24 24
             121:    7(fvec4) Load 120
             122:   50(fvec3) VectorShuffle 121 121 0 1 2
             123:    6(float) Dot 119 122
             124:    117(ptr) AccessChain 9 81
                              Store 124 123
             125:   50(fvec3) Load 110
             126:     25(ptr) AccessChain 21 24 36
             127:    7(fvec4) Load 126
             128:   50(fvec3) VectorShuffle 127 127 0 1 2
             129:    6(float) Dot 125 128
             131:    117(ptr) AccessChain 9 130
                              Store 131 129
             133:    7(fvec4) Load 9
             134:   50(fvec3) VectorShuffle 133 133 0 1 2
             135:    7(fvec4) Load 9
             136:   50(fvec3) VectorShuffle 135 135 0 1 2
             137:    6(float) Dot 134 136
                              Store 132 137
             138:    6(float) Load 132
             139:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 138
                              Store 132 139
             140:    6(float) Load 132
             141:   50(fvec3) CompositeConstruct 140 140 140
             142:    7(fvec4) Load 9
             143:   50(fvec3) VectorShuffle 142 142 0 1 2
             144:   50(fvec3) FMul 141 143
             145:    7(fvec4) Load 9
             146:    7(fvec4) VectorShuffle 145 144 4 5 6 3
                              Store 9 146
             148:    7(fvec4) Load 9
             149:   50(fvec3) VectorShuffle 148 148 0 1 2
                              Store 147 149
             151:    150(ptr) AccessChain 85 23 81
             152:    6(float) Load 151
             153:    6(float) FNegate 152
             154:    150(ptr) AccessChain 85 23 81
                              Store 154 153
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 283

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 11 49 260 271
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 11 Location 2
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 RelaxedPrecision
                              MemberDecorate 19 1 Offset 16
                              MemberDecorate 19 2 Offset 32
                              MemberDecorate 19 3 Offset 48
                              MemberDecorate 19 4 Offset 112
                              MemberDecorate 19 5 Offset 128
                              MemberDecorate 19 6 RelaxedPrecision
                              MemberDecorate 19 6 Offset 144
                              MemberDecorate 19 7 Offset 160
                              MemberDecorate 19 8 RelaxedPrecision
                              MemberDecorate 19 8 Offset 224
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 0
                              Decorate 41 RelaxedPrecision
                              Decorate 45 RelaxedPrecision
                              Decorate 45 DescriptorSet 0
                              Decorate 45 Binding 0
                              Decorate 46 RelaxedPrecision
                              Decorate 49 Location 0
                              Decorate 52 RelaxedPrecision
                              Decorate 53 RelaxedPrecision
                              Decorate 56 RelaxedPrecision
                              Decorate 57 RelaxedPrecision
                              Decorate 105 SpecId 0
                              Decorate 201 DescriptorSet 0
                              Decorate 201 Binding 3
                              Decorate 206 RelaxedPrecision
                              Decorate 214 RelaxedPrecision
                              Decorate 215 RelaxedPrecision
                              Decorate 217 RelaxedPrecision
                              Decorate 218 RelaxedPrecision
                              Decorate 221 RelaxedPrecision
                              Decorate 223 RelaxedPrecision
                              Decorate 228 RelaxedPrecision
                              Decorate 229 RelaxedPrecision
                              Decorate 229 DescriptorSet 0
                              Decorate 229 Binding 1
                              Decorate 230 RelaxedPrecision
                              Decorate 234 RelaxedPrecision
                              Decorate 235 RelaxedPrecision
                              Decorate 239 RelaxedPrecision
                              Decorate 239 DescriptorSet 0
                              Decorate 239 Binding 2
                              Decorate 240 RelaxedPrecision
                              Decorate 243 RelaxedPrecision
                              Decorate 244 RelaxedPrecision
                              Decorate 245 RelaxedPrecision
                              Decorate 246 RelaxedPrecision
                              Decorate 247 RelaxedPrecision
                              Decorate 249 RelaxedPrecision
                              Decorate 250 RelaxedPrecision
                              Decorate 251 RelaxedPrecision
                              Decorate 252 RelaxedPrecision
                              Decorate 253 RelaxedPrecision
                              Decorate 256 RelaxedPrecision
                              Decorate 257 RelaxedPrecision
                              Decorate 258 RelaxedPrecision
                              Decorate 259 RelaxedPrecision
                              Decorate 260 RelaxedPrecision
                              Decorate 260 Location 1
                              Decorate 261 RelaxedPrecision
                              Decorate 264 RelaxedPrecision
                              Decorate 265 RelaxedPrecision
                              Decorate 266 RelaxedPrecision
                              Decorate 267 RelaxedPrecision
                              Decorate 268 RelaxedPrecision
                              Decorate 269 RelaxedPrecision
                              Decorate 271 RelaxedPrecision
                              Decorate 271 Location 0
                              Decorate 272 RelaxedPrecision
                              Decorate 273 RelaxedPrecision
                              Decorate 274 RelaxedPrecision
                              Decorate 275 RelaxedPrecision
                              Decorate 279 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 3
               8:             TypePointer Private 7(fvec3)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec3)
              11:     10(ptr) Variable Input
              14:             TypeVector 6(float) 4
              15:             TypeInt 32 0
              16:     15(int) Constant 4
              17:             TypeArray 14(fvec4) 16
              18:             TypeArray 14(fvec4) 16
              19:             TypeStruct 14(fvec4) 14(fvec4) 14(fvec4) 17 7(fvec3) 7(fvec3) 14(fvec4) 18 14(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:             TypePointer Uniform 14(fvec4)
              29:             TypePointer Private 6(float)
              30:     29(ptr) Variable Private
              40:             TypePointer Private 14(fvec4)
              41:     40(ptr) Variable Private
              42:             TypeImage 6(float) 2D sampled format:Unknown
              43:             TypeSampledImage 42
              44:             TypePointer UniformConstant 43
              45:     44(ptr) Variable UniformConstant
              47:             TypeVector 6(float) 2
              48:             TypePointer Input 47(fvec2)
              49:     48(ptr) Variable Input
              52:     40(ptr) Variable Private
              54:     22(int) Constant 8
              58:      8(ptr) Variable Private
              61:     22(int) Constant 7
              62:     22(int) Constant 1
              75:     22(int) Constant 2
              85:     22(int) Constant 3
              90:             TypeBool
              91:             TypePointer Private 90(bool)
              92:     91(ptr) Variable Private
              93:     15(int) Constant 0
              94:             TypePointer Uniform 6(float)
              97:    6(float) Constant 1065353216
              99:    90(bool) ConstantFalse
             105:    90(bool) SpecConstantFalse
             108:     15(int) Constant 1
             112:     40(ptr) Variable Private
             151:             TypePointer Function 7(fvec3)
             165:     22(int) Constant 5
             166:             TypePointer Uniform 7(fvec3)
             175:     22(int) Constant 4
             183:    6(float) Constant 1048576000
             185:    6(float) Constant 1061158912
             187:     29(ptr) Variable Private
             188:     15(int) Constant 2
             191:    6(float) Constant 1056964608
             198:             TypeImage 6(float) 3D sampled format:Unknown
             199:             TypeSampledImage 198
             200:             TypePointer UniformConstant 199
             201:    200(ptr) Variable UniformConstant
             206:     40(ptr) Variable Private
             212:     15(int) Constant 3
             214:      8(ptr) Variable Private
             222:    6(float) Constant 0
             228:     29(ptr) Variable Private
             229:     44(ptr) Variable UniformConstant
             235:     29(ptr) Variable Private
             236:             TypeImage 6(float) Cube sampled format:Unknown
             237:             TypeSampledImage 236
             238:             TypePointer UniformConstant 237
             239:    238(ptr) Variable UniformConstant
             244:     29(ptr) Variable Private
             254:     22(int) Constant 6
             259:     29(ptr) Variable Private
             260:     10(ptr) Variable Input
             270:             TypePointer Output 14(fvec4)
             271:    270(ptr) Variable Output
             280:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             152:    151(ptr) Variable Function
              12:    7(fvec3) Load 11
              13:    7(fvec3) FNegate 12
              25:     24(ptr) AccessChain 21 23
              26:   14(fvec4) Load 25
              27:    7(fvec3) VectorShuffle 26 26 0 1 2
              28:    7(fvec3) FAdd 13 27
                              Store 9 28
              31:    7(fvec3) Load 9
              32:    7(fvec3) Load 9
              33:    6(float) Dot 31 32
                              Store 30 33
              34:    6(float) Load 30
              35:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 34
                              Store 30 35
              36:    6(float) Load 30
              37:    7(fvec3) CompositeConstruct 36 36 36
              38:    7(fvec3) Load 9
              39:    7(fvec3) FMul 37 38
                              Store 9 39
              46:          43 Load 45
              50:   47(fvec2) Load 49
              51:   14(fvec4) ImageSampleImplicitLod 46 50
                              Store 41 51
              53:   14(fvec4) Load 41
              55:     24(ptr) AccessChain 21 54
              56:   14(fvec4) Load 55
              57:   14(fvec4) FMul 53 56
                              Store 52 57
              59:    7(fvec3) Load 11
              60:    7(fvec3) VectorShuffle 59 59 1 1 1
              63:     24(ptr) AccessChain 21 61 62
              64:   14(fvec4) Load 63
              65:    7(fvec3) VectorShuffle 64 64 0 1 2
              66:    7(fvec3) FMul 60 65
                              Store 58 66
              67:     24(ptr) AccessChain 21 61 23
              68:   14(fvec4) Load 67
              69:    7(fvec3) VectorShuffle 68 68 0 1 2
              70:    7(fvec3) Load 11
              71:    7(fvec3) VectorShuffle 70 70 0 0 0
              72:    7(fvec3) FMul 69 71
              73:    7(fvec3) Load 58
              74:    7(fvec3) FAdd 72 73
                              Store 58 74
              76:     24(ptr) AccessChain 21 61 75
              77:   14(fvec4) Load 76
              78:    7(fvec3) VectorShuffle 77 77 0 1 2
              79:    7(fvec3) Load 11
              80:    7(fvec3) VectorShuffle 79 79 2 2 2
              81:    7(fvec3) FMul 78 80
              82:    7(fvec3) Load 58
              83:    7(fvec3) FAdd 81 82
                              Store 58 83
              84:    7(fvec3) Load 58
              86:     24(ptr) AccessChain 21 61 85
              87:   14(fvec4) Load 86
              88:    7(fvec3) VectorShuffle 87 87 0 1 2
              89:    7(fvec3) FAdd 84 88
                              Store 58 89
              95:     94(ptr) AccessChain 21 75 93
              96:    6(float) Load 95
              98:    90(bool) FOrdEqual 96 97
                              Store 92 98
                              SelectionMerge 101 None
                              BranchConditional 99 100 101
             100:               Label
             102:    90(bool)   Load 92
                                SelectionMerge 104 None
                                BranchConditional 102 103 104
             103:                 Label
                                  Branch 104
             104:               Label
                                Branch 101
             101:             Label
                              SelectionMerge 107 None
                              BranchConditional 105 106 208
             106:               Label
             109:     94(ptr)   AccessChain 21 75 108
             110:    6(float)   Load 109
             111:    90(bool)   FOrdEqual 110 97
                                Store 92 111
             113:    7(fvec3)   Load 11
             114:    7(fvec3)   VectorShuffle 113 113 1 1 1
             115:     24(ptr)   AccessChain 21 85 62
             116:   14(fvec4)   Load 115
             117:    7(fvec3)   VectorShuffle 116 116 0 1 2
             118:    7(fvec3)   FMul 114 117
             119:   14(fvec4)   Load 112
             120:   14(fvec4)   VectorShuffle 119 118 4 5 6 3
                                Store 112 120
             121:     24(ptr)   AccessChain 21 85 23
             122:   14(fvec4)   Load 121
             123:    7(fvec3)   VectorShuffle 122 122 0 1 2
             124:    7(fvec3)   Load 11
             125:    7(fvec3)   VectorShuffle 124 124 0 0 0
             126:    7(fvec3)   FMul 123 125
             127:   14(fvec4)   Load 112
             128:    7(fvec3)   VectorShuffle 127 127 0 1 2
             129:    7(fvec3)   FAdd 126 128
             130:   14(fvec4)   Load 112
             131:   14(fvec4)   VectorShuffle 130 129 4 5 6 3
                                Store 112 131
             132:     24(ptr)   AccessChain 21 85 75
             133:   14(fvec4)   Load 132
             134:    7(fvec3)   VectorShuffle 133 133 0 1 2
             135:    7(fvec3)   Load 11
             136:    7(fvec3)   VectorShuffle 135 135 2 2 2
             137:    7(fvec3)   FMul 134 136
             138:   14(fvec4)   Load 112
             139:    7(fvec3)   VectorShuffle 138 138 0 1 2
             140:    7(fvec3)   FAdd 137 139
             141:   14(fvec4)   Load 112
             142:   14(fvec4)   VectorShuffle 141 140 4 5 6 3
                                Store 112 142
             143:   14(fvec4)   Load 112
             144:    7(fvec3)   VectorShuffle 143 143 0 1 2
             145:     24(ptr)   AccessChain 21 85 85
             146:   14(fvec4)   Load 145
             147:    7(fvec3)   VectorShuffle 146 146 0 1 2
             148:    7(fvec3)   FAdd 144 147
             149:   14(fvec4)   Load 112
             150:   14(fvec4)   VectorShuffle 149 148 4 5 6 3
                                Store 112 150
             153:    90(bool)   Load 92
                                SelectionMerge 155 None
                                BranchConditional 153 154 158
             154:                 Label
             156:   14(fvec4)     Load 112
             157:    7(fvec3)     VectorShuffle 156 156 0 1 2
                                  Store 152 157
                                  Branch 155
             158:                 Label
             159:    7(fvec3)     Load 11
                                  Store 152 159
                                  Branch 155
             155:               Label
             160:    7(fvec3)   Load 152
             161:   14(fvec4)   Load 112
             162:   14(fvec4)   VectorShuffle 161 160 4 5 6 3
                                Store 112 162
             163:   14(fvec4)   Load 112
             164:    7(fvec3)   VectorShuffle 163 163 0 1 2
             167:    166(ptr)   AccessChain 21 165
             168:    7(fvec3)   Load 167
             169:    7(fvec3)   FNegate 168
             170:    7(fvec3)   FAdd 164 169
             171:   14(fvec4)   Load 112
             172:   14(fvec4)   VectorShuffle 171 170 4 5 6 3
                                Store 112 172
             173:   14(fvec4)   Load 112
             174:    7(fvec3)   VectorShuffle 173 173 0 1 2
             176:    166(ptr)   AccessChain 21 175
             177:    7(fvec3)   Load 176
             178:    7(fvec3)   FMul 174 177
             179:   14(fvec4)   Load 112
             180:   14(fvec4)   VectorShuffle 179 178 0 4 5 6
                                Store 112 180
             181:     29(ptr)   AccessChain 112 108
             182:    6(float)   Load 181
             184:    6(float)   FMul 182 183
             186:    6(float)   FAdd 184 185
                                Store 30 186
             189:     94(ptr)   AccessChain 21 75 188
             190:    6(float)   Load 189
             192:    6(float)   FMul 190 191
             193:    6(float)   FAdd 192 185
                                Store 187 193
             194:    6(float)   Load 30
             195:    6(float)   Load 187
             196:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 194 195
             197:     29(ptr)   AccessChain 112 93
                                Store 197 196
             202:         199   Load 201
             203:   14(fvec4)   Load 112
             204:    7(fvec3)   VectorShuffle 203 203 0 2 3
             205:   14(fvec4)   ImageSampleImplicitLod 202 204
                                Store 112 205
             207:   14(fvec4)   Load 112
                                Store 206 207
                                Branch 107
             208:               Label
             209:     29(ptr)   AccessChain 206 93
                                Store 209 97
             210:     29(ptr)   AccessChain 206 108
                                Store 210 97
             211:     29(ptr)   AccessChain 206 188
                                Store 211 97
             213:     29(ptr)   AccessChain 206 212
                                Store 213 97
                                Branch 107
             107:             Label
             215:   14(fvec4) Load 206
             216:     24(ptr) AccessChain 21 62
             217:   14(fvec4) Load 216
             218:    6(float) Dot 215 217
             219:     29(ptr) AccessChain 214 93
                              Store 219 218
             220:     29(ptr) AccessChain 214 93
             221:    6(float) Load 220
             223:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 221 222 97
             224:     29(ptr) AccessChain 214 93
                              Store 224 223
             225:    7(fvec3) Load 58
             226:    7(fvec3) Load 58
             227:    6(float) Dot 225 226
                              Store 30 227
             230:          43 Load 229
             231:    6(float) Load 30
             232:   47(fvec2) CompositeConstruct 231 231
             233:   14(fvec4) ImageSampleImplicitLod 230 232
             234:    6(float) CompositeExtract 233 3
                              Store 228 234
             240:         237 Load 239
             241:    7(fvec3) Load 58
             242:   14(fvec4) ImageSampleImplicitLod 240 241
             243:    6(float) CompositeExtract 242 3
                              Store 235 243
             245:    6(float) Load 228
             246:    6(float) Load 235
             247:    6(float) FMul 245 246
                              Store 244 247
             248:     29(ptr) AccessChain 214 93
             249:    6(float) Load 248
             250:    6(float) Load 244
             251:    6(float) FMul 249 250
                              Store 244 251
             252:    6(float) Load 244
             253:    7(fvec3) CompositeConstruct 252 252 252
             255:     24(ptr) AccessChain 21 254
             256:   14(fvec4) Load 255
             257:    7(fvec3) VectorShuffle 256 256 0 1 2
             258:    7(fvec3) FMul 253 257
                              Store 214 258
             261:    7(fvec3) Load 260
             262:    7(fvec3) Load 9
             263:    6(float) Dot 261 262
                              Store 259 263
             264:    6(float) Load 259
             265:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 264 222
                              Store 259 265
             266:   14(fvec4) Load 52
             267:    7(fvec3) VectorShuffle 266 266 0 1 2
             268:    7(fvec3) Load 214
             269:    7(fvec3) FMul 267 268
                              Store 214 269
             272:    6(float) Load 259
             273:    7(fvec3) CompositeConstruct 272 272 272
             274:    7(fvec3) Load 214
             275:    7(fvec3) FMul 273 274
             276:   14(fvec4) Load 271
             277:   14(fvec4) VectorShuffle 276 275 4 5 6 3
                              Store 271 277
             278:     29(ptr) AccessChain 52 212
             279:    6(float) Load 278
             281:    280(ptr) AccessChain 271 212
                              Store 281 279
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

-- Vertex shader for "d3d9":
// Stats: 19 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixVP at 4
Matrix4x4 unity_ObjectToWorld at 0
Matrix4x3 unity_WorldToObject at 8
Vector4 _MainTex_ST at 11

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _MainTex_ST;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                Reg   Size
//   ------------------- ----- ----
//   unity_ObjectToWorld c0       4
//   unity_MatrixVP      c4       4
//   unity_WorldToObject c8       3
//   _MainTex_ST         c11      1
//

    vs_3_0
    def c12, 1, 0, 0, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    dcl_position o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xyz
    dcl_texcoord2 o3.xyz
    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    dp4 r2.x, c4, r1
    dp4 r2.y, c5, r1
    dp4 r2.z, c6, r1
    dp4 r2.w, c7, r1
    mad o1.xy, v2, c11, c11.zwzw
    dp4 o3.x, c0, v0
    dp4 o3.y, c1, v0
    dp4 o3.z, c2, v0
    mul r0.xyz, c9, v1.y
    mad r0.xyz, v1.x, c8, r0
    mad r0.xyz, v1.z, c10, r0
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul o2.xyz, r0.w, r0
    mad o0.xy, r2.w, c255, r2
    mov o0.zw, r2

// approximately 21 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 10 math, 2 textures
Matrix4x2 unity_WorldToLight at 0
Vector4 _Color at 4
Vector4 _LightColor0 at 3
Vector4 _WorldSpaceLightPos0 at 2

Set 2D Texture "_LightTexture0" to slot 0
Set 2D Texture "_MainTex" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _LightColor0;
//   sampler2D _LightTexture0;
//   sampler2D _MainTex;
//   float4 _WorldSpaceLightPos0;
//   row_major float4x4 unity_WorldToLight;
//
//
// Registers:
//
//   Name                 Reg   Size
//   -------------------- ----- ----
//   unity_WorldToLight   c0       2
//   _WorldSpaceLightPos0 c2       1
//   _LightColor0         c3       1
//   _Color               c4       1
//   _LightTexture0       s0       1
//   _MainTex             s1       1
//

    ps_3_0
    def c5, 1, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_texcoord1_pp v1.xyz
    dcl_texcoord2 v2.xyz
    dcl_2d s0
    dcl_2d s1
    mad r0, v2.xyzx, c5.xxxy, c5.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    texld_pp r0, r1, s0
    mul_pp r0.xyz, r0.w, c3
    texld r1, v0, s1
    mul_pp r1, r1, c4
    mul_pp r0.xyz, r0, r1
    mov_pp oC0.w, r1.w
    dp3_pp r0.w, v1, c2
    max_pp r1.x, r0.w, c5.y
    mul_pp oC0.xyz, r0, r1.x

// approximately 12 instruction slots used (2 texture, 10 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul o2.xyz, r0.wwww, r0.xyzx
  16: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 23 math, 3 temp registers, 3 textures, 2 branches
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 720
}
Constant Buffer "UnityProbeVolume" (112 bytes) on slot 2 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 16
  Vector4 unity_ProbeVolumeParams at 0
  Vector3 unity_ProbeVolumeSizeInv at 80
  Vector3 unity_ProbeVolumeMin at 96
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[46], immediateIndexed
      dcl_constantbuffer CB2[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_resource_texture3d (float,float,float,float) t2
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 3
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s2
   1: mul r0.xyzw, r0.xyzw, cb0[8].xyzw
   2: mul r1.xy, v3.yyyy, cb0[5].xyxx
   3: mad r1.xy, cb0[4].xyxx, v3.xxxx, r1.xyxx
   4: mad r1.xy, cb0[6].xyxx, v3.zzzz, r1.xyxx
   5: add r1.xy, r1.xyxx, cb0[7].xyxx
   6: eq r1.z, cb2[0].x, l(1.000000)
   7: if_nz r1.z
   8:   eq r1.z, cb2[0].y, l(1.000000)
   9:   mul r2.xyz, v3.yyyy, cb2[2].xyzx
  10:   mad r2.xyz, cb2[1].xyzx, v3.xxxx, r2.xyzx
  11:   mad r2.xyz, cb2[3].xyzx, v3.zzzz, r2.xyzx
  12:   add r2.xyz, r2.xyzx, cb2[4].xyzx
  13:   movc r2.xyz, r1.zzzz, r2.xyzx, v3.xyzx
  14:   add r2.xyz, r2.xyzx, -cb2[6].xyzx
  15:   mul r2.yzw, r2.xxyz, cb2[5].xxyz
  16:   mad r1.z, r2.y, l(0.250000), l(0.750000)
  17:   mad r1.w, cb2[0].z, l(0.500000), l(0.750000)
  18:   max r2.x, r1.w, r1.z
  19:   sample r2.xyzw, r2.xzwx, t2.xyzw, s0
  20: else 
  21:   mov r2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
  22: endif 
  23: dp4_sat r1.z, r2.xyzw, cb1[45].xyzw
  24: sample r2.xyzw, r1.xyxx, t1.xyzw, s1
  25: mul r1.x, r1.z, r2.w
  26: mul r1.xyz, r1.xxxx, cb0[2].xyzx
  27: dp3 r1.w, v2.xyzx, cb1[0].xyzx
  28: max r1.w, r1.w, l(0.000000)
  29: mul r0.xyz, r0.xyzx, r1.xyzx
  30: mul o0.xyz, r1.wwww, r0.xyzx
  31: mov o0.w, r0.w
  32: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 8 math, 2 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  lowp vec3 worldNormal_1;
  mediump vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _glesVertex.xyz;
  highp mat3 tmpvar_4;
  tmpvar_4[0] = unity_WorldToObject[0].xyz;
  tmpvar_4[1] = unity_WorldToObject[1].xyz;
  tmpvar_4[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize((_glesNormal * tmpvar_4));
  worldNormal_1 = tmpvar_5;
  tmpvar_2 = worldNormal_1;
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_3));
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = tmpvar_2;
  xlv_TEXCOORD2 = (unity_ObjectToWorld * _glesVertex).xyz;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp mat4 unity_WorldToLight;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  highp vec2 lightCoord_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_6;
  tmpvar_4 = xlv_TEXCOORD1;
  lowp vec4 tmpvar_7;
  tmpvar_7 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = xlv_TEXCOORD2;
  lightCoord_3 = (unity_WorldToLight * tmpvar_8).xy;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_LightTexture0, lightCoord_3).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_9);
  lowp vec4 c_10;
  lowp vec4 c_11;
  lowp float diff_12;
  mediump float tmpvar_13;
  tmpvar_13 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_12 = tmpvar_13;
  c_11.xyz = ((tmpvar_7.xyz * tmpvar_1) * diff_12);
  c_11.w = tmpvar_7.w;
  c_10.w = c_11.w;
  c_10.xyz = c_11.xyz;
  gl_FragData[0] = c_10;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 16 math, 2 temp registers
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Vector4 _MainTex_ST at 144
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 1 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 2 {
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float       
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             9         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         7  ( FLT, FLT, FLT, FLT)
// c9         cb2            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
          dcl_texcoord v0
          dcl_texcoord2 v2
          dcl_texcoord3 v3
   0:     mad oT0.xy, v3, c1, c1.zwzw
   1:     mul r0, v0.y, c3
   2:     mad r0, c2, v0.x, r0
   3:     mad r0, c4, v0.z, r0
   4:     mad oT2.xyz, c5, v0.w, r0
   5:     add r0, r0, c5
   6:     dp3 r1.x, v2, c6
   7:     dp3 r1.y, v2, c7
   8:     dp3 r1.z, v2, c8
   9:     dp3 r1.w, r1, r1
  10:     rsq r1.w, r1.w
  11:     mul oT1.xyz, r1.w, r1
  12:     mul r1, r0.y, c10
  13:     mad r1, c9, r0.x, r1
  14:     mad r1, c11, r0.z, r1
  15:     mad r0, c12, r0.w, r1
  16:     mad oPos.xy, r0.w, c0, r0
  17:     mov oPos.zw, r0

// approximately 18 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[10], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[21], immediateIndexed
      dcl_input v0.xyzw
      dcl_input v2.xyz
      dcl_input v3.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xy
      dcl_output o2.xyz
      dcl_output o3.xyz
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add r1.xyzw, r0.xyzw, cb1[3].xyzw
   4: mad o3.xyz, cb1[3].xyzx, v0.wwww, r0.xyzx
   5: mul r0.xyzw, r1.yyyy, cb2[18].xyzw
   6: mad r0.xyzw, cb2[17].xyzw, r1.xxxx, r0.xyzw
   7: mad r0.xyzw, cb2[19].xyzw, r1.zzzz, r0.xyzw
   8: mad o0.xyzw, cb2[20].xyzw, r1.wwww, r0.xyzw
   9: mad o1.xy, v3.xyxx, cb0[9].xyxx, cb0[9].zwzz
  10: dp3 r0.x, v2.xyzx, cb1[4].xyzx
  11: dp3 r0.y, v2.xyzx, cb1[5].xyzx
  12: dp3 r0.z, v2.xyzx, cb1[6].xyzx
  13: dp3 r0.w, r0.xyzx, r0.xyzx
  14: rsq r0.w, r0.w
  15: mul o2.xyz, r0.wwww, r0.xyzx
  16: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 10 math, 2 temp registers, 2 textures
Set 2D Texture "_MainTex" to slot 0 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 1 sampler slot 0

Constant Buffer "$Globals" (160 bytes) on slot 0 {
  Matrix4x4 unity_WorldToLight at 64
  Vector4 _LightColor0 at 32
  Vector4 _Color at 128
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 _WorldSpaceLightPos0 at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c1         cb0             4         5  ( FLT, FLT, FLT, FLT)
// c6         cb1             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t1               
// s1             s1              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_x
          def c7, 0, 0, 0, 0
          dcl t0.xy
          dcl_pp t1.xyz
          dcl t2.xyz
          dcl_2d s0
          dcl_2d s1
   0:     mul r0.xy, t2.y, c2
   1:     mad r0.xy, c1, t2.x, r0
   2:     mad r0.xy, c3, t2.z, r0
   3:     add r0.xy, r0, c4
   4:     texld r1, t0, s1
   4:     texld_pp r0, r0, s0
   4:     mul_pp r0.xyz, r0.w, c0
   5:     mul_pp r1, r1, c5
   6:     mul_pp r0.xyz, r0, r1
   7:     dp3_pp r0.w, t1, c6
   8:     max_pp r2.w, r0.w, c7.x
   9:     mul_pp r1.xyz, r0, r2.w
  10:     mov_pp oC0, r1

// approximately 13 instruction slots used (2 texture, 11 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[9], immediateIndexed
      dcl_constantbuffer CB1[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xy
      dcl_input_ps linear v2.xyz
      dcl_input_ps linear v3.xyz
      dcl_output o0.xyzw
      dcl_temps 2
   0: mul r0.xy, v3.yyyy, cb0[5].xyxx
   1: mad r0.xy, cb0[4].xyxx, v3.xxxx, r0.xyxx
   2: mad r0.xy, cb0[6].xyxx, v3.zzzz, r0.xyxx
   3: add r0.xy, r0.xyxx, cb0[7].xyxx
   4: sample r0.xyzw, r0.xyxx, t1.xyzw, s0
   5: mul r0.xyz, r0.wwww, cb0[2].xyzx
   6: sample r1.xyzw, v1.xyxx, t0.xyzw, s1
   7: mul r1.xyzw, r1.xyzw, cb0[8].xyzw
   8: mul r0.xyz, r0.xyzx, r1.xyzx
   9: mov o0.w, r1.w
  10: dp3 r0.w, v2.xyzx, cb1[0].xyzx
  11: max r0.w, r0.w, l(0.000000)
  12: mul o0.xyz, r0.wwww, r0.xyzx
  13: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
out highp vec2 vs_TEXCOORD0;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in highp vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
mediump float u_xlat16_7;
void main()
{
    u_xlat0.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat0.xy;
    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat10_0.x = texture(_LightTexture0, u_xlat0.xy).w;
    u_xlat16_1.xyz = u_xlat10_0.xxx * _LightColor0.xyz;
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 * _Color;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz;
    SV_Target0.w = u_xlat16_0.w;
    u_xlat16_7 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat16_7 = max(u_xlat16_7, 0.0);
    SV_Target0.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD2.xyz = fma(Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(Globals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = fma(input.TEXCOORD0.xy, Globals._MainTex_ST.xy, Globals._MainTex_ST.zw);
    u_xlat0.x = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD1.xyz = float3(u_xlat6) * u_xlat0.xyz;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0 sampler slot 2
Set 2D Texture "_LightTexture0" to slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 2 sampler slot 0

Constant Buffer "Globals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 _LightColor0 at 144
  Vector4 _Color at 224
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) do { (a) * (b) + (c) } while(0)
#endif

struct Globals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Color;
};

struct Mtl_FragmentIn
{
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_MainTex [[ sampler (2) ]],
    texture2d<float, access::sample > _MainTex [[ texture (0) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture (1) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture (2) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float u_xlat7;
    bool u_xlatb7;
    float u_xlat10;
    u_xlat0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat0 = u_xlat0 * Globals._Color;
    u_xlat1.xy = input.TEXCOORD2.yy * Globals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD2.xx, u_xlat1.xy);
    u_xlat1.xy = fma(Globals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD2.zz, u_xlat1.xy);
    u_xlat1.xy = u_xlat1.xy + Globals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb7 = Globals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = Globals.unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = input.TEXCOORD2.yyy * Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD2.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.zzz, u_xlat2.xyz);
        u_xlat2.xyz = u_xlat2.xyz + Globals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb7)) ? u_xlat2.xyz : input.TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-Globals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat2.yzw = u_xlat2.xyz * Globals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7 = fma(u_xlat2.y, 0.25, 0.75);
        u_xlat10 = fma(Globals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat2.x = max(u_xlat10, u_xlat7);
        u_xlat2 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    }
    u_xlat7 = dot(u_xlat2, Globals.unity_OcclusionMaskSelector);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat1.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat1.xy).w;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
    u_xlat1.xyz = u_xlat1.xxx * Globals._LightColor0.xyz;
    u_xlat10 = dot(input.TEXCOORD1.xyz, Globals._WorldSpaceLightPos0.xyz);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    output.SV_Target0.xyz = float3(u_xlat10) * u_xlat0.xyz;
    output.SV_Target0.w = u_xlat0.w;
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_OcclusionMaskSelector;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 _LightColor0;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
uniform  sampler2D _LightTexture0;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat2;
vec4 u_xlat10_2;
float u_xlat7;
bool u_xlatb7;
float u_xlat10;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0 = u_xlat10_0 * _Color;
    u_xlat1.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat1.xy;
    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat1.xy;
    u_xlat1.xy = u_xlat1.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb7 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = unity_ProbeVolumeParams.y==1.0;
        u_xlat2.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD2.xxx + u_xlat2.xyz;
        u_xlat2.xyz = hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD2.zzz + u_xlat2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat2.xyz = (bool(u_xlatb7)) ? u_xlat2.xyz : vs_TEXCOORD2.xyz;
        u_xlat2.xyz = u_xlat2.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat2.yzw = u_xlat2.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat7 = u_xlat2.y * 0.25 + 0.75;
        u_xlat10 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
        u_xlat2.x = max(u_xlat10, u_xlat7);
        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
    } else {
        u_xlat2.x = float(1.0);
        u_xlat2.y = float(1.0);
        u_xlat2.z = float(1.0);
        u_xlat2.w = float(1.0);
    //ENDIF
    }
    u_xlat7 = dot(u_xlat2, unity_OcclusionMaskSelector);
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat10_2 = texture(_LightTexture0, u_xlat1.xy);
    u_xlat1.x = u_xlat7 * u_xlat10_2.w;
    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
    u_xlat10 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    SV_Target0.xyz = vec3(u_xlat10) * u_xlat0.xyz;
    SV_Target0.w = u_xlat0.w;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Color"

Specialization constant id: 0 expression: "u_xlatb9 = unity_ProbeVolumeParams.x==1.0;
u_xlatb9", used in: Fragment 

Set 2D Texture "_LightTexture0" to set: 0, binding: 1, used in: Fragment 
Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 
Set 3D Texture "unity_ProbeVolumeSH" to set: 0, binding: 2, used in: Fragment 

Constant Buffer "PGlobals1855179941" (240 bytes) on set: 1, binding: 0, used in: Fragment  {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 48
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _Color at 224
  Vector4 _LightColor0 at 144
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_OcclusionMaskSelector at 16
  Vector3 unity_ProbeVolumeMin at 128
  Vector4 unity_ProbeVolumeParams at 32
  Vector3 unity_ProbeVolumeSizeInv at 112
}
Constant Buffer "VGlobals1855179941" (208 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixVP at 128
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
  Vector4 _MainTex_ST at 192
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 156

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 11 52 85 97 98 110 147
                              Decorate 11 Location 0
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 19 0 Offset 0
                              MemberDecorate 19 1 Offset 64
                              MemberDecorate 19 2 Offset 128
                              MemberDecorate 19 3 Offset 192
                              Decorate 19 Block
                              Decorate 21 DescriptorSet 1
                              Decorate 21 Binding 1
                              Decorate 52 Location 2
                              MemberDecorate 83 0 BuiltIn Position
                              MemberDecorate 83 1 BuiltIn PointSize
                              MemberDecorate 83 2 BuiltIn ClipDistance
                              Decorate 83 Block
                              Decorate 97 Location 0
                              Decorate 98 Location 2
                              Decorate 110 Location 1
                              Decorate 147 RelaxedPrecision
                              Decorate 147 Location 1
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypePointer Input 7(fvec4)
              11:     10(ptr) Variable Input
              14:             TypeInt 32 0
              15:     14(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeStruct 16 17 18 7(fvec4)
              20:             TypePointer Uniform 19(struct)
              21:     20(ptr) Variable Uniform
              22:             TypeInt 32 1
              23:     22(int) Constant 0
              24:     22(int) Constant 1
              25:             TypePointer Uniform 7(fvec4)
              36:     22(int) Constant 2
              44:      8(ptr) Variable Private
              46:     22(int) Constant 3
              50:             TypeVector 6(float) 3
              51:             TypePointer Output 50(fvec3)
              52:     51(ptr) Variable Output
              81:     14(int) Constant 1
              82:             TypeArray 6(float) 81
              83:             TypeStruct 7(fvec4) 6(float) 82
              84:             TypePointer Output 83(struct)
              85:     84(ptr) Variable Output
              93:             TypePointer Output 7(fvec4)
              95:             TypeVector 6(float) 2
              96:             TypePointer Output 95(fvec2)
              97:     96(ptr) Variable Output
              98:     10(ptr) Variable Input
             109:             TypePointer Input 50(fvec3)
             110:    109(ptr) Variable Input
             116:     14(int) Constant 0
             117:             TypePointer Private 6(float)
             130:     14(int) Constant 2
             132:    117(ptr) Variable Private
             147:     51(ptr) Variable Output
             150:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              12:    7(fvec4) Load 11
              13:    7(fvec4) VectorShuffle 12 12 1 1 1 1
              26:     25(ptr) AccessChain 21 23 24
              27:    7(fvec4) Load 26
              28:    7(fvec4) FMul 13 27
                              Store 9 28
              29:     25(ptr) AccessChain 21 23 23
              30:    7(fvec4) Load 29
              31:    7(fvec4) Load 11
              32:    7(fvec4) VectorShuffle 31 31 0 0 0 0
              33:    7(fvec4) FMul 30 32
              34:    7(fvec4) Load 9
              35:    7(fvec4) FAdd 33 34
                              Store 9 35
              37:     25(ptr) AccessChain 21 23 36
              38:    7(fvec4) Load 37
              39:    7(fvec4) Load 11
              40:    7(fvec4) VectorShuffle 39 39 2 2 2 2
              41:    7(fvec4) FMul 38 40
              42:    7(fvec4) Load 9
              43:    7(fvec4) FAdd 41 42
                              Store 9 43
              45:    7(fvec4) Load 9
              47:     25(ptr) AccessChain 21 23 46
              48:    7(fvec4) Load 47
              49:    7(fvec4) FAdd 45 48
                              Store 44 49
              53:     25(ptr) AccessChain 21 23 46
              54:    7(fvec4) Load 53
              55:   50(fvec3) VectorShuffle 54 54 0 1 2
              56:    7(fvec4) Load 11
              57:   50(fvec3) VectorShuffle 56 56 3 3 3
              58:   50(fvec3) FMul 55 57
              59:    7(fvec4) Load 9
              60:   50(fvec3) VectorShuffle 59 59 0 1 2
              61:   50(fvec3) FAdd 58 60
                              Store 52 61
              62:    7(fvec4) Load 44
              63:    7(fvec4) VectorShuffle 62 62 1 1 1 1
              64:     25(ptr) AccessChain 21 36 24
              65:    7(fvec4) Load 64
              66:    7(fvec4) FMul 63 65
                              Store 9 66
              67:     25(ptr) AccessChain 21 36 23
              68:    7(fvec4) Load 67
              69:    7(fvec4) Load 44
              70:    7(fvec4) VectorShuffle 69 69 0 0 0 0
              71:    7(fvec4) FMul 68 70
              72:    7(fvec4) Load 9
              73:    7(fvec4) FAdd 71 72
                              Store 9 73
              74:     25(ptr) AccessChain 21 36 36
              75:    7(fvec4) Load 74
              76:    7(fvec4) Load 44
              77:    7(fvec4) VectorShuffle 76 76 2 2 2 2
              78:    7(fvec4) FMul 75 77
              79:    7(fvec4) Load 9
              80:    7(fvec4) FAdd 78 79
                              Store 9 80
              86:     25(ptr) AccessChain 21 36 46
              87:    7(fvec4) Load 86
              88:    7(fvec4) Load 44
              89:    7(fvec4) VectorShuffle 88 88 3 3 3 3
              90:    7(fvec4) FMul 87 89
              91:    7(fvec4) Load 9
              92:    7(fvec4) FAdd 90 91
              94:     93(ptr) AccessChain 85 23
                              Store 94 92
              99:    7(fvec4) Load 98
             100:   95(fvec2) VectorShuffle 99 99 0 1
             101:     25(ptr) AccessChain 21 46
             102:    7(fvec4) Load 101
             103:   95(fvec2) VectorShuffle 102 102 0 1
             104:   95(fvec2) FMul 100 103
             105:     25(ptr) AccessChain 21 46
             106:    7(fvec4) Load 105
             107:   95(fvec2) VectorShuffle 106 106 2 3
             108:   95(fvec2) FAdd 104 107
                              Store 97 108
             111:   50(fvec3) Load 110
             112:     25(ptr) AccessChain 21 24 23
             113:    7(fvec4) Load 112
             114:   50(fvec3) VectorShuffle 113 113 0 1 2
             115:    6(float) Dot 111 114
             118:    117(ptr) AccessChain 9 116
                              Store 118 115
             119:   50(fvec3) Load 110
             120:     25(ptr) AccessChain 21 24 24
             121:    7(fvec4) Load 120
             122:   50(fvec3) VectorShuffle 121 121 0 1 2
             123:    6(float) Dot 119 122
             124:    117(ptr) AccessChain 9 81
                              Store 124 123
             125:   50(fvec3) Load 110
             126:     25(ptr) AccessChain 21 24 36
             127:    7(fvec4) Load 126
             128:   50(fvec3) VectorShuffle 127 127 0 1 2
             129:    6(float) Dot 125 128
             131:    117(ptr) AccessChain 9 130
                              Store 131 129
             133:    7(fvec4) Load 9
             134:   50(fvec3) VectorShuffle 133 133 0 1 2
             135:    7(fvec4) Load 9
             136:   50(fvec3) VectorShuffle 135 135 0 1 2
             137:    6(float) Dot 134 136
                              Store 132 137
             138:    6(float) Load 132
             139:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 138
                              Store 132 139
             140:    6(float) Load 132
             141:   50(fvec3) CompositeConstruct 140 140 140
             142:    7(fvec4) Load 9
             143:   50(fvec3) VectorShuffle 142 142 0 1 2
             144:   50(fvec3) FMul 141 143
             145:    7(fvec4) Load 9
             146:    7(fvec4) VectorShuffle 145 144 4 5 6 3
                              Store 9 146
             148:    7(fvec4) Load 9
             149:   50(fvec3) VectorShuffle 148 148 0 1 2
                              Store 147 149
             151:    150(ptr) AccessChain 85 23 81
             152:    6(float) Load 151
             153:    6(float) FNegate 152
             154:    150(ptr) AccessChain 85 23 81
                              Store 154 153
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 254

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 39 229 242
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 0
                              Decorate 20 RelaxedPrecision
                              Decorate 21 RelaxedPrecision
                              Decorate 24 ArrayStride 16
                              Decorate 26 ArrayStride 16
                              MemberDecorate 27 0 RelaxedPrecision
                              MemberDecorate 27 0 Offset 0
                              MemberDecorate 27 1 RelaxedPrecision
                              MemberDecorate 27 1 Offset 16
                              MemberDecorate 27 2 Offset 32
                              MemberDecorate 27 3 Offset 48
                              MemberDecorate 27 4 Offset 112
                              MemberDecorate 27 5 Offset 128
                              MemberDecorate 27 6 RelaxedPrecision
                              MemberDecorate 27 6 Offset 144
                              MemberDecorate 27 7 Offset 160
                              MemberDecorate 27 8 RelaxedPrecision
                              MemberDecorate 27 8 Offset 224
                              Decorate 27 Block
                              Decorate 29 DescriptorSet 1
                              Decorate 29 Binding 0
                              Decorate 34 RelaxedPrecision
                              Decorate 35 RelaxedPrecision
                              Decorate 39 Location 2
                              Decorate 87 SpecId 0
                              Decorate 185 DescriptorSet 0
                              Decorate 185 Binding 2
                              Decorate 190 RelaxedPrecision
                              Decorate 199 RelaxedPrecision
                              Decorate 200 RelaxedPrecision
                              Decorate 202 RelaxedPrecision
                              Decorate 203 RelaxedPrecision
                              Decorate 206 RelaxedPrecision
                              Decorate 208 RelaxedPrecision
                              Decorate 210 RelaxedPrecision
                              Decorate 211 RelaxedPrecision
                              Decorate 211 DescriptorSet 0
                              Decorate 211 Binding 1
                              Decorate 212 RelaxedPrecision
                              Decorate 215 RelaxedPrecision
                              Decorate 216 RelaxedPrecision
                              Decorate 218 RelaxedPrecision
                              Decorate 219 RelaxedPrecision
                              Decorate 220 RelaxedPrecision
                              Decorate 221 RelaxedPrecision
                              Decorate 222 RelaxedPrecision
                              Decorate 225 RelaxedPrecision
                              Decorate 226 RelaxedPrecision
                              Decorate 227 RelaxedPrecision
                              Decorate 228 RelaxedPrecision
                              Decorate 229 RelaxedPrecision
                              Decorate 229 Location 1
                              Decorate 230 RelaxedPrecision
                              Decorate 232 RelaxedPrecision
                              Decorate 233 RelaxedPrecision
                              Decorate 234 RelaxedPrecision
                              Decorate 235 RelaxedPrecision
                              Decorate 236 RelaxedPrecision
                              Decorate 237 RelaxedPrecision
                              Decorate 238 RelaxedPrecision
                              Decorate 239 RelaxedPrecision
                              Decorate 240 RelaxedPrecision
                              Decorate 242 RelaxedPrecision
                              Decorate 242 Location 0
                              Decorate 243 RelaxedPrecision
                              Decorate 244 RelaxedPrecision
                              Decorate 245 RelaxedPrecision
                              Decorate 246 RelaxedPrecision
                              Decorate 250 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              20:      8(ptr) Variable Private
              22:             TypeInt 32 0
              23:     22(int) Constant 4
              24:             TypeArray 7(fvec4) 23
              25:             TypeVector 6(float) 3
              26:             TypeArray 7(fvec4) 23
              27:             TypeStruct 7(fvec4) 7(fvec4) 7(fvec4) 24 25(fvec3) 25(fvec3) 7(fvec4) 26 7(fvec4)
              28:             TypePointer Uniform 27(struct)
              29:     28(ptr) Variable Uniform
              30:             TypeInt 32 1
              31:     30(int) Constant 8
              32:             TypePointer Uniform 7(fvec4)
              36:             TypePointer Private 15(fvec2)
              37:     36(ptr) Variable Private
              38:             TypePointer Input 25(fvec3)
              39:     38(ptr) Variable Input
              42:     30(int) Constant 7
              43:     30(int) Constant 1
              48:     30(int) Constant 0
              57:     30(int) Constant 2
              67:     30(int) Constant 3
              72:             TypeBool
              73:             TypePointer Private 72(bool)
              74:     73(ptr) Variable Private
              75:     22(int) Constant 0
              76:             TypePointer Uniform 6(float)
              79:    6(float) Constant 1065353216
              81:    72(bool) ConstantFalse
              87:    72(bool) SpecConstantFalse
              90:     22(int) Constant 1
              94:      8(ptr) Variable Private
             133:             TypePointer Function 25(fvec3)
             147:     30(int) Constant 5
             148:             TypePointer Uniform 25(fvec3)
             157:     30(int) Constant 4
             163:             TypePointer Private 6(float)
             164:    163(ptr) Variable Private
             167:    6(float) Constant 1048576000
             169:    6(float) Constant 1061158912
             171:    163(ptr) Variable Private
             172:     22(int) Constant 2
             175:    6(float) Constant 1056964608
             182:             TypeImage 6(float) 3D sampled format:Unknown
             183:             TypeSampledImage 182
             184:             TypePointer UniformConstant 183
             185:    184(ptr) Variable UniformConstant
             190:      8(ptr) Variable Private
             196:     22(int) Constant 3
             198:             TypePointer Private 25(fvec3)
             199:    198(ptr) Variable Private
             207:    6(float) Constant 0
             210:    163(ptr) Variable Private
             211:     12(ptr) Variable UniformConstant
             216:    163(ptr) Variable Private
             223:     30(int) Constant 6
             228:    163(ptr) Variable Private
             229:     38(ptr) Variable Input
             241:             TypePointer Output 7(fvec4)
             242:    241(ptr) Variable Output
             251:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
             134:    133(ptr) Variable Function
              14:          11 Load 13
              18:   15(fvec2) Load 17
              19:    7(fvec4) ImageSampleImplicitLod 14 18
                              Store 9 19
              21:    7(fvec4) Load 9
              33:     32(ptr) AccessChain 29 31
              34:    7(fvec4) Load 33
              35:    7(fvec4) FMul 21 34
                              Store 20 35
              40:   25(fvec3) Load 39
              41:   15(fvec2) VectorShuffle 40 40 1 1
              44:     32(ptr) AccessChain 29 42 43
              45:    7(fvec4) Load 44
              46:   15(fvec2) VectorShuffle 45 45 0 1
              47:   15(fvec2) FMul 41 46
                              Store 37 47
              49:     32(ptr) AccessChain 29 42 48
              50:    7(fvec4) Load 49
              51:   15(fvec2) VectorShuffle 50 50 0 1
              52:   25(fvec3) Load 39
              53:   15(fvec2) VectorShuffle 52 52 0 0
              54:   15(fvec2) FMul 51 53
              55:   15(fvec2) Load 37
              56:   15(fvec2) FAdd 54 55
                              Store 37 56
              58:     32(ptr) AccessChain 29 42 57
              59:    7(fvec4) Load 58
              60:   15(fvec2) VectorShuffle 59 59 0 1
              61:   25(fvec3) Load 39
              62:   15(fvec2) VectorShuffle 61 61 2 2
              63:   15(fvec2) FMul 60 62
              64:   15(fvec2) Load 37
              65:   15(fvec2) FAdd 63 64
                              Store 37 65
              66:   15(fvec2) Load 37
              68:     32(ptr) AccessChain 29 42 67
              69:    7(fvec4) Load 68
              70:   15(fvec2) VectorShuffle 69 69 0 1
              71:   15(fvec2) FAdd 66 70
                              Store 37 71
              77:     76(ptr) AccessChain 29 57 75
              78:    6(float) Load 77
              80:    72(bool) FOrdEqual 78 79
                              Store 74 80
                              SelectionMerge 83 None
                              BranchConditional 81 82 83
              82:               Label
              84:    72(bool)   Load 74
                                SelectionMerge 86 None
                                BranchConditional 84 85 86
              85:                 Label
                                  Branch 86
              86:               Label
                                Branch 83
              83:             Label
                              SelectionMerge 89 None
                              BranchConditional 87 88 192
              88:               Label
              91:     76(ptr)   AccessChain 29 57 90
              92:    6(float)   Load 91
              93:    72(bool)   FOrdEqual 92 79
                                Store 74 93
              95:   25(fvec3)   Load 39
              96:   25(fvec3)   VectorShuffle 95 95 1 1 1
              97:     32(ptr)   AccessChain 29 67 43
              98:    7(fvec4)   Load 97
              99:   25(fvec3)   VectorShuffle 98 98 0 1 2
             100:   25(fvec3)   FMul 96 99
             101:    7(fvec4)   Load 94
             102:    7(fvec4)   VectorShuffle 101 100 4 5 6 3
                                Store 94 102
             103:     32(ptr)   AccessChain 29 67 48
             104:    7(fvec4)   Load 103
             105:   25(fvec3)   VectorShuffle 104 104 0 1 2
             106:   25(fvec3)   Load 39
             107:   25(fvec3)   VectorShuffle 106 106 0 0 0
             108:   25(fvec3)   FMul 105 107
             109:    7(fvec4)   Load 94
             110:   25(fvec3)   VectorShuffle 109 109 0 1 2
             111:   25(fvec3)   FAdd 108 110
             112:    7(fvec4)   Load 94
             113:    7(fvec4)   VectorShuffle 112 111 4 5 6 3
                                Store 94 113
             114:     32(ptr)   AccessChain 29 67 57
             115:    7(fvec4)   Load 114
             116:   25(fvec3)   VectorShuffle 115 115 0 1 2
             117:   25(fvec3)   Load 39
             118:   25(fvec3)   VectorShuffle 117 117 2 2 2
             119:   25(fvec3)   FMul 116 118
             120:    7(fvec4)   Load 94
             121:   25(fvec3)   VectorShuffle 120 120 0 1 2
             122:   25(fvec3)   FAdd 119 121
             123:    7(fvec4)   Load 94
             124:    7(fvec4)   VectorShuffle 123 122 4 5 6 3
                                Store 94 124
             125:    7(fvec4)   Load 94
             126:   25(fvec3)   VectorShuffle 125 125 0 1 2
             127:     32(ptr)   AccessChain 29 67 67
             128:    7(fvec4)   Load 127
             129:   25(fvec3)   VectorShuffle 128 128 0 1 2
             130:   25(fvec3)   FAdd 126 129
             131:    7(fvec4)   Load 94
             132:    7(fvec4)   VectorShuffle 131 130 4 5 6 3
                                Store 94 132
             135:    72(bool)   Load 74
                                SelectionMerge 137 None
                                BranchConditional 135 136 140
             136:                 Label
             138:    7(fvec4)     Load 94
             139:   25(fvec3)     VectorShuffle 138 138 0 1 2
                                  Store 134 139
                                  Branch 137
             140:                 Label
             141:   25(fvec3)     Load 39
                                  Store 134 141
                                  Branch 137
             137:               Label
             142:   25(fvec3)   Load 134
             143:    7(fvec4)   Load 94
             144:    7(fvec4)   VectorShuffle 143 142 4 5 6 3
                                Store 94 144
             145:    7(fvec4)   Load 94
             146:   25(fvec3)   VectorShuffle 145 145 0 1 2
             149:    148(ptr)   AccessChain 29 147
             150:   25(fvec3)   Load 149
             151:   25(fvec3)   FNegate 150
             152:   25(fvec3)   FAdd 146 151
             153:    7(fvec4)   Load 94
             154:    7(fvec4)   VectorShuffle 153 152 4 5 6 3
                                Store 94 154
             155:    7(fvec4)   Load 94
             156:   25(fvec3)   VectorShuffle 155 155 0 1 2
             158:    148(ptr)   AccessChain 29 157
             159:   25(fvec3)   Load 158
             160:   25(fvec3)   FMul 156 159
             161:    7(fvec4)   Load 94
             162:    7(fvec4)   VectorShuffle 161 160 0 4 5 6
                                Store 94 162
             165:    163(ptr)   AccessChain 94 90
             166:    6(float)   Load 165
             168:    6(float)   FMul 166 167
             170:    6(float)   FAdd 168 169
                                Store 164 170
             173:     76(ptr)   AccessChain 29 57 172
             174:    6(float)   Load 173
             176:    6(float)   FMul 174 175
             177:    6(float)   FAdd 176 169
                                Store 171 177
             178:    6(float)   Load 171
             179:    6(float)   Load 164
             180:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 178 179
             181:    163(ptr)   AccessChain 94 75
                                Store 181 180
             186:         183   Load 185
             187:    7(fvec4)   Load 94
             188:   25(fvec3)   VectorShuffle 187 187 0 2 3
             189:    7(fvec4)   ImageSampleImplicitLod 186 188
                                Store 94 189
             191:    7(fvec4)   Load 94
                                Store 190 191
                                Branch 89
             192:               Label
             193:    163(ptr)   AccessChain 190 75
                                Store 193 79
             194:    163(ptr)   AccessChain 190 90
                                Store 194 79
             195:    163(ptr)   AccessChain 190 172
                                Store 195 79
             197:    163(ptr)   AccessChain 190 196
                                Store 197 79
                                Branch 89
              89:             Label
             200:    7(fvec4) Load 190
             201:     32(ptr) AccessChain 29 43
             202:    7(fvec4) Load 201
             203:    6(float) Dot 200 202
             204:    163(ptr) AccessChain 199 75
                              Store 204 203
             205:    163(ptr) AccessChain 199 75
             206:    6(float) Load 205
             208:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 206 207 79
             209:    163(ptr) AccessChain 199 75
                              Store 209 208
             212:          11 Load 211
             213:   15(fvec2) Load 37
             214:    7(fvec4) ImageSampleImplicitLod 212 213
             215:    6(float) CompositeExtract 214 3
                              Store 210 215
             217:    163(ptr) AccessChain 199 75
             218:    6(float) Load 217
             219:    6(float) Load 210
             220:    6(float) FMul 218 219
                              Store 216 220
             221:    6(float) Load 216
             222:   25(fvec3) CompositeConstruct 221 221 221
             224:     32(ptr) AccessChain 29 223
             225:    7(fvec4) Load 224
             226:   25(fvec3) VectorShuffle 225 225 0 1 2
             227:   25(fvec3) FMul 222 226
                              Store 199 227
             230:   25(fvec3) Load 229
             231:     32(ptr) AccessChain 29 48
             232:    7(fvec4) Load 231
             233:   25(fvec3) VectorShuffle 232 232 0 1 2
             234:    6(float) Dot 230 233
                              Store 228 234
             235:    6(float) Load 228
             236:    6(float) ExtInst 1(GLSL.std.450) 40(FMax) 235 207
                              Store 228 236
             237:    7(fvec4) Load 20
             238:   25(fvec3) VectorShuffle 237 237 0 1 2
             239:   25(fvec3) Load 199
             240:   25(fvec3) FMul 238 239
                              Store 199 240
             243:    6(float) Load 228
             244:   25(fvec3) CompositeConstruct 243 243 243
             245:   25(fvec3) Load 199
             246:   25(fvec3) FMul 244 245
             247:    7(fvec4) Load 242
             248:    7(fvec4) VectorShuffle 247 246 4 5 6 3
                              Store 242 248
             249:    163(ptr) AccessChain 20 196
             250:    6(float) Load 249
             252:    251(ptr) AccessChain 242 196
                              Store 252 250
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }
}
Fallback "Legacy Shaders/Transparent/VertexLit"
}